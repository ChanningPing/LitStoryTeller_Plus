{"paragraph_scenes_info": [{"x": 1, "text": "In this paper we introduce a novel collapsed Gibbs sampling method for the widely used latent Dirichlet allocation (LDA) model.Our new method results in significant speedups on real world text corpora.Conventional Gibbs sampling schemes for LDA require O(K) operations per sample where K is the number of topics in the model.Our proposed method draws equivalent samples but requires on average significantly less then K operations per sample.On real-word corpora FastLDA can be as much as 8 times faster than the standard collapsed Gibbs sampler for LDA.No approximations are necessary, and we show that our fast sampling scheme produces exactly the same results as the standard (but slower) sampling scheme.Experiments on four real world data sets demonstrate speedups for a wide range of collection sizes.For the PubMed collection of over 8 million documents with a required computation time of 6 CPU months for LDA, our speedup of 5.7 can save 5 CPU months of computation."}, {"x": 3, "text": "The latent Dirichlet allocation (LDA) model (or topic model) is a general probabilistic framework for modeling sparse vectors of count data, such as bags of words for text, bags of features for images, or ratings of items by customers.The key idea behind the LDA model (for text data for example) is to assume that the words in each document were generated by a mixture of topics, where a topic is represented as a multinomial probability distribution over words.The mixing coefficients for each document and the wordtopic distributions are unobserved (hidden) and are learned from data using unsupervised learning methods.Blei et al <3> introduced the LDA model within a general Bayesian framework and developed a variational algorithm for learning the model from data.Griffiths and Steyvers <6> subsequently proposed a learning algorithm based on collapsed Gibbs sampling.Both the variational and Gibbs sampling approaches have their advantages: the variational approach is arguably faster computationally, but the Gibbs sampling approach is in principal more accurate since it asymptotically approaches the correct distribution."}, {"x": 4, "text": "Since the original introduction of the LDA model, the technique has been broadly applied in machine learning and data mining, particularly in text analysis and computer vision, with the Gibbs sampling algorithm in common use.For example, Wei and Croft <19> and Chemudugunta, Smyth, and Steyvers <5> have successfully applied the LDA model to information retrieval and shown that it can significantly outperform  in terms of precision-recall  alternative methods such as latent semantic analysis.LDA models have also been increasingly applied to problems involving very large text corpora: Buntine <4>, Mimno and McCallum <12> and Newman et al <15> have all used the LDA model to automatically generate topic models for millions of documents and used these models as the basis for automated indexing and faceted Web browsing."}, {"x": 5, "text": "In this general context there is significant motivation to speed-up the learning of topic models, both to reduce the time taken to learn topic models for very large text collections, as well as moving towards real-time topic modeling (e.g., for a few thousand documents returned by a search engine).The collapsed Gibbs sampling algorithm of Griffiths and Steyvers involves repeatedly sampling a topic assign ment for each word in the corpus, where a single iteration of the Gibbs sampler consists of sampling a topic for each word.Each sampled topic assignment is generated from a conditional multinomial distribution over the K topics, which in turn requires the computation of K conditional probabilities.As an example, consider learning a topic model with one million documents, each with 1000 words on average, K = 1000 topics, and performing 500 Gibbs iterations (a typical number in practice).This would require generating a total of 51011 word-topic assignments via sampling, where each sampling operation itself involves K = 1000 computations."}, {"x": 6, "text": "The key idea of our paper is to reduce the time taken for the inner-loop sampling operation, reducing it from K to significantly less then K on average; we observe speedups up to a factor of 8 in our experiments.Furthermore, the speedup usually increases as K increases.In our proposed approach we exploit the fact that, for any particular word and document, the sampling distributions of interest are frequently skewed such that most of the probability mass is concentrated on a small fraction of the total number of topics K.This allows us to order the sampling operations such that on average only a fraction of the K topic probabilities need to be calculated.Our proposed algorithm is exact, i.e., no approximation is made and the fast algorithm correctly and exactly samples from the same true posterior distribution as the slower standard Gibbs sampling algorithm."}, {"x": 8, "text": "The problem of rapidly evaluating or approximating probabilities and drawing samples arises in a great many domains.However, most existing solutions are characterized by the data being embedded in a metric space, so that geometric relationships can be exploited to rapidly evaluate the total probability of large sets of potential states.Mixture modeling problems provide a typical example: a data structure which clusters data by spatial similarity, such as a KD-tree <2>, stores statistics of the data in a hierarchical fashion and uses these statistics to compute upper and lower bounds on the association probabilities for any data within those sets.Using these bounds, one may determine whether the current estimates are sufficiently accurate, or whether they need to be improved by refining the clusters further (moving to the next level of the data structure)."}, {"x": 9, "text": "Accelerated algorithms of this type exist for many common probabilistic models.In some cases, such as k-means, it is possible to accelerate the computation of an exact solution <1, 16, 17>.For other algorithms, such as expectation maximization for Gaussian mixtures, the evaluations are only approximate but can be controlled by tuning a quality parameter <13, 10, 9>.In <8>, a similar branch-and-bound method is used to compute approximate probabilities and draw approximate samples from the product of several Gaussian mixture distributions."}, {"x": 10, "text": "Unfortunately, the categorical nature of LDA makes it difficult to apply any of these techniques directly.Instead, although we apply a similar bound and refine procedure, both the bound and the sequence of refinement operations must be matched to the expected behavior of the data in topic modeling.We describe the details of this bound along with our algorithm in Section 4, after first reviewing the standard LDA model and Gibbs sampling."}, {"x": 12, "text": "LDA models each of D documents as a mixture over K latent topics, each of which describes a multinomial distribution over aW word vocabulary.Figure 1 shows the graphical model representation of the LDA model."}, {"x": 13, "text": "The LDA model is equivalent to the following generative process for words and documents: For each of Nj words in document j 1. sample a topic zij  Multinomial(j) 2. sample a word xij  Multinomial(zij ) where the parameters of the multinomials for topics in a document j and words in a topic k have Dirichlet priors.Intuitively we can interpret the multinomial parameter k as indicating which words are important in topic k and the parameter j as indicating which topics appear in document j <6>.Given the observed words x = <xij>, the task of Bayesian inference is to compute the posterior distribution over the latent topic indices z = <zij>, the mixing proportions j , and the topics k.An efficient inference procedure is to use collapsed Gibbs sampling <6>, where  and  are marginalized out, and only the latent variables z are sampled.After the sampler has burned-in we can calculate an estimate of  and  given z."}, {"x": 15, "text": "In words, Nwk is the number of times the word w is assigned to the topic k and Nkj is the number of times a word in document j has been assigned to topic k.Given the current state of all but one variable zij , the conditional probability and the superscript ij indicates that the corresponding datum has been excluded in the count summations Nwkj .An iteration of Gibbs sampling proceeds by drawing a sample for zij according to (1) for each word i in each document j. A sample is typically accomplished by first calculating the normalization constant Z, then sampling zij according to its normalized probability; see Algorithm 3.1.Given the value sampled for zij the counts Nkj ,Nk,Nwk are updated.The time complexity for each iteration of Gibbs sampling is then O(NK)."}, {"x": 18, "text": "For most real data sets after several iterations of the Gibbs sampler, the probability mass of the distribution p(zij = k|zij , x, , ) becomes concentrated on only a small set of the topics as in Figure 4.FastLDA takes advantage of this concentration of probability mass by only checking a subset of topics before drawing a correct sample.After calculating the unnormalized probability in (1) of a subset of topics, FastLDA determines that the sampled value does not depend on the probability of the remaining topics.To describe how FastLDA works, it is useful to introduce a graphical depiction of how a sample for zij is conventionally drawn.We begin by segmenting a line of unit length into K sections, with the kth section having length equal to p(zij = k|zij , x, , ).We then draw a sample for zij by drawing a value uniformly from the interval, u  Uniform<0,1>, and selecting the value of zij based on the segment into which u falls; see Figure 2."}, {"x": 19, "text": "As an alternative, suppose that we have a sequence of bounds on the normalization constant Z, denoted Z1 ...ZK, such that Z1  Z2  ...ZK = Z.Then, we can graphically depict the sampling procedure for FastLDA in a similar way, seen in Figure 3.Instead of having a single segment for topic k, of length pk/Z = p(zij = k|zij , x, , ), we instead have several segments sk l ...sk K associated with each topic.The first segment for a topic k, sk k, describes a conservative estimate of the probability of the topic given the upper bound Zk on the true normalization factor Z.Each of the subsequent segments associated with topic k, namely sk"}, {"x": 20, "text": "Since the final bound ZK = Z, the total sum of the segment lengths for topic k is equal to the true, normalized probability of that topic:"}, {"x": 21, "text": "Therefore, as in the conventional sampling method, we can draw zij from the correct distribution by first drawing u  Uniform<0, 1>, then determining the segment in which it falls.By organizing the segments in this way, we can obtain a substantial advantage: we can check each segments in order, knowing only p1 ...pk and Zk, and if we find that u falls within a particular segment sk l , the remaining segments are irrelevant.Importantly, if for our sequence of bounds Z1 ...ZK, an intermediate bound Zl depends only on the values of ajk and bjk for k  l, then we may be able to draw the sample after only examining topics 1 ...l.Given that in LDA, the probability mass is typically concentrated on a small subset of topics for a given word and document, in practice we may have to do far fewer operations per sample on average."}, {"x": 22, "text": "4.1 Upper Bounds for Z"}, {"x": 23, "text": "FastLDA depends on finding a sequence of improving bounds on the normalization constant, Z1  Z2  ...ZK = Z.We first define Z in terms of component vectors ~a,~b,~c:"}, {"x": 31, "text": "Finally, we must also consider the order in which the topics are evaluated.Execution time improves as the number of topics considered before we find the segment sk l containing u decreases.We thus would like the algorithm to consider the longest segments first, and only check the short segments if necessary.Two factors affect the segment length: pk, the unnormalized probability, and Zl, the bound on Z at step l. Specifically, we want to check the topics with the largest pk early, and similarly the topics which will improve (decrease) the bound Zl."}, {"x": 34, "text": "4.3 Fast LDA Algorithm"}, {"x": 36, "text": "4.4 Complexity of the Algorithm"}, {"x": 40, "text": "5.DATA SETS"}, {"x": 41, "text": "We compared execution times of LDA and FastLDA using four data sets: NIPS full papers (from books.nips.cc), Enron emails (from www.cs.cmu.edu/enron), NYTimes news articles (from ldc.upenn.edu), and PubMed abstracts (from www.pubmed.gov).These four data sets span a wide range of collection size, content, and average document length.The NYTimes and PubMed collections are relatively large, and therefore useful for demonstrating the potential benefits of FastLDA.For each collection, after tokenization and removal of stopwords, the vocabulary of unique words was truncated by only keeping words that occurred more than ten times.The size parameters for these four data sets are shown in Table 1."}, {"x": 42, "text": "While the NIPS and Enron data sets are moderately sized, and thus useful for conducting parameter studies, the NYTimes and PubMed data sets are relatively large.Running LDA on the NYTimes data set using K = 1600 topics can take more than a week on a typical high-end desktop computer, and running LDA on the PubMed data set using K = 4000 topics would take months, and would require memory well beyond typical desktop computers.Consequently, these larger data sets are ideal candidates for showing the reduction in computation time from our FastLDA method, and measuring speedup on real-life large-scale corpora."}, {"x": 44, "text": "Before describing and explaining our experiments, we point the reader to the Appendix, which lists the exact parameter specifications used to run our experiments.With the goal of repeatability, we have made our LDA and FastLDA code publicly available at http:// www.ics.uci.edu/ iporteou/ fastlda and the four data sets at the UCI Machine Learning Repository, http:// archive.ics.uci.edu/ml/ machine-learningdatabases/ bag-of-words/."}, {"x": 45, "text": "The purpose of our experiments was to measure actual reduction in execution time of FastLDA relative to LDA.Consequently, we setup a highly-controlled compute environment to perform timing tests.All speedup experiments were performed in pairs, with LDA and FastLDA being run on the same computer, compiler and environment to allow a fair comparison of execution times.Most computations were run on workstations with dual Xeon 3.0GHz processors with code compiled by gcc version 3.4 using -O3 optimization."}, {"x": 46, "text": "While equivalence of FastLDA to LDA is guaranteed by construction, we performed additional tests to verify that our implementation of FastLDA produced results identical to LDA.In the first test we verified that the implementations of LDA and FastLDA drew samples for zij from the same distribution.To do this, we kept the assignment variables zij constant, and sampled a value for, but did not update, zij .We did this for 1000 iterations and then verified that the histograms of sampled values were the same between LDA and FastLDA.In the second test, using 100 runs on the NIPS corpus, we confirmed that the perplexity for FastLDA was the same as the perplexity for LDA.This double checking affirmed that FastLDA was indeed correctly coded, and therefore timings produced by FastLDA would be valid and comparable to those produced by LDA."}, {"x": 48, "text": "For the NIPS and Enron data sets, we timed the execution of LDA and FastLDA for 500 iterations of the Gibbs sampler, i.e., 500 sweeps through the entire corpus.This number of iterations was chosen to be large enough to guarantee that burn-in had occurred, and that samples were being drawn from the posterior distribution.This number of iterations also meant that the measurement of execution time was relatively accurate.Each separate case was run twice using different random initializations to estimate variation in timings.These repeat timings of runs showed that the variation in CPU time for any given run was approximately 1%.We do not show error bars in the figures because this variation in timings was negligible."}, {"x": 49, "text": "For the NYTimes and PubMed data sets, we used a slightly different method to measure speedup, because of the considerably larger size of these data sets compared to NIPS and Enron.Instead of measuring CPU time for an entire run, we measured CPU time per iteration.To produce an accurate estimate, we estimated this per-iteration CPU time by timing 20 consecutive iterations.FastLDA was initialized with parameters from an already burned-in model for NYTimes and PubMed.The K = 2000 and K = 4000 topic models of PubMed were computed on a supercomputer using 256 processors using the parallel AD-LDA algorithm <14>."}, {"x": 50, "text": "Because of its large size, PubMed presented further challenges.Running LDA or FastLDA on PubMed with K = 2000 and K = 4000 topics requires on the order of 100- 200 GB of memory, well beyond the limit of typical workstations.Therefore, we estimated speedup on PubMed using a 250,000 document subset of the entire collection, but running LDA and FastLDA initialized with the parameters from the aforementioned burned-in model that was computed using the entire PubMed corpus of 8.2 million documents.While the measured CPU times were for a subset of PubMed, the speedup results we show hold for FastLDA running on the entire collection, since the topics used were those learned for the entire 8.2 million documents."}, {"x": 51, "text": "6.2 Experimental Setup"}, {"x": 52, "text": "For all experiments, we set Dirichlet parameter  = 0.01 (prior on word given topic) and Dirichlet parameter  = 2/K (prior on topic given document), except where noted.Setting  this way ensured that the total added probability mass was constant.These settings of Dirichlet hyperparameters are typical for those used for topic modeling these data sets, and similar to values that one may learn by sampling or optimization.We also investigated the sensitivity of speedup to the Dirichlet parameter ."}, {"x": 55, "text": "CPU time for LDA increases linearly with the number of topics K (Figure 5), an expected experimental result given the for loop over K topics in algorithm 3.1.The CPU time for FastLDA is significantly less than the CPU time for LDA for both the NIPS and Enron data sets.Furthermore, we see that FastLDA CPU time increases slower than linearly with increasing topics, indicating a greater speedup with increasing number of topics.Figure 6 shows the same results, this time displayed as speedup, i.e. the y-axis is the CPU Time for LDA divided by the CPU Time for FastLDA.For these data sets, we see speedups between 3 and 8, with speedup increasing with higher number of topics.The fraction of topics FastLDA must consider on average per sample is related to the fraction of topics used by documents on average.This in turn depends on other factors such as the latent structure of the data and the Dirichlet parameters  and .Consequently, in experiments using a reasonable number of topics the speedup of FastLDA increases as the number of topics increase."}, {"x": 56, "text": "Our summary of the speedup results for all four data sets are shown in Figure 7.Each pair of bars shows the speedup of FastLDA relative to LDA, for two different topic settings per corpus.The number of topics are: NIPS K = 400, 800, Enron K = 400, 800, NYTimes K = 800, 1600 and PubMed K = 2000, 4000, with the speedup for the larger number of topics shown in the black bar on the right of each pair.We see a range of 5 to 8 speedup for this wide variety of data sets and topic settings.On the two huge data sets, NYTimes and PubMed, FastLDA shows a consistent 5.7 to 7.5 speedup.This speedup is non-trivial for these larger computations.For example, FastLDA reduces the computation time for NYTimes from over one week to less than one day, for K = 1600 topics."}, {"x": 58, "text": "The three different curves respectively show the entire NIPS collection of D = 1500 documents, and two subcollections made up of D = 800 and D = 400 documents (where the sub-collections are made up from random sub-samples of the full 1500-document collection).The figure shows that speedup is not significantly effected by corpus size, but predominantly dependent on number of topics, as observed earlier.The choice of Dirichlet parameter  more directly affects speedup, as shown in Figure 9.This is because using a larger Dirichlet parameter smooths the distribution of topics within a document, and gives higher probability to topics that may be irrelevant to any particular document."}, {"x": 64, "text": "Topic modeling of text collections is rapidly gaining importance for a wide variety of applications including information retrieval and automatic subject indexing.Among these, Latent Dirichlet Allocation and Gibbs sampling are perhaps the most widely used model and inference algorithm.However, as the size of both the individual documents and the total corpus grows, it becomes increasingly important to be as computationally efficient as possible."}, {"x": 65, "text": "In this paper, we have described a method for increasing the speed of LDA Gibbs sampling while providing exactly equivalent samples, thus retaining all the optimality guarantees associated with the original LDA algorithm.By organizing the computations in a better way, and constructing an adaptive upper bound on the true normalization constant, we can take advantage of the sparse and predictable nature of the topic association probabilities.This ensures both rapid improvement of the adaptive bound and that high-probability topics are visited early, allowing the sampling process to stop as soon as the sample value is located."}, {"x": 66, "text": "We find that this process gives a 38 factor of improvement in speed, with this factor increasing with greater numbers of topics.These speed-ups are in addition to improvements gained through other means (such as the parallelization technique of Newman et al.<14>), and can be used in conjunction to make topic modeling of extremely large corpora practical.The general method we describe, to avoid having to consider all possibilities when sampling from a discrete distribution, should be applicable to other models as well.In particular we expect the method to work well for other varieties of topic model, such as the Hierarchical Dirichlet Process <18> and Pachinko allocation <11>, which have a sampling step similar to LDA.However, how to maintain an efficient upper bound for Z, the accuracy of the bound, and an efficientto maintain ordering in which to consider topics, remain model specific problems."}], "chapters": [{"text": "ABSTRACT", "sentence_id": "s_0", "sentence_rank": "0", "paragraph_id": "p_0", "paragraph_rank": 0}, {"text": "1.", "sentence_id": "s_9", "sentence_rank": "9", "paragraph_id": "p_2", "paragraph_rank": 2}, {"text": "2.", "sentence_id": "s_30", "sentence_rank": "30", "paragraph_id": "p_7", "paragraph_rank": 7}, {"text": "3.", "sentence_id": "s_43", "sentence_rank": "43", "paragraph_id": "p_11", "paragraph_rank": 11}, {"text": "4.", "sentence_id": "s_58", "sentence_rank": "58", "paragraph_id": "p_17", "paragraph_rank": 17}, {"text": "4.1 Upper Bounds for Z", "sentence_id": "s_92", "sentence_rank": "92", "paragraph_id": "p_22", "paragraph_rank": 22}, {"text": "4.2 Refinement Sequence", "sentence_id": "s_117", "sentence_rank": "117", "paragraph_id": "p_30", "paragraph_rank": 30}, {"text": "4.3 Fast LDA Algorithm", "sentence_id": "s_128", "sentence_rank": "128", "paragraph_id": "p_34", "paragraph_rank": 34}, {"text": "4.4 Complexity of the Algorithm", "sentence_id": "s_137", "sentence_rank": "137", "paragraph_id": "p_36", "paragraph_rank": 36}, {"text": "5.", "sentence_id": "s_151", "sentence_rank": "151", "paragraph_id": "p_40", "paragraph_rank": 40}, {"text": "6.", "sentence_id": "s_161", "sentence_rank": "161", "paragraph_id": "p_43", "paragraph_rank": 43}, {"text": "6.1 Measuring Speedup", "sentence_id": "s_175", "sentence_rank": "175", "paragraph_id": "p_47", "paragraph_rank": 47}, {"text": "6.2 Experimental Setup", "sentence_id": "s_191", "sentence_rank": "191", "paragraph_id": "p_51", "paragraph_rank": 51}, {"text": "6.3 Speedup Results", "sentence_id": "s_200", "sentence_rank": "200", "paragraph_id": "p_54", "paragraph_rank": 54}, {"text": "6.4 Choice of Bound", "sentence_id": "s_224", "sentence_rank": "224", "paragraph_id": "p_60", "paragraph_rank": 60}, {"text": "7.", "sentence_id": "s_234", "sentence_rank": "234", "paragraph_id": "p_63", "paragraph_rank": 63}], "scenes": [["Gibbs_sampling", "Central_processing_unit", "Latent_Dirichlet_allocation", "Hydroelectricity"], ["David_Blei", "Latent_Dirichlet_allocation", "Bayesian_inference", "Gibbs_sampling"], ["Web_navigation", "Latent_Dirichlet_allocation", "Gibbs_sampling"], ["Gibbs_sampling"], ["Gibbs_sampling"], ["K-d_tree", "Mixture_model"], ["Normal_distribution"], ["Latent_Dirichlet_allocation", "Gibbs_sampling"], ["Latent_Dirichlet_allocation"], ["Dirichlet_distribution", "Gibbs_sampling", "Latent_Dirichlet_allocation", "Bayesian_inference", "New_Jersey"], ["Algorithm", "Gibbs_sampling"], ["Gibbs_sampling"], ["Z-machine", "ZK_(framework)"], ["ZK_(framework)"], ["Z-machine", "Latent_Dirichlet_allocation", "ZK_(framework)"], ["Upper_and_lower_bounds"], ["Z-machine", "ZK_(framework)"], ["Run_time_(program_lifecycle_phase)"], ["Latent_Dirichlet_allocation"], ["Computational_complexity_theory"], ["Data"], ["The_New_York_Times", "PubMed", "Latent_Dirichlet_allocation", "Foreach_loop"], ["The_New_York_Times", "PubMed", "Latent_Dirichlet_allocation"], ["Machine_learning", "University_of_California,_Irvine", "Latent_Dirichlet_allocation"], ["Xeon", "Latent_Dirichlet_allocation"], ["Latent_Dirichlet_allocation"], ["Gibbs_sampling", "Central_processing_unit", "Latent_Dirichlet_allocation", "Enron"], ["The_New_York_Times", "Linear_discriminant_analysis", "PubMed", "Central_processing_unit", "Enron"], ["United_Kingdom", "PubMed", "Latent_Dirichlet_allocation", "Central_processing_unit"], ["Experiment"], ["Dirichlet_distribution"], ["Dirichlet_distribution", "Central_processing_unit", "Latent_Dirichlet_allocation", "Time_(magazine)", "Enron"], ["The_New_York_Times", "PubMed", "Latent_Dirichlet_allocation", "Enron"], ["Dirichlet_distribution"], ["Latent_Dirichlet_allocation", "Gibbs_sampling"], ["Linear_discriminant_analysis", "Latent_Dirichlet_allocation", "Gibbs_sampling"], ["Hierarchical_Dirichlet_process", "Pachinko_allocation"]], "characters": [{"name": "ZK", "offsets": [9930, 9955, 10479, 11070, 11545], "paragraph_occurrences": [19, 19, 20, 21, 23], "sentence_occurrences": [68, 70, 79, 87, 95], "affiliation": "light", "frequency": 5, "id": "ZK_(framework)"}, {"name": "New Jersey", "offsets": [7050], "paragraph_occurrences": [13], "sentence_occurrences": [47], "affiliation": "light", "frequency": 1, "id": "New_Jersey"}, {"name": "Experimentalist", "offsets": [23009], "paragraph_occurrences": [51], "sentence_occurrences": [191], "affiliation": "light", "frequency": 1, "id": "Experiment"}, {"name": "Mixture model", "offsets": [5224], "paragraph_occurrences": [8], "sentence_occurrences": [33], "affiliation": "light", "frequency": 1, "id": "Mixture_model"}, {"name": "Hierarchical Dirichlet process", "offsets": [29657], "paragraph_occurrences": [66], "sentence_occurrences": [246], "affiliation": "light", "frequency": 1, "id": "Hierarchical_Dirichlet_process"}, {"name": "David M. Blei", "offsets": [1620], "paragraph_occurrences": [3], "sentence_occurrences": [13], "affiliation": "light", "frequency": 1, "id": "David_Blei"}, {"name": "Pachinko allocation", "offsets": [29697], "paragraph_occurrences": [66], "sentence_occurrences": [246], "affiliation": "light", "frequency": 1, "id": "Pachinko_allocation"}, {"name": "Web navigation", "offsets": [2939], "paragraph_occurrences": [4], "sentence_occurrences": [19], "affiliation": "light", "frequency": 1, "id": "Web_navigation"}, {"name": "Dirichlet distribution", "offsets": [7247, 23055, 23115, 23289, 23502, 24826, 26397, 26501], "paragraph_occurrences": [13, 52, 52, 52, 52, 55, 58, 58], "sentence_occurrences": [47, 192, 192, 194, 195, 207, 220, 221], "affiliation": "light", "frequency": 8, "id": "Dirichlet_distribution"}, {"name": "Z-machine", "offsets": [9924, 9944, 11064, 11534, 9948, 11538], "paragraph_occurrences": [19, 19, 21, 23, 19, 23], "sentence_occurrences": [66, 68, 85, 93, 68, 93], "affiliation": "light", "frequency": 6, "id": "Z-machine"}, {"name": "Upper and lower bounds", "offsets": [11427], "paragraph_occurrences": [22], "sentence_occurrences": [92], "affiliation": "light", "frequency": 1, "id": "Upper_and_lower_bounds"}, {"name": "Time", "offsets": [24450, 24482], "paragraph_occurrences": [55, 55], "sentence_occurrences": [204, 204], "affiliation": "light", "frequency": 2, "id": "Time_(magazine)"}, {"name": "Data", "offsets": [17827], "paragraph_occurrences": [40], "sentence_occurrences": [151], "affiliation": "light", "frequency": 1, "id": "Data"}, {"name": "Latent Dirichlet allocation", "offsets": [95, 1001, 124, 249, 922, 1030, 1256, 1650, 2167, 2457, 2623, 2794, 6337, 6707, 6939, 6953, 11239, 15107, 17867, 18701, 18829, 19368, 19839, 20127, 20329, 20612, 21016, 22363, 22628, 23943, 24157, 24459, 25123, 28477, 28134], "paragraph_occurrences": [1, 3, 1, 1, 1, 3, 3, 3, 4, 4, 4, 4, 10, 10, 12, 13, 21, 34, 41, 42, 42, 44, 45, 46, 46, 46, 48, 50, 50, 55, 55, 55, 56, 65, 64], "sentence_occurrences": [1, 11, 1, 3, 8, 11, 12, 14, 17, 18, 18, 19, 40, 42, 46, 47, 91, 128, 153, 159, 159, 164, 167, 169, 170, 172, 176, 188, 189, 201, 202, 204, 210, 239, 237], "affiliation": "light", "frequency": 35, "id": "Latent_Dirichlet_allocation"}, {"name": "Enron", "offsets": [20973, 21853, 24183, 25217], "paragraph_occurrences": [48, 49, 55, 56], "sentence_occurrences": [176, 182, 202, 211], "affiliation": "light", "frequency": 4, "id": "Enron"}, {"name": "Linear discriminant analysis", "offsets": [22273, 28614], "paragraph_occurrences": [49, 65], "sentence_occurrences": [186, 239], "affiliation": "light", "frequency": 2, "id": "Linear_discriminant_analysis"}, {"name": "University of California, Irvine", "offsets": [19484], "paragraph_occurrences": [44], "sentence_occurrences": [164], "affiliation": "light", "frequency": 1, "id": "University_of_California,_Irvine"}, {"name": "Algorithm", "offsets": [8653], "paragraph_occurrences": [15], "sentence_occurrences": [54], "affiliation": "light", "frequency": 1, "id": "Algorithm"}, {"name": "Foreach loop", "offsets": [18299], "paragraph_occurrences": [41], "sentence_occurrences": [155], "affiliation": "light", "frequency": 1, "id": "Foreach_loop"}, {"name": "Computational complexity theory", "offsets": [15983], "paragraph_occurrences": [36], "sentence_occurrences": [137], "affiliation": "light", "frequency": 1, "id": "Computational_complexity_theory"}, {"name": "The New York Times", "offsets": [17986, 18173, 18643, 18712, 21687, 22129, 25237, 25498, 25676], "paragraph_occurrences": [41, 41, 42, 42, 49, 49, 56, 56, 56], "sentence_occurrences": [153, 155, 158, 159, 182, 185, 211, 213, 215], "affiliation": "light", "frequency": 9, "id": "The_New_York_Times"}, {"name": "Xeon", "offsets": [20011], "paragraph_occurrences": [45], "sentence_occurrences": [168], "affiliation": "light", "frequency": 1, "id": "Xeon"}, {"name": "PubMed", "offsets": [18034, 18185, 18655, 18840, 21699, 22141, 22190, 22319, 22381, 22551, 22751, 22840, 25263, 25510], "paragraph_occurrences": [41, 41, 42, 42, 49, 49, 49, 50, 50, 50, 50, 50, 56, 56], "sentence_occurrences": [153, 155, 158, 159, 182, 185, 186, 187, 188, 189, 189, 190, 211, 213], "affiliation": "light", "frequency": 14, "id": "PubMed"}, {"name": "Hydroelectricity", "offsets": [209], "paragraph_occurrences": [1], "sentence_occurrences": [2], "affiliation": "light", "frequency": 1, "id": "Hydroelectricity"}, {"name": "Bayesian inference", "offsets": [1677, 7492], "paragraph_occurrences": [3, 13], "sentence_occurrences": [14, 49], "affiliation": "light", "frequency": 2, "id": "Bayesian_inference"}, {"name": "k-d tree", "offsets": [5347], "paragraph_occurrences": [8], "sentence_occurrences": [34], "affiliation": "light", "frequency": 1, "id": "K-d_tree"}, {"name": "United Kingdom", "offsets": [22456], "paragraph_occurrences": [50], "sentence_occurrences": [188], "affiliation": "light", "frequency": 1, "id": "United_Kingdom"}, {"name": "Central processing unit", "offsets": [907, 957, 21541, 21880, 21920, 22008, 22809, 24092, 24144, 24232, 24446, 24478], "paragraph_occurrences": [1, 1, 48, 49, 49, 49, 50, 55, 55, 55, 55, 55], "sentence_occurrences": [8, 8, 180, 183, 183, 184, 190, 202, 202, 203, 204, 204], "affiliation": "light", "frequency": 12, "id": "Central_processing_unit"}, {"name": "Run time", "offsets": [13733], "paragraph_occurrences": [31], "sentence_occurrences": [118], "affiliation": "light", "frequency": 1, "id": "Run_time_(program_lifecycle_phase)"}, {"name": "Normal distribution", "offsets": [6001, 6265], "paragraph_occurrences": [9, 9], "sentence_occurrences": [38, 39], "affiliation": "light", "frequency": 2, "id": "Normal_distribution"}, {"name": "Machine learning", "offsets": [19488], "paragraph_occurrences": [44], "sentence_occurrences": [164], "affiliation": "light", "frequency": 1, "id": "Machine_learning"}, {"name": "Gibbs sampling", "offsets": [53, 222, 1856, 1896, 2014, 2314, 3265, 4848, 6721, 7690, 8399, 8776, 540, 3426, 8925, 3803, 21058, 28166, 28481], "paragraph_occurrences": [1, 1, 3, 3, 3, 4, 5, 6, 10, 13, 15, 15, 1, 5, 18, 5, 48, 64, 65], "sentence_occurrences": [1, 3, 15, 16, 16, 17, 21, 29, 42, 50, 54, 56, 5, 21, 60, 23, 176, 237, 239], "affiliation": "light", "frequency": 19, "id": "Gibbs_sampling"}], "all_paragraphs": [{"paragraph_info": {"end": 8, "start": 0, "text": "ABSTRACT", "rank": 0, "paragraph_comparative_number": 1, "entities": [], "id": "p_0"}, "sentences": [{"end": 8, "text": "ABSTRACT", "rank": 0, "start": 0, "IsComparative": "1", "id": "st_0"}]}, {"paragraph_info": {"end": 983, "start": 8, "text": "In this paper we introduce a novel collapsed Gibbs sampling method for the widely used latent Dirichlet allocation (LDA) model.Our new method results in significant speedups on real world text corpora.Conventional Gibbs sampling schemes for LDA require O(K) operations per sample where K is the number of topics in the model.Our proposed method draws equivalent samples but requires on average significantly less then K operations per sample.On real-word corpora FastLDA can be as much as 8 times faster than the standard collapsed Gibbs sampler for LDA.No approximations are necessary, and we show that our fast sampling scheme produces exactly the same results as the standard (but slower) sampling scheme.Experiments on four real world data sets demonstrate speedups for a wide range of collection sizes.For the PubMed collection of over 8 million documents with a required computation time of 6 CPU months for LDA, our speedup of 5.7 can save 5 CPU months of computation.", "rank": 1, "paragraph_comparative_number": 5, "entities": [], "id": "p_1"}, "sentences": [{"end": 135, "text": "In this paper we introduce a novel collapsed Gibbs sampling method for the widely used latent Dirichlet allocation (LDA) model.", "rank": 1, "start": 8, "IsComparative": "0", "id": "st_1"}, {"end": 209, "text": "Our new method results in significant speedups on real world text corpora.", "rank": 2, "start": 135, "IsComparative": "1", "id": "st_2"}, {"end": 333, "text": "Conventional Gibbs sampling schemes for LDA require O(K) operations per sample where K is the number of topics in the model.", "rank": 3, "start": 209, "IsComparative": "0", "id": "st_3"}, {"end": 450, "text": "Our proposed method draws equivalent samples but requires on average significantly less then K operations per sample.", "rank": 4, "start": 333, "IsComparative": "1", "id": "st_4"}, {"end": 562, "text": "On real-word corpora FastLDA can be as much as 8 times faster than the standard collapsed Gibbs sampler for LDA.", "rank": 5, "start": 450, "IsComparative": "1", "id": "st_5"}, {"end": 716, "text": "No approximations are necessary, and we show that our fast sampling scheme produces exactly the same results as the standard (but slower) sampling scheme.", "rank": 6, "start": 562, "IsComparative": "0", "id": "st_6"}, {"end": 815, "text": "Experiments on four real world data sets demonstrate speedups for a wide range of collection sizes.", "rank": 7, "start": 716, "IsComparative": "1", "id": "st_7"}, {"end": 983, "text": "For the PubMed collection of over 8 million documents with a required computation time of 6 CPU months for LDA, our speedup of 5.7 can save 5 CPU months of computation.", "rank": 8, "start": 815, "IsComparative": "1", "id": "st_8"}]}, {"paragraph_info": {"end": 997, "start": 983, "text": "1.INTRODUCTION", "rank": 2, "paragraph_comparative_number": 2, "entities": [], "id": "p_2"}, "sentences": [{"end": 985, "text": "1.", "rank": 9, "start": 983, "IsComparative": "1", "id": "st_9"}, {"end": 997, "text": "INTRODUCTION", "rank": 10, "start": 985, "IsComparative": "1", "id": "st_10"}]}, {"paragraph_info": {"end": 2128, "start": 997, "text": "The latent Dirichlet allocation (LDA) model (or topic model) is a general probabilistic framework for modeling sparse vectors of count data, such as bags of words for text, bags of features for images, or ratings of items by customers.The key idea behind the LDA model (for text data for example) is to assume that the words in each document were generated by a mixture of topics, where a topic is represented as a multinomial probability distribution over words.The mixing coefficients for each document and the wordtopic distributions are unobserved (hidden) and are learned from data using unsupervised learning methods.Blei et al <3> introduced the LDA model within a general Bayesian framework and developed a variational algorithm for learning the model from data.Griffiths and Steyvers <6> subsequently proposed a learning algorithm based on collapsed Gibbs sampling.Both the variational and Gibbs sampling approaches have their advantages: the variational approach is arguably faster computationally, but the Gibbs sampling approach is in principal more accurate since it asymptotically approaches the correct distribution.", "rank": 3, "paragraph_comparative_number": 5, "entities": [], "id": "p_3"}, "sentences": [{"end": 1232, "text": "The latent Dirichlet allocation (LDA) model (or topic model) is a general probabilistic framework for modeling sparse vectors of count data, such as bags of words for text, bags of features for images, or ratings of items by customers.", "rank": 11, "start": 997, "IsComparative": "1", "id": "st_11"}, {"end": 1460, "text": "The key idea behind the LDA model (for text data for example) is to assume that the words in each document were generated by a mixture of topics, where a topic is represented as a multinomial probability distribution over words.", "rank": 12, "start": 1232, "IsComparative": "1", "id": "st_12"}, {"end": 1620, "text": "The mixing coefficients for each document and the wordtopic distributions are unobserved (hidden) and are learned from data using unsupervised learning methods.", "rank": 13, "start": 1460, "IsComparative": "0", "id": "st_13"}, {"end": 1767, "text": "Blei et al <3> introduced the LDA model within a general Bayesian framework and developed a variational algorithm for learning the model from data.", "rank": 14, "start": 1620, "IsComparative": "1", "id": "st_14"}, {"end": 1871, "text": "Griffiths and Steyvers <6> subsequently proposed a learning algorithm based on collapsed Gibbs sampling.", "rank": 15, "start": 1767, "IsComparative": "1", "id": "st_15"}, {"end": 2128, "text": "Both the variational and Gibbs sampling approaches have their advantages: the variational approach is arguably faster computationally, but the Gibbs sampling approach is in principal more accurate since it asymptotically approaches the correct distribution.", "rank": 16, "start": 1871, "IsComparative": "1", "id": "st_16"}]}, {"paragraph_info": {"end": 2952, "start": 2128, "text": "Since the original introduction of the LDA model, the technique has been broadly applied in machine learning and data mining, particularly in text analysis and computer vision, with the Gibbs sampling algorithm in common use.For example, Wei and Croft <19> and Chemudugunta, Smyth, and Steyvers <5> have successfully applied the LDA model to information retrieval and shown that it can significantly outperform  in terms of precision-recall  alternative methods such as latent semantic analysis.LDA models have also been increasingly applied to problems involving very large text corpora: Buntine <4>, Mimno and McCallum <12> and Newman et al <15> have all used the LDA model to automatically generate topic models for millions of documents and used these models as the basis for automated indexing and faceted Web browsing.", "rank": 4, "paragraph_comparative_number": 1, "entities": [], "id": "p_4"}, "sentences": [{"end": 2353, "text": "Since the original introduction of the LDA model, the technique has been broadly applied in machine learning and data mining, particularly in text analysis and computer vision, with the Gibbs sampling algorithm in common use.", "rank": 17, "start": 2128, "IsComparative": "0", "id": "st_17"}, {"end": 2623, "text": "For example, Wei and Croft <19> and Chemudugunta, Smyth, and Steyvers <5> have successfully applied the LDA model to information retrieval and shown that it can significantly outperform  in terms of precision-recall  alternative methods such as latent semantic analysis.", "rank": 18, "start": 2353, "IsComparative": "0", "id": "st_18"}, {"end": 2952, "text": "LDA models have also been increasingly applied to problems involving very large text corpora: Buntine <4>, Mimno and McCallum <12> and Newman et al <15> have all used the LDA model to automatically generate topic models for millions of documents and used these models as the basis for automated indexing and faceted Web browsing.", "rank": 19, "start": 2623, "IsComparative": "1", "id": "st_19"}]}, {"paragraph_info": {"end": 4003, "start": 2952, "text": "In this general context there is significant motivation to speed-up the learning of topic models, both to reduce the time taken to learn topic models for very large text collections, as well as moving towards real-time topic modeling (e.g., for a few thousand documents returned by a search engine).The collapsed Gibbs sampling algorithm of Griffiths and Steyvers involves repeatedly sampling a topic assign ment for each word in the corpus, where a single iteration of the Gibbs sampler consists of sampling a topic for each word.Each sampled topic assignment is generated from a conditional multinomial distribution over the K topics, which in turn requires the computation of K conditional probabilities.As an example, consider learning a topic model with one million documents, each with 1000 words on average, K = 1000 topics, and performing 500 Gibbs iterations (a typical number in practice).This would require generating a total of 51011 word-topic assignments via sampling, where each sampling operation itself involves K = 1000 computations.", "rank": 5, "paragraph_comparative_number": 4, "entities": [], "id": "p_5"}, "sentences": [{"end": 3251, "text": "In this general context there is significant motivation to speed-up the learning of topic models, both to reduce the time taken to learn topic models for very large text collections, as well as moving towards real-time topic modeling (e.g., for a few thousand documents returned by a search engine).", "rank": 20, "start": 2952, "IsComparative": "1", "id": "st_20"}, {"end": 3483, "text": "The collapsed Gibbs sampling algorithm of Griffiths and Steyvers involves repeatedly sampling a topic assign ment for each word in the corpus, where a single iteration of the Gibbs sampler consists of sampling a topic for each word.", "rank": 21, "start": 3251, "IsComparative": "0", "id": "st_21"}, {"end": 3659, "text": "Each sampled topic assignment is generated from a conditional multinomial distribution over the K topics, which in turn requires the computation of K conditional probabilities.", "rank": 22, "start": 3483, "IsComparative": "1", "id": "st_22"}, {"end": 3851, "text": "As an example, consider learning a topic model with one million documents, each with 1000 words on average, K = 1000 topics, and performing 500 Gibbs iterations (a typical number in practice).", "rank": 23, "start": 3659, "IsComparative": "1", "id": "st_23"}, {"end": 4003, "text": "This would require generating a total of 51011 word-topic assignments via sampling, where each sampling operation itself involves K = 1000 computations.", "rank": 24, "start": 3851, "IsComparative": "1", "id": "st_24"}]}, {"paragraph_info": {"end": 4873, "start": 4003, "text": "The key idea of our paper is to reduce the time taken for the inner-loop sampling operation, reducing it from K to significantly less then K on average; we observe speedups up to a factor of 8 in our experiments.Furthermore, the speedup usually increases as K increases.In our proposed approach we exploit the fact that, for any particular word and document, the sampling distributions of interest are frequently skewed such that most of the probability mass is concentrated on a small fraction of the total number of topics K.This allows us to order the sampling operations such that on average only a fraction of the K topic probabilities need to be calculated.Our proposed algorithm is exact, i.e., no approximation is made and the fast algorithm correctly and exactly samples from the same true posterior distribution as the slower standard Gibbs sampling algorithm.", "rank": 6, "paragraph_comparative_number": 3, "entities": [], "id": "p_6"}, "sentences": [{"end": 4215, "text": "The key idea of our paper is to reduce the time taken for the inner-loop sampling operation, reducing it from K to significantly less then K on average; we observe speedups up to a factor of 8 in our experiments.", "rank": 25, "start": 4003, "IsComparative": "1", "id": "st_25"}, {"end": 4273, "text": "Furthermore, the speedup usually increases as K increases.", "rank": 26, "start": 4215, "IsComparative": "0", "id": "st_26"}, {"end": 4530, "text": "In our proposed approach we exploit the fact that, for any particular word and document, the sampling distributions of interest are frequently skewed such that most of the probability mass is concentrated on a small fraction of the total number of topics K.", "rank": 27, "start": 4273, "IsComparative": "0", "id": "st_27"}, {"end": 4666, "text": "This allows us to order the sampling operations such that on average only a fraction of the K topic probabilities need to be calculated.", "rank": 28, "start": 4530, "IsComparative": "1", "id": "st_28"}, {"end": 4873, "text": "Our proposed algorithm is exact, i.e., no approximation is made and the fast algorithm correctly and exactly samples from the same true posterior distribution as the slower standard Gibbs sampling algorithm.", "rank": 29, "start": 4666, "IsComparative": "1", "id": "st_29"}]}, {"paragraph_info": {"end": 4886, "start": 4873, "text": "2.RELATEDWORK", "rank": 7, "paragraph_comparative_number": 2, "entities": [], "id": "p_7"}, "sentences": [{"end": 4875, "text": "2.", "rank": 30, "start": 4873, "IsComparative": "1", "id": "st_30"}, {"end": 4886, "text": "RELATEDWORK", "rank": 31, "start": 4875, "IsComparative": "1", "id": "st_31"}]}, {"paragraph_info": {"end": 5753, "start": 4886, "text": "The problem of rapidly evaluating or approximating probabilities and drawing samples arises in a great many domains.However, most existing solutions are characterized by the data being embedded in a metric space, so that geometric relationships can be exploited to rapidly evaluate the total probability of large sets of potential states.Mixture modeling problems provide a typical example: a data structure which clusters data by spatial similarity, such as a KD-tree <2>, stores statistics of the data in a hierarchical fashion and uses these statistics to compute upper and lower bounds on the association probabilities for any data within those sets.Using these bounds, one may determine whether the current estimates are sufficiently accurate, or whether they need to be improved by refining the clusters further (moving to the next level of the data structure).", "rank": 8, "paragraph_comparative_number": 0, "entities": [], "id": "p_8"}, "sentences": [{"end": 5002, "text": "The problem of rapidly evaluating or approximating probabilities and drawing samples arises in a great many domains.", "rank": 32, "start": 4886, "IsComparative": "0", "id": "st_32"}, {"end": 5224, "text": "However, most existing solutions are characterized by the data being embedded in a metric space, so that geometric relationships can be exploited to rapidly evaluate the total probability of large sets of potential states.", "rank": 33, "start": 5002, "IsComparative": "0", "id": "st_33"}, {"end": 5540, "text": "Mixture modeling problems provide a typical example: a data structure which clusters data by spatial similarity, such as a KD-tree <2>, stores statistics of the data in a hierarchical fashion and uses these statistics to compute upper and lower bounds on the association probabilities for any data within those sets.", "rank": 34, "start": 5224, "IsComparative": "0", "id": "st_34"}, {"end": 5753, "text": "Using these bounds, one may determine whether the current estimates are sufficiently accurate, or whether they need to be improved by refining the clusters further (moving to the next level of the data structure).", "rank": 35, "start": 5540, "IsComparative": "0", "id": "st_35"}]}, {"paragraph_info": {"end": 6296, "start": 5753, "text": "Accelerated algorithms of this type exist for many common probabilistic models.In some cases, such as k-means, it is possible to accelerate the computation of an exact solution <1, 16, 17>.For other algorithms, such as expectation maximization for Gaussian mixtures, the evaluations are only approximate but can be controlled by tuning a quality parameter <13, 10, 9>.In <8>, a similar branch-and-bound method is used to compute approximate probabilities and draw approximate samples from the product of several Gaussian mixture distributions.", "rank": 9, "paragraph_comparative_number": 2, "entities": [], "id": "p_9"}, "sentences": [{"end": 5832, "text": "Accelerated algorithms of this type exist for many common probabilistic models.", "rank": 36, "start": 5753, "IsComparative": "0", "id": "st_36"}, {"end": 5942, "text": "In some cases, such as k-means, it is possible to accelerate the computation of an exact solution <1, 16, 17>.", "rank": 37, "start": 5832, "IsComparative": "1", "id": "st_37"}, {"end": 6121, "text": "For other algorithms, such as expectation maximization for Gaussian mixtures, the evaluations are only approximate but can be controlled by tuning a quality parameter <13, 10, 9>.", "rank": 38, "start": 5942, "IsComparative": "0", "id": "st_38"}, {"end": 6296, "text": "In <8>, a similar branch-and-bound method is used to compute approximate probabilities and draw approximate samples from the product of several Gaussian mixture distributions.", "rank": 39, "start": 6121, "IsComparative": "1", "id": "st_39"}]}, {"paragraph_info": {"end": 6736, "start": 6296, "text": "Unfortunately, the categorical nature of LDA makes it difficult to apply any of these techniques directly.Instead, although we apply a similar bound and refine procedure, both the bound and the sequence of refinement operations must be matched to the expected behavior of the data in topic modeling.We describe the details of this bound along with our algorithm in Section 4, after first reviewing the standard LDA model and Gibbs sampling.", "rank": 10, "paragraph_comparative_number": 3, "entities": [], "id": "p_10"}, "sentences": [{"end": 6402, "text": "Unfortunately, the categorical nature of LDA makes it difficult to apply any of these techniques directly.", "rank": 40, "start": 6296, "IsComparative": "1", "id": "st_40"}, {"end": 6595, "text": "Instead, although we apply a similar bound and refine procedure, both the bound and the sequence of refinement operations must be matched to the expected behavior of the data in topic modeling.", "rank": 41, "start": 6402, "IsComparative": "1", "id": "st_41"}, {"end": 6736, "text": "We describe the details of this bound along with our algorithm in Section 4, after first reviewing the standard LDA model and Gibbs sampling.", "rank": 42, "start": 6595, "IsComparative": "1", "id": "st_42"}]}, {"paragraph_info": {"end": 6741, "start": 6736, "text": "3.LDA", "rank": 11, "paragraph_comparative_number": 2, "entities": [], "id": "p_11"}, "sentences": [{"end": 6738, "text": "3.", "rank": 43, "start": 6736, "IsComparative": "1", "id": "st_43"}, {"end": 6741, "text": "LDA", "rank": 44, "start": 6738, "IsComparative": "1", "id": "st_44"}]}, {"paragraph_info": {"end": 6949, "start": 6741, "text": "LDA models each of D documents as a mixture over K latent topics, each of which describes a multinomial distribution over aW word vocabulary.Figure 1 shows the graphical model representation of the LDA model.", "rank": 12, "paragraph_comparative_number": 1, "entities": [], "id": "p_12"}, "sentences": [{"end": 6882, "text": "LDA models each of D documents as a mixture over K latent topics, each of which describes a multinomial distribution over aW word vocabulary.", "rank": 45, "start": 6741, "IsComparative": "1", "id": "st_45"}, {"end": 6949, "text": "Figure 1 shows the graphical model representation of the LDA model.", "rank": 46, "start": 6882, "IsComparative": "0", "id": "st_46"}]}, {"paragraph_info": {"end": 7866, "start": 6949, "text": "The LDA model is equivalent to the following generative process for words and documents: For each of Nj words in document j 1. sample a topic zij  Multinomial(j) 2. sample a word xij  Multinomial(zij ) where the parameters of the multinomials for topics in a document j and words in a topic k have Dirichlet priors.Intuitively we can interpret the multinomial parameter k as indicating which words are important in topic k and the parameter j as indicating which topics appear in document j <6>.Given the observed words x = <xij>, the task of Bayesian inference is to compute the posterior distribution over the latent topic indices z = <zij>, the mixing proportions j , and the topics k.An efficient inference procedure is to use collapsed Gibbs sampling <6>, where  and  are marginalized out, and only the latent variables z are sampled.After the sampler has burned-in we can calculate an estimate of  and  given z.", "rank": 13, "paragraph_comparative_number": 2, "entities": [], "id": "p_13"}, "sentences": [{"end": 7264, "text": "The LDA model is equivalent to the following generative process for words and documents: For each of Nj words in document j 1. sample a topic zij  Multinomial(j) 2. sample a word xij  Multinomial(zij ) where the parameters of the multinomials for topics in a document j and words in a topic k have Dirichlet priors.", "rank": 47, "start": 6949, "IsComparative": "0", "id": "st_47"}, {"end": 7444, "text": "Intuitively we can interpret the multinomial parameter k as indicating which words are important in topic k and the parameter j as indicating which topics appear in document j <6>.", "rank": 48, "start": 7264, "IsComparative": "0", "id": "st_48"}, {"end": 7637, "text": "Given the observed words x = <xij>, the task of Bayesian inference is to compute the posterior distribution over the latent topic indices z = <zij>, the mixing proportions j , and the topics k.", "rank": 49, "start": 7444, "IsComparative": "1", "id": "st_49"}, {"end": 7788, "text": "An efficient inference procedure is to use collapsed Gibbs sampling <6>, where  and  are marginalized out, and only the latent variables z are sampled.", "rank": 50, "start": 7637, "IsComparative": "1", "id": "st_50"}, {"end": 7866, "text": "After the sampler has burned-in we can calculate an estimate of  and  given z.", "rank": 51, "start": 7788, "IsComparative": "0", "id": "st_51"}]}, {"paragraph_info": {"end": 8035, "start": 7866, "text": "We define summations of the data by Nwkj = #<i : xij = w, zij = k>, and use the convention that missing indices are summed out, so that Nkj = Pw Nwkj and Nwk = Pj Nwkj .", "rank": 14, "paragraph_comparative_number": 0, "entities": [], "id": "p_14"}, "sentences": [{"end": 8035, "text": "We define summations of the data by Nwkj = #<i : xij = w, zij = k>, and use the convention that missing indices are summed out, so that Nkj = Pw Nwkj and Nwk = Pj Nwkj .", "rank": 52, "start": 7866, "IsComparative": "0", "id": "st_52"}]}, {"paragraph_info": {"end": 8805, "start": 8035, "text": "In words, Nwk is the number of times the word w is assigned to the topic k and Nkj is the number of times a word in document j has been assigned to topic k.Given the current state of all but one variable zij , the conditional probability and the superscript ij indicates that the corresponding datum has been excluded in the count summations Nwkj .An iteration of Gibbs sampling proceeds by drawing a sample for zij according to (1) for each word i in each document j. A sample is typically accomplished by first calculating the normalization constant Z, then sampling zij according to its normalized probability; see Algorithm 3.1.Given the value sampled for zij the counts Nkj ,Nk,Nwk are updated.The time complexity for each iteration of Gibbs sampling is then O(NK).", "rank": 15, "paragraph_comparative_number": 1, "entities": [], "id": "p_15"}, "sentences": [{"end": 8191, "text": "In words, Nwk is the number of times the word w is assigned to the topic k and Nkj is the number of times a word in document j has been assigned to topic k.", "rank": 53, "start": 8035, "IsComparative": "0", "id": "st_53"}, {"end": 8667, "text": "Given the current state of all but one variable zij , the conditional probability and the superscript ij indicates that the corresponding datum has been excluded in the count summations Nwkj .An iteration of Gibbs sampling proceeds by drawing a sample for zij according to (1) for each word i in each document j. A sample is typically accomplished by first calculating the normalization constant Z, then sampling zij according to its normalized probability; see Algorithm 3.1.", "rank": 54, "start": 8191, "IsComparative": "1", "id": "st_54"}, {"end": 8734, "text": "Given the value sampled for zij the counts Nkj ,Nk,Nwk are updated.", "rank": 55, "start": 8667, "IsComparative": "0", "id": "st_55"}, {"end": 8805, "text": "The time complexity for each iteration of Gibbs sampling is then O(NK).", "rank": 56, "start": 8734, "IsComparative": "0", "id": "st_56"}]}, {"paragraph_info": {"end": 8859, "start": 8805, "text": "Given a sample we can then get an estimate for j and k", "rank": 16, "paragraph_comparative_number": 0, "entities": [], "id": "p_16"}, "sentences": [{"end": 8859, "text": "Given a sample we can then get an estimate for j and k", "rank": 57, "start": 8805, "IsComparative": "0", "id": "st_57"}]}, {"paragraph_info": {"end": 8869, "start": 8859, "text": "4.FAST LDA", "rank": 17, "paragraph_comparative_number": 1, "entities": [], "id": "p_17"}, "sentences": [{"end": 8861, "text": "4.", "rank": 58, "start": 8859, "IsComparative": "1", "id": "st_58"}, {"end": 8869, "text": "FAST LDA", "rank": 59, "start": 8861, "IsComparative": "0", "id": "st_59"}]}, {"paragraph_info": {"end": 9822, "start": 8869, "text": "For most real data sets after several iterations of the Gibbs sampler, the probability mass of the distribution p(zij = k|zij , x, , ) becomes concentrated on only a small set of the topics as in Figure 4.FastLDA takes advantage of this concentration of probability mass by only checking a subset of topics before drawing a correct sample.After calculating the unnormalized probability in (1) of a subset of topics, FastLDA determines that the sampled value does not depend on the probability of the remaining topics.To describe how FastLDA works, it is useful to introduce a graphical depiction of how a sample for zij is conventionally drawn.We begin by segmenting a line of unit length into K sections, with the kth section having length equal to p(zij = k|zij , x, , ).We then draw a sample for zij by drawing a value uniformly from the interval, u  Uniform<0,1>, and selecting the value of zij based on the segment into which u falls; see Figure 2.", "rank": 18, "paragraph_comparative_number": 4, "entities": [], "id": "p_18"}, "sentences": [{"end": 9074, "text": "For most real data sets after several iterations of the Gibbs sampler, the probability mass of the distribution p(zij = k|zij , x, , ) becomes concentrated on only a small set of the topics as in Figure 4.", "rank": 60, "start": 8869, "IsComparative": "0", "id": "st_60"}, {"end": 9208, "text": "FastLDA takes advantage of this concentration of probability mass by only checking a subset of topics before drawing a correct sample.", "rank": 61, "start": 9074, "IsComparative": "0", "id": "st_61"}, {"end": 9386, "text": "After calculating the unnormalized probability in (1) of a subset of topics, FastLDA determines that the sampled value does not depend on the probability of the remaining topics.", "rank": 62, "start": 9208, "IsComparative": "1", "id": "st_62"}, {"end": 9513, "text": "To describe how FastLDA works, it is useful to introduce a graphical depiction of how a sample for zij is conventionally drawn.", "rank": 63, "start": 9386, "IsComparative": "1", "id": "st_63"}, {"end": 9642, "text": "We begin by segmenting a line of unit length into K sections, with the kth section having length equal to p(zij = k|zij , x, , ).", "rank": 64, "start": 9513, "IsComparative": "1", "id": "st_64"}, {"end": 9822, "text": "We then draw a sample for zij by drawing a value uniformly from the interval, u  Uniform<0,1>, and selecting the value of zij based on the segment into which u falls; see Figure 2.", "rank": 65, "start": 9642, "IsComparative": "1", "id": "st_65"}]}, {"paragraph_info": {"end": 10457, "start": 9822, "text": "As an alternative, suppose that we have a sequence of bounds on the normalization constant Z, denoted Z1 ...ZK, such that Z1  Z2  ...ZK = Z.Then, we can graphically depict the sampling procedure for FastLDA in a similar way, seen in Figure 3.Instead of having a single segment for topic k, of length pk/Z = p(zij = k|zij , x, , ), we instead have several segments sk l ...sk K associated with each topic.The first segment for a topic k, sk k, describes a conservative estimate of the probability of the topic given the upper bound Zk on the true normalization factor Z.Each of the subsequent segments associated with topic k, namely sk", "rank": 19, "paragraph_comparative_number": 1, "entities": [], "id": "p_19"}, "sentences": [{"end": 9928, "text": "As an alternative, suppose that we have a sequence of bounds on the normalization constant Z, denoted Z1 .", "rank": 66, "start": 9822, "IsComparative": "0", "id": "st_66"}, {"end": 9929, "text": ".", "rank": 67, "start": 9928, "IsComparative": "0", "id": "st_67"}, {"end": 9953, "text": ".ZK, such that Z1  Z2  .", "rank": 68, "start": 9929, "IsComparative": "0", "id": "st_68"}, {"end": 9954, "text": ".", "rank": 69, "start": 9953, "IsComparative": "0", "id": "st_69"}, {"end": 9955, "text": ".", "rank": 70, "start": 9954, "IsComparative": "0", "id": "st_70"}, {"end": 9962, "text": "ZK = Z.", "rank": 71, "start": 9955, "IsComparative": "0", "id": "st_71"}, {"end": 10064, "text": "Then, we can graphically depict the sampling procedure for FastLDA in a similar way, seen in Figure 3.", "rank": 72, "start": 9962, "IsComparative": "0", "id": "st_72"}, {"end": 10192, "text": "Instead of having a single segment for topic k, of length pk/Z = p(zij = k|zij , x, , ), we instead have several segments sk l .", "rank": 73, "start": 10064, "IsComparative": "1", "id": "st_73"}, {"end": 10193, "text": ".", "rank": 74, "start": 10192, "IsComparative": "0", "id": "st_74"}, {"end": 10194, "text": ".", "rank": 75, "start": 10193, "IsComparative": "0", "id": "st_75"}, {"end": 10226, "text": "sk K associated with each topic.", "rank": 76, "start": 10194, "IsComparative": "0", "id": "st_76"}, {"end": 10391, "text": "The first segment for a topic k, sk k, describes a conservative estimate of the probability of the topic given the upper bound Zk on the true normalization factor Z.", "rank": 77, "start": 10226, "IsComparative": "0", "id": "st_77"}, {"end": 10457, "text": "Each of the subsequent segments associated with topic k, namely sk", "rank": 78, "start": 10391, "IsComparative": "0", "id": "st_78"}]}, {"paragraph_info": {"end": 10595, "start": 10457, "text": "Since the final bound ZK = Z, the total sum of the segment lengths for topic k is equal to the true, normalized probability of that topic:", "rank": 20, "paragraph_comparative_number": 1, "entities": [], "id": "p_20"}, "sentences": [{"end": 10595, "text": "Since the final bound ZK = Z, the total sum of the segment lengths for topic k is equal to the true, normalized probability of that topic:", "rank": 79, "start": 10457, "IsComparative": "1", "id": "st_79"}]}, {"paragraph_info": {"end": 11423, "start": 10595, "text": "Therefore, as in the conventional sampling method, we can draw zij from the correct distribution by first drawing u  Uniform<0, 1>, then determining the segment in which it falls.By organizing the segments in this way, we can obtain a substantial advantage: we can check each segments in order, knowing only p1 ...pk and Zk, and if we find that u falls within a particular segment sk l , the remaining segments are irrelevant.Importantly, if for our sequence of bounds Z1 ...ZK, an intermediate bound Zl depends only on the values of ajk and bjk for k  l, then we may be able to draw the sample after only examining topics 1 ...l.Given that in LDA, the probability mass is typically concentrated on a small subset of topics for a given word and document, in practice we may have to do far fewer operations per sample on average.", "rank": 21, "paragraph_comparative_number": 3, "entities": [], "id": "p_21"}, "sentences": [{"end": 10774, "text": "Therefore, as in the conventional sampling method, we can draw zij from the correct distribution by first drawing u  Uniform<0, 1>, then determining the segment in which it falls.", "rank": 80, "start": 10595, "IsComparative": "1", "id": "st_80"}, {"end": 10907, "text": "By organizing the segments in this way, we can obtain a substantial advantage: we can check each segments in order, knowing only p1 .", "rank": 81, "start": 10774, "IsComparative": "0", "id": "st_81"}, {"end": 10908, "text": ".", "rank": 82, "start": 10907, "IsComparative": "0", "id": "st_82"}, {"end": 10909, "text": ".", "rank": 83, "start": 10908, "IsComparative": "0", "id": "st_83"}, {"end": 11021, "text": "pk and Zk, and if we find that u falls within a particular segment sk l , the remaining segments are irrelevant.", "rank": 84, "start": 10909, "IsComparative": "0", "id": "st_84"}, {"end": 11068, "text": "Importantly, if for our sequence of bounds Z1 .", "rank": 85, "start": 11021, "IsComparative": "1", "id": "st_85"}, {"end": 11069, "text": ".", "rank": 86, "start": 11068, "IsComparative": "0", "id": "st_86"}, {"end": 11221, "text": ".ZK, an intermediate bound Zl depends only on the values of ajk and bjk for k  l, then we may be able to draw the sample after only examining topics 1 .", "rank": 87, "start": 11069, "IsComparative": "1", "id": "st_87"}, {"end": 11222, "text": ".", "rank": 88, "start": 11221, "IsComparative": "0", "id": "st_88"}, {"end": 11223, "text": ".", "rank": 89, "start": 11222, "IsComparative": "0", "id": "st_89"}, {"end": 11225, "text": "l.", "rank": 90, "start": 11223, "IsComparative": "0", "id": "st_90"}, {"end": 11423, "text": "Given that in LDA, the probability mass is typically concentrated on a small subset of topics for a given word and document, in practice we may have to do far fewer operations per sample on average.", "rank": 91, "start": 11225, "IsComparative": "0", "id": "st_91"}]}, {"paragraph_info": {"end": 11445, "start": 11423, "text": "4.1 Upper Bounds for Z", "rank": 22, "paragraph_comparative_number": 0, "entities": [], "id": "p_22"}, "sentences": [{"end": 11445, "text": "4.1 Upper Bounds for Z", "rank": 92, "start": 11423, "IsComparative": "0", "id": "st_92"}]}, {"paragraph_info": {"end": 11609, "start": 11445, "text": "FastLDA depends on finding a sequence of improving bounds on the normalization constant, Z1  Z2  ...ZK = Z.We first define Z in terms of component vectors ~a,~b,~c:", "rank": 23, "paragraph_comparative_number": 0, "entities": [], "id": "p_23"}, "sentences": [{"end": 11543, "text": "FastLDA depends on finding a sequence of improving bounds on the normalization constant, Z1  Z2  .", "rank": 93, "start": 11445, "IsComparative": "0", "id": "st_93"}, {"end": 11544, "text": ".", "rank": 94, "start": 11543, "IsComparative": "0", "id": "st_94"}, {"end": 11545, "text": ".", "rank": 95, "start": 11544, "IsComparative": "0", "id": "st_95"}, {"end": 11552, "text": "ZK = Z.", "rank": 96, "start": 11545, "IsComparative": "0", "id": "st_96"}, {"end": 11609, "text": "We first define Z in terms of component vectors ~a,~b,~c:", "rank": 97, "start": 11552, "IsComparative": "0", "id": "st_97"}]}, {"paragraph_info": {"end": 11653, "start": 11609, "text": "Then, the normalization constant is given by", "rank": 24, "paragraph_comparative_number": 0, "entities": [], "id": "p_24"}, "sentences": [{"end": 11653, "text": "Then, the normalization constant is given by", "rank": 98, "start": 11609, "IsComparative": "0", "id": "st_98"}]}, {"paragraph_info": {"end": 11798, "start": 11653, "text": "To construct an initial upper bound Z0 on Z, we turn to the generalized version of Holders inequality <7>, which states where 1/p + 1/q + 1/r = 1", "rank": 25, "paragraph_comparative_number": 1, "entities": [], "id": "p_25"}, "sentences": [{"end": 11798, "text": "To construct an initial upper bound Z0 on Z, we turn to the generalized version of Holders inequality <7>, which states where 1/p + 1/q + 1/r = 1", "rank": 99, "start": 11653, "IsComparative": "1", "id": "st_99"}]}, {"paragraph_info": {"end": 11997, "start": 11798, "text": "Notice that, as we examine topics in order, we learn the actual value of the product ~ak~bk~ck.We can use these calculations to improve the bound at each step.We then have a bound at step l given by:", "rank": 26, "paragraph_comparative_number": 1, "entities": [], "id": "p_26"}, "sentences": [{"end": 11893, "text": "Notice that, as we examine topics in order, we learn the actual value of the product ~ak~bk~ck.", "rank": 100, "start": 11798, "IsComparative": "0", "id": "st_100"}, {"end": 11957, "text": "We can use these calculations to improve the bound at each step.", "rank": 101, "start": 11893, "IsComparative": "1", "id": "st_101"}, {"end": 11997, "text": "We then have a bound at step l given by:", "rank": 102, "start": 11957, "IsComparative": "0", "id": "st_102"}]}, {"paragraph_info": {"end": 12235, "start": 11997, "text": "This sequence of bounds satisfies our requirements: it is decreasing, and if l = K we recover the exact value of Z.In this way the bound improves incrementally at each iteration until we eventually obtain the correct normalization factor.", "rank": 27, "paragraph_comparative_number": 1, "entities": [], "id": "p_27"}, "sentences": [{"end": 12112, "text": "This sequence of bounds satisfies our requirements: it is decreasing, and if l = K we recover the exact value of Z.", "rank": 103, "start": 11997, "IsComparative": "1", "id": "st_103"}, {"end": 12235, "text": "In this way the bound improves incrementally at each iteration until we eventually obtain the correct normalization factor.", "rank": 104, "start": 12112, "IsComparative": "0", "id": "st_104"}]}, {"paragraph_info": {"end": 13021, "start": 12235, "text": "Holders inequality describes a class of bounds, for any valid choice of (p, q, r); these values are a design choice of the algorithm.A critical aspect in the choice of bounds is that it must be computationally efficient to maintain.In particular we want to be able to calculate Z0 and update in constant time.We focus our attention on two natural choices of values which lead to computationally efficient implementations: (p, q, r) = (2, 2,) and (3, 3, 3).For p, q, r < , the norms can be updated in constant time, while for r = , we have k~cl+1:Kkr = mink Nk which is also relatively efficient to maintain.Section 4.4 provides more detail on how these values are maintained.Empirically, we found that the first choice typically results in a better bound (see Figure 10 in Section 6.4).", "rank": 28, "paragraph_comparative_number": 3, "entities": [], "id": "p_28"}, "sentences": [{"end": 12368, "text": "Holders inequality describes a class of bounds, for any valid choice of (p, q, r); these values are a design choice of the algorithm.", "rank": 105, "start": 12235, "IsComparative": "0", "id": "st_105"}, {"end": 12467, "text": "A critical aspect in the choice of bounds is that it must be computationally efficient to maintain.", "rank": 106, "start": 12368, "IsComparative": "1", "id": "st_106"}, {"end": 12544, "text": "In particular we want to be able to calculate Z0 and update in constant time.", "rank": 107, "start": 12467, "IsComparative": "1", "id": "st_107"}, {"end": 12691, "text": "We focus our attention on two natural choices of values which lead to computationally efficient implementations: (p, q, r) = (2, 2,) and (3, 3, 3).", "rank": 108, "start": 12544, "IsComparative": "1", "id": "st_108"}, {"end": 12842, "text": "For p, q, r < , the norms can be updated in constant time, while for r = , we have k~cl+1:Kkr = mink Nk which is also relatively efficient to maintain.", "rank": 109, "start": 12691, "IsComparative": "0", "id": "st_109"}, {"end": 12910, "text": "Section 4.4 provides more detail on how these values are maintained.", "rank": 110, "start": 12842, "IsComparative": "0", "id": "st_110"}, {"end": 13021, "text": "Empirically, we found that the first choice typically results in a better bound (see Figure 10 in Section 6.4).", "rank": 111, "start": 12910, "IsComparative": "0", "id": "st_111"}]}, {"paragraph_info": {"end": 13635, "start": 13021, "text": "FastLDA maintains the norms k~akp, k~bkq, k~ckr separately and then uses their product to bound Z.One might consider maintaining the norm k~a~bk, k~b~ck or even Z instead, improving on or eliminating the bound for Z.The problem with maintaining any combination of the vectors ~a,~b or ~c is that the update of one zij will cause many separate norms to change because they depend on the counts of zij variables, Nwkj .For example, if we maintain dwk = bwkck, then a change of the value of zij from k to k requires changes to dwk, dwkw resulting in O(2W) operations.However without ~d, only bwk, bwk , ck, ck change.", "rank": 29, "paragraph_comparative_number": 3, "entities": [], "id": "p_29"}, "sentences": [{"end": 13119, "text": "FastLDA maintains the norms k~akp, k~bkq, k~ckr separately and then uses their product to bound Z.", "rank": 112, "start": 13021, "IsComparative": "1", "id": "st_112"}, {"end": 13237, "text": "One might consider maintaining the norm k~a~bk, k~b~ck or even Z instead, improving on or eliminating the bound for Z.", "rank": 113, "start": 13119, "IsComparative": "0", "id": "st_113"}, {"end": 13438, "text": "The problem with maintaining any combination of the vectors ~a,~b or ~c is that the update of one zij will cause many separate norms to change because they depend on the counts of zij variables, Nwkj .", "rank": 114, "start": 13237, "IsComparative": "1", "id": "st_114"}, {"end": 13585, "text": "For example, if we maintain dwk = bwkck, then a change of the value of zij from k to k requires changes to dwk, dwkw resulting in O(2W) operations.", "rank": 115, "start": 13438, "IsComparative": "1", "id": "st_115"}, {"end": 13635, "text": "However without ~d, only bwk, bwk , ck, ck change.", "rank": 116, "start": 13585, "IsComparative": "0", "id": "st_116"}]}, {"paragraph_info": {"end": 13658, "start": 13635, "text": "4.2 Refinement Sequence", "rank": 30, "paragraph_comparative_number": 0, "entities": [], "id": "p_30"}, "sentences": [{"end": 13658, "text": "4.2 Refinement Sequence", "rank": 117, "start": 13635, "IsComparative": "0", "id": "st_117"}]}, {"paragraph_info": {"end": 14211, "start": 13658, "text": "Finally, we must also consider the order in which the topics are evaluated.Execution time improves as the number of topics considered before we find the segment sk l containing u decreases.We thus would like the algorithm to consider the longest segments first, and only check the short segments if necessary.Two factors affect the segment length: pk, the unnormalized probability, and Zl, the bound on Z at step l. Specifically, we want to check the topics with the largest pk early, and similarly the topics which will improve (decrease) the bound Zl.", "rank": 31, "paragraph_comparative_number": 1, "entities": [], "id": "p_31"}, "sentences": [{"end": 13733, "text": "Finally, we must also consider the order in which the topics are evaluated.", "rank": 118, "start": 13658, "IsComparative": "0", "id": "st_118"}, {"end": 13847, "text": "Execution time improves as the number of topics considered before we find the segment sk l containing u decreases.", "rank": 119, "start": 13733, "IsComparative": "0", "id": "st_119"}, {"end": 13967, "text": "We thus would like the algorithm to consider the longest segments first, and only check the short segments if necessary.", "rank": 120, "start": 13847, "IsComparative": "0", "id": "st_120"}, {"end": 14211, "text": "Two factors affect the segment length: pk, the unnormalized probability, and Zl, the bound on Z at step l. Specifically, we want to check the topics with the largest pk early, and similarly the topics which will improve (decrease) the bound Zl.", "rank": 121, "start": 13967, "IsComparative": "1", "id": "st_121"}]}, {"paragraph_info": {"end": 14542, "start": 14211, "text": "Those topics which fall into the former category are those with (relatively) large values for the product ~ak~bk~ck, while  those falling into the latter category are those with large values for at least one of ~ak, ~bk, and ~ck.Thus it is natural to seek out those topics k which have large values in one or more of these vectors.", "rank": 32, "paragraph_comparative_number": 1, "entities": [], "id": "p_32"}, "sentences": [{"end": 14440, "text": "Those topics which fall into the former category are those with (relatively) large values for the product ~ak~bk~ck, while  those falling into the latter category are those with large values for at least one of ~ak, ~bk, and ~ck.", "rank": 122, "start": 14211, "IsComparative": "0", "id": "st_122"}, {"end": 14542, "text": "Thus it is natural to seek out those topics k which have large values in one or more of these vectors.", "rank": 123, "start": 14440, "IsComparative": "1", "id": "st_123"}]}, {"paragraph_info": {"end": 15098, "start": 14542, "text": "Another factor which must be balanced is the computational effort to find and maintain an order for refinement.Clearly, to be useful a method must be faster than a direct search over topics.To greedily select a good refinement order while ensuring that we maintain computational efficiency, we consider topics in descending order of Nkj , the frequency of word assignments to a topic in the current document (equivalent to descending order on the elements of ~b).This order is both efficient to maintain (see Section 4.4) and appears effective in practice.", "rank": 33, "paragraph_comparative_number": 3, "entities": [], "id": "p_33"}, "sentences": [{"end": 14653, "text": "Another factor which must be balanced is the computational effort to find and maintain an order for refinement.", "rank": 124, "start": 14542, "IsComparative": "1", "id": "st_124"}, {"end": 14732, "text": "Clearly, to be useful a method must be faster than a direct search over topics.", "rank": 125, "start": 14653, "IsComparative": "1", "id": "st_125"}, {"end": 15005, "text": "To greedily select a good refinement order while ensuring that we maintain computational efficiency, we consider topics in descending order of Nkj , the frequency of word assignments to a topic in the current document (equivalent to descending order on the elements of ~b).", "rank": 126, "start": 14732, "IsComparative": "1", "id": "st_126"}, {"end": 15098, "text": "This order is both efficient to maintain (see Section 4.4) and appears effective in practice.", "rank": 127, "start": 15005, "IsComparative": "0", "id": "st_127"}]}, {"paragraph_info": {"end": 15120, "start": 15098, "text": "4.3 Fast LDA Algorithm", "rank": 34, "paragraph_comparative_number": 0, "entities": [], "id": "p_34"}, "sentences": [{"end": 15120, "text": "4.3 Fast LDA Algorithm", "rank": 128, "start": 15098, "IsComparative": "0", "id": "st_128"}]}, {"paragraph_info": {"end": 15979, "start": 15120, "text": "The sampling step for FastLDA begins with a sorted list of topics in descending order by Njk, the most popular topic for a document to the least popular.A random value u is sampled u  Uniform<0, 1>.The algorithm then considers topics in order, calculating the length of segments sk l as it goes.Each time the next topic is considered the bound Zk is improved.As soon as the sum of segments calculated so far is greater then u, the algorithm can stop and return the topic associated with the segment u falls on.Graphically, the algorithm scans down the line in Figure 3 calculating only sk l and Zk for the k topics visited so far.When the algorithm finds a segment whose end point is past u it stops and returns the associated topic.By intelligently ordering the comparisons as to whether u is within a segment, we need to do 2K comparisons in the worst case.", "rank": 35, "paragraph_comparative_number": 4, "entities": [], "id": "p_35"}, "sentences": [{"end": 15273, "text": "The sampling step for FastLDA begins with a sorted list of topics in descending order by Njk, the most popular topic for a document to the least popular.", "rank": 129, "start": 15120, "IsComparative": "1", "id": "st_129"}, {"end": 15318, "text": "A random value u is sampled u  Uniform<0, 1>.", "rank": 130, "start": 15273, "IsComparative": "0", "id": "st_130"}, {"end": 15415, "text": "The algorithm then considers topics in order, calculating the length of segments sk l as it goes.", "rank": 131, "start": 15318, "IsComparative": "0", "id": "st_131"}, {"end": 15479, "text": "Each time the next topic is considered the bound Zk is improved.", "rank": 132, "start": 15415, "IsComparative": "0", "id": "st_132"}, {"end": 15630, "text": "As soon as the sum of segments calculated so far is greater then u, the algorithm can stop and return the topic associated with the segment u falls on.", "rank": 133, "start": 15479, "IsComparative": "0", "id": "st_133"}, {"end": 15750, "text": "Graphically, the algorithm scans down the line in Figure 3 calculating only sk l and Zk for the k topics visited so far.", "rank": 134, "start": 15630, "IsComparative": "1", "id": "st_134"}, {"end": 15853, "text": "When the algorithm finds a segment whose end point is past u it stops and returns the associated topic.", "rank": 135, "start": 15750, "IsComparative": "1", "id": "st_135"}, {"end": 15979, "text": "By intelligently ordering the comparisons as to whether u is within a segment, we need to do 2K comparisons in the worst case.", "rank": 136, "start": 15853, "IsComparative": "1", "id": "st_136"}]}, {"paragraph_info": {"end": 16010, "start": 15979, "text": "4.4 Complexity of the Algorithm", "rank": 36, "paragraph_comparative_number": 0, "entities": [], "id": "p_36"}, "sentences": [{"end": 16010, "text": "4.4 Complexity of the Algorithm", "rank": 137, "start": 15979, "IsComparative": "0", "id": "st_137"}]}, {"paragraph_info": {"end": 16230, "start": 16010, "text": "To improve over the conventional algorithm, FastLDA must maintain the sorted order of Nkj and the norms of each component: minkNk, k~al:Kk and k~bl:Kk, more efficiently then the K steps required for the calculation of Z.", "rank": 37, "paragraph_comparative_number": 1, "entities": [], "id": "p_37"}, "sentences": [{"end": 16230, "text": "To improve over the conventional algorithm, FastLDA must maintain the sorted order of Nkj and the norms of each component: minkNk, k~al:Kk and k~bl:Kk, more efficiently then the K steps required for the calculation of Z.", "rank": 138, "start": 16010, "IsComparative": "1", "id": "st_138"}]}, {"paragraph_info": {"end": 17471, "start": 16230, "text": "The strategy used is to calculate the values initially and then update only the affected values after each sample of zij .Maintaining the descending sort order of Nkj or the minimum element of Nk can be done inexpensively, and in practice much faster than the worst case O(logK) required for a delete/insert operation into a sorted array.We start by performing an initial sort of these integer arrays, which takes O(K logK) time.During an update, one element of Nkj is incremented by one, and another element of Nkj is decremented by one (likewise for Nk).Given that we have integer arrays, this update will render the array in almost sorted order, and we expect that only a few swaps are required to restore sorted order.Using a simple bubble sort, the amortized time for this maintain-sort operation is very small, and in practice much faster than O(logK).Maintaining the value of the finite norms, k~ak and k~bk, from iteration to iteration can be done by calculating the values once during initialization and then updating the value when an associated zij is sampled.Two norms need to be updated when zij is updated, the value of k~ak for document j and the value of k~bk for word w, where xij = w.These updates can be done in O(1) time.", "rank": 38, "paragraph_comparative_number": 3, "entities": [], "id": "p_38"}, "sentences": [{"end": 16352, "text": "The strategy used is to calculate the values initially and then update only the affected values after each sample of zij .", "rank": 139, "start": 16230, "IsComparative": "1", "id": "st_139"}, {"end": 16568, "text": "Maintaining the descending sort order of Nkj or the minimum element of Nk can be done inexpensively, and in practice much faster than the worst case O(logK) required for a delete/insert operation into a sorted array.", "rank": 140, "start": 16352, "IsComparative": "0", "id": "st_140"}, {"end": 16659, "text": "We start by performing an initial sort of these integer arrays, which takes O(K logK) time.", "rank": 141, "start": 16568, "IsComparative": "1", "id": "st_141"}, {"end": 16786, "text": "During an update, one element of Nkj is incremented by one, and another element of Nkj is decremented by one (likewise for Nk).", "rank": 142, "start": 16659, "IsComparative": "0", "id": "st_142"}, {"end": 16952, "text": "Given that we have integer arrays, this update will render the array in almost sorted order, and we expect that only a few swaps are required to restore sorted order.", "rank": 143, "start": 16786, "IsComparative": "0", "id": "st_143"}, {"end": 17088, "text": "Using a simple bubble sort, the amortized time for this maintain-sort operation is very small, and in practice much faster than O(logK).", "rank": 144, "start": 16952, "IsComparative": "0", "id": "st_144"}, {"end": 17301, "text": "Maintaining the value of the finite norms, k~ak and k~bk, from iteration to iteration can be done by calculating the values once during initialization and then updating the value when an associated zij is sampled.", "rank": 145, "start": 17088, "IsComparative": "0", "id": "st_145"}, {"end": 17432, "text": "Two norms need to be updated when zij is updated, the value of k~ak for document j and the value of k~bk for word w, where xij = w.", "rank": 146, "start": 17301, "IsComparative": "1", "id": "st_146"}, {"end": 17471, "text": "These updates can be done in O(1) time.", "rank": 147, "start": 17432, "IsComparative": "0", "id": "st_147"}]}, {"paragraph_info": {"end": 17825, "start": 17471, "text": "In addition, we require the incremental improvements at each step of the sampling process, i.e., at topic k  1 we require k~ak:Kk and k~bk:Kk, the norms of the remaining topics from k to K.(We upper-bound k~ck:Kk by its initial value, k~ck.)For finite p-norms, given k~ak:Kkp it is an O(1) update from k~ak:Kkp  k~ak+1:Kkp, and equivalently for k~bk:Kkq.", "rank": 39, "paragraph_comparative_number": 3, "entities": [], "id": "p_39"}, "sentences": [{"end": 17660, "text": "In addition, we require the incremental improvements at each step of the sampling process, i.e., at topic k  1 we require k~ak:Kk and k~bk:Kk, the norms of the remaining topics from k to K.", "rank": 148, "start": 17471, "IsComparative": "1", "id": "st_148"}, {"end": 17712, "text": "(We upper-bound k~ck:Kk by its initial value, k~ck.)", "rank": 149, "start": 17660, "IsComparative": "1", "id": "st_149"}, {"end": 17825, "text": "For finite p-norms, given k~ak:Kkp it is an O(1) update from k~ak:Kkp  k~ak+1:Kkp, and equivalently for k~bk:Kkq.", "rank": 150, "start": 17712, "IsComparative": "1", "id": "st_150"}]}, {"paragraph_info": {"end": 17836, "start": 17825, "text": "5.DATA SETS", "rank": 40, "paragraph_comparative_number": 1, "entities": [], "id": "p_40"}, "sentences": [{"end": 17827, "text": "5.", "rank": 151, "start": 17825, "IsComparative": "1", "id": "st_151"}, {"end": 17836, "text": "DATA SETS", "rank": 152, "start": 17827, "IsComparative": "0", "id": "st_152"}]}, {"paragraph_info": {"end": 18532, "start": 17836, "text": "We compared execution times of LDA and FastLDA using four data sets: NIPS full papers (from books.nips.cc), Enron emails (from www.cs.cmu.edu/enron), NYTimes news articles (from ldc.upenn.edu), and PubMed abstracts (from www.pubmed.gov).These four data sets span a wide range of collection size, content, and average document length.The NYTimes and PubMed collections are relatively large, and therefore useful for demonstrating the potential benefits of FastLDA.For each collection, after tokenization and removal of stopwords, the vocabulary of unique words was truncated by only keeping words that occurred more than ten times.The size parameters for these four data sets are shown in Table 1.", "rank": 41, "paragraph_comparative_number": 4, "entities": [], "id": "p_41"}, "sentences": [{"end": 18073, "text": "We compared execution times of LDA and FastLDA using four data sets: NIPS full papers (from books.nips.cc), Enron emails (from www.cs.cmu.edu/enron), NYTimes news articles (from ldc.upenn.edu), and PubMed abstracts (from www.pubmed.gov).", "rank": 153, "start": 17836, "IsComparative": "1", "id": "st_153"}, {"end": 18169, "text": "These four data sets span a wide range of collection size, content, and average document length.", "rank": 154, "start": 18073, "IsComparative": "1", "id": "st_154"}, {"end": 18299, "text": "The NYTimes and PubMed collections are relatively large, and therefore useful for demonstrating the potential benefits of FastLDA.", "rank": 155, "start": 18169, "IsComparative": "0", "id": "st_155"}, {"end": 18466, "text": "For each collection, after tokenization and removal of stopwords, the vocabulary of unique words was truncated by only keeping words that occurred more than ten times.", "rank": 156, "start": 18299, "IsComparative": "1", "id": "st_156"}, {"end": 18532, "text": "The size parameters for these four data sets are shown in Table 1.", "rank": 157, "start": 18466, "IsComparative": "1", "id": "st_157"}]}, {"paragraph_info": {"end": 19144, "start": 18532, "text": "While the NIPS and Enron data sets are moderately sized, and thus useful for conducting parameter studies, the NYTimes and PubMed data sets are relatively large.Running LDA on the NYTimes data set using K = 1600 topics can take more than a week on a typical high-end desktop computer, and running LDA on the PubMed data set using K = 4000 topics would take months, and would require memory well beyond typical desktop computers.Consequently, these larger data sets are ideal candidates for showing the reduction in computation time from our FastLDA method, and measuring speedup on real-life large-scale corpora.", "rank": 42, "paragraph_comparative_number": 2, "entities": [], "id": "p_42"}, "sentences": [{"end": 18693, "text": "While the NIPS and Enron data sets are moderately sized, and thus useful for conducting parameter studies, the NYTimes and PubMed data sets are relatively large.", "rank": 158, "start": 18532, "IsComparative": "0", "id": "st_158"}, {"end": 18960, "text": "Running LDA on the NYTimes data set using K = 1600 topics can take more than a week on a typical high-end desktop computer, and running LDA on the PubMed data set using K = 4000 topics would take months, and would require memory well beyond typical desktop computers.", "rank": 159, "start": 18693, "IsComparative": "1", "id": "st_159"}, {"end": 19144, "text": "Consequently, these larger data sets are ideal candidates for showing the reduction in computation time from our FastLDA method, and measuring speedup on real-life large-scale corpora.", "rank": 160, "start": 18960, "IsComparative": "1", "id": "st_160"}]}, {"paragraph_info": {"end": 19157, "start": 19144, "text": "6.EXPERIMENTS", "rank": 43, "paragraph_comparative_number": 2, "entities": [], "id": "p_43"}, "sentences": [{"end": 19146, "text": "6.", "rank": 161, "start": 19144, "IsComparative": "1", "id": "st_161"}, {"end": 19157, "text": "EXPERIMENTS", "rank": 162, "start": 19146, "IsComparative": "1", "id": "st_162"}]}, {"paragraph_info": {"end": 19590, "start": 19157, "text": "Before describing and explaining our experiments, we point the reader to the Appendix, which lists the exact parameter specifications used to run our experiments.With the goal of repeatability, we have made our LDA and FastLDA code publicly available at http:// www.ics.uci.edu/ iporteou/ fastlda and the four data sets at the UCI Machine Learning Repository, http:// archive.ics.uci.edu/ml/ machine-learningdatabases/ bag-of-words/.", "rank": 44, "paragraph_comparative_number": 2, "entities": [], "id": "p_44"}, "sentences": [{"end": 19319, "text": "Before describing and explaining our experiments, we point the reader to the Appendix, which lists the exact parameter specifications used to run our experiments.", "rank": 163, "start": 19157, "IsComparative": "1", "id": "st_163"}, {"end": 19590, "text": "With the goal of repeatability, we have made our LDA and FastLDA code publicly available at http:// www.ics.uci.edu/ iporteou/ fastlda and the four data sets at the UCI Machine Learning Repository, http:// archive.ics.uci.edu/ml/ machine-learningdatabases/ bag-of-words/.", "rank": 164, "start": 19319, "IsComparative": "1", "id": "st_164"}]}, {"paragraph_info": {"end": 20095, "start": 19590, "text": "The purpose of our experiments was to measure actual reduction in execution time of FastLDA relative to LDA.Consequently, we setup a highly-controlled compute environment to perform timing tests.All speedup experiments were performed in pairs, with LDA and FastLDA being run on the same computer, compiler and environment to allow a fair comparison of execution times.Most computations were run on workstations with dual Xeon 3.0GHz processors with code compiled by gcc version 3.4 using -O3 optimization.", "rank": 45, "paragraph_comparative_number": 2, "entities": [], "id": "p_45"}, "sentences": [{"end": 19698, "text": "The purpose of our experiments was to measure actual reduction in execution time of FastLDA relative to LDA.", "rank": 165, "start": 19590, "IsComparative": "1", "id": "st_165"}, {"end": 19785, "text": "Consequently, we setup a highly-controlled compute environment to perform timing tests.", "rank": 166, "start": 19698, "IsComparative": "1", "id": "st_166"}, {"end": 19958, "text": "All speedup experiments were performed in pairs, with LDA and FastLDA being run on the same computer, compiler and environment to allow a fair comparison of execution times.", "rank": 167, "start": 19785, "IsComparative": "0", "id": "st_167"}, {"end": 20095, "text": "Most computations were run on workstations with dual Xeon 3.0GHz processors with code compiled by gcc version 3.4 using -O3 optimization.", "rank": 168, "start": 19958, "IsComparative": "0", "id": "st_168"}]}, {"paragraph_info": {"end": 20935, "start": 20095, "text": "While equivalence of FastLDA to LDA is guaranteed by construction, we performed additional tests to verify that our implementation of FastLDA produced results identical to LDA.In the first test we verified that the implementations of LDA and FastLDA drew samples for zij from the same distribution.To do this, we kept the assignment variables zij constant, and sampled a value for, but did not update, zij .We did this for 1000 iterations and then verified that the histograms of sampled values were the same between LDA and FastLDA.In the second test, using 100 runs on the NIPS corpus, we confirmed that the perplexity for FastLDA was the same as the perplexity for LDA.This double checking affirmed that FastLDA was indeed correctly coded, and therefore timings produced by FastLDA would be valid and comparable to those produced by LDA.", "rank": 46, "paragraph_comparative_number": 4, "entities": [], "id": "p_46"}, "sentences": [{"end": 20271, "text": "While equivalence of FastLDA to LDA is guaranteed by construction, we performed additional tests to verify that our implementation of FastLDA produced results identical to LDA.", "rank": 169, "start": 20095, "IsComparative": "1", "id": "st_169"}, {"end": 20393, "text": "In the first test we verified that the implementations of LDA and FastLDA drew samples for zij from the same distribution.", "rank": 170, "start": 20271, "IsComparative": "0", "id": "st_170"}, {"end": 20502, "text": "To do this, we kept the assignment variables zij constant, and sampled a value for, but did not update, zij .", "rank": 171, "start": 20393, "IsComparative": "1", "id": "st_171"}, {"end": 20628, "text": "We did this for 1000 iterations and then verified that the histograms of sampled values were the same between LDA and FastLDA.", "rank": 172, "start": 20502, "IsComparative": "1", "id": "st_172"}, {"end": 20767, "text": "In the second test, using 100 runs on the NIPS corpus, we confirmed that the perplexity for FastLDA was the same as the perplexity for LDA.", "rank": 173, "start": 20628, "IsComparative": "1", "id": "st_173"}, {"end": 20935, "text": "This double checking affirmed that FastLDA was indeed correctly coded, and therefore timings produced by FastLDA would be valid and comparable to those produced by LDA.", "rank": 174, "start": 20767, "IsComparative": "0", "id": "st_174"}]}, {"paragraph_info": {"end": 20956, "start": 20935, "text": "6.1 Measuring Speedup", "rank": 47, "paragraph_comparative_number": 0, "entities": [], "id": "p_47"}, "sentences": [{"end": 20956, "text": "6.1 Measuring Speedup", "rank": 175, "start": 20935, "IsComparative": "0", "id": "st_175"}]}, {"paragraph_info": {"end": 21679, "start": 20956, "text": "For the NIPS and Enron data sets, we timed the execution of LDA and FastLDA for 500 iterations of the Gibbs sampler, i.e., 500 sweeps through the entire corpus.This number of iterations was chosen to be large enough to guarantee that burn-in had occurred, and that samples were being drawn from the posterior distribution.This number of iterations also meant that the measurement of execution time was relatively accurate.Each separate case was run twice using different random initializations to estimate variation in timings.These repeat timings of runs showed that the variation in CPU time for any given run was approximately 1%.We do not show error bars in the figures because this variation in timings was negligible.", "rank": 48, "paragraph_comparative_number": 3, "entities": [], "id": "p_48"}, "sentences": [{"end": 21116, "text": "For the NIPS and Enron data sets, we timed the execution of LDA and FastLDA for 500 iterations of the Gibbs sampler, i.e., 500 sweeps through the entire corpus.", "rank": 176, "start": 20956, "IsComparative": "1", "id": "st_176"}, {"end": 21278, "text": "This number of iterations was chosen to be large enough to guarantee that burn-in had occurred, and that samples were being drawn from the posterior distribution.", "rank": 177, "start": 21116, "IsComparative": "0", "id": "st_177"}, {"end": 21378, "text": "This number of iterations also meant that the measurement of execution time was relatively accurate.", "rank": 178, "start": 21278, "IsComparative": "0", "id": "st_178"}, {"end": 21483, "text": "Each separate case was run twice using different random initializations to estimate variation in timings.", "rank": 179, "start": 21378, "IsComparative": "0", "id": "st_179"}, {"end": 21589, "text": "These repeat timings of runs showed that the variation in CPU time for any given run was approximately 1%.", "rank": 180, "start": 21483, "IsComparative": "1", "id": "st_180"}, {"end": 21679, "text": "We do not show error bars in the figures because this variation in timings was negligible.", "rank": 181, "start": 21589, "IsComparative": "1", "id": "st_181"}]}, {"paragraph_info": {"end": 22292, "start": 21679, "text": "For the NYTimes and PubMed data sets, we used a slightly different method to measure speedup, because of the considerably larger size of these data sets compared to NIPS and Enron.Instead of measuring CPU time for an entire run, we measured CPU time per iteration.To produce an accurate estimate, we estimated this per-iteration CPU time by timing 20 consecutive iterations.FastLDA was initialized with parameters from an already burned-in model for NYTimes and PubMed.The K = 2000 and K = 4000 topic models of PubMed were computed on a supercomputer using 256 processors using the parallel AD-LDA algorithm <14>.", "rank": 49, "paragraph_comparative_number": 4, "entities": [], "id": "p_49"}, "sentences": [{"end": 21859, "text": "For the NYTimes and PubMed data sets, we used a slightly different method to measure speedup, because of the considerably larger size of these data sets compared to NIPS and Enron.", "rank": 182, "start": 21679, "IsComparative": "1", "id": "st_182"}, {"end": 21943, "text": "Instead of measuring CPU time for an entire run, we measured CPU time per iteration.", "rank": 183, "start": 21859, "IsComparative": "1", "id": "st_183"}, {"end": 22053, "text": "To produce an accurate estimate, we estimated this per-iteration CPU time by timing 20 consecutive iterations.", "rank": 184, "start": 21943, "IsComparative": "1", "id": "st_184"}, {"end": 22148, "text": "FastLDA was initialized with parameters from an already burned-in model for NYTimes and PubMed.", "rank": 185, "start": 22053, "IsComparative": "0", "id": "st_185"}, {"end": 22292, "text": "The K = 2000 and K = 4000 topic models of PubMed were computed on a supercomputer using 256 processors using the parallel AD-LDA algorithm <14>.", "rank": 186, "start": 22148, "IsComparative": "1", "id": "st_186"}]}, {"paragraph_info": {"end": 23005, "start": 22292, "text": "Because of its large size, PubMed presented further challenges.Running LDA or FastLDA on PubMed with K = 2000 and K = 4000 topics requires on the order of 100- 200 GB of memory, well beyond the limit of typical workstations.Therefore, we estimated speedup on PubMed using a 250,000 document subset of the entire collection, but running LDA and FastLDA initialized with the parameters from the aforementioned burned-in model that was computed using the entire PubMed corpus of 8.2 million documents.While the measured CPU times were for a subset of PubMed, the speedup results we show hold for FastLDA running on the entire collection, since the topics used were those learned for the entire 8.2 million documents.", "rank": 50, "paragraph_comparative_number": 3, "entities": [], "id": "p_50"}, "sentences": [{"end": 22355, "text": "Because of its large size, PubMed presented further challenges.", "rank": 187, "start": 22292, "IsComparative": "1", "id": "st_187"}, {"end": 22516, "text": "Running LDA or FastLDA on PubMed with K = 2000 and K = 4000 topics requires on the order of 100- 200 GB of memory, well beyond the limit of typical workstations.", "rank": 188, "start": 22355, "IsComparative": "1", "id": "st_188"}, {"end": 22790, "text": "Therefore, we estimated speedup on PubMed using a 250,000 document subset of the entire collection, but running LDA and FastLDA initialized with the parameters from the aforementioned burned-in model that was computed using the entire PubMed corpus of 8.2 million documents.", "rank": 189, "start": 22516, "IsComparative": "0", "id": "st_189"}, {"end": 23005, "text": "While the measured CPU times were for a subset of PubMed, the speedup results we show hold for FastLDA running on the entire collection, since the topics used were those learned for the entire 8.2 million documents.", "rank": 190, "start": 22790, "IsComparative": "1", "id": "st_190"}]}, {"paragraph_info": {"end": 23027, "start": 23005, "text": "6.2 Experimental Setup", "rank": 51, "paragraph_comparative_number": 0, "entities": [], "id": "p_51"}, "sentences": [{"end": 23027, "text": "6.2 Experimental Setup", "rank": 191, "start": 23005, "IsComparative": "0", "id": "st_191"}]}, {"paragraph_info": {"end": 23523, "start": 23027, "text": "For all experiments, we set Dirichlet parameter  = 0.01 (prior on word given topic) and Dirichlet parameter  = 2/K (prior on topic given document), except where noted.Setting  this way ensured that the total added probability mass was constant.These settings of Dirichlet hyperparameters are typical for those used for topic modeling these data sets, and similar to values that one may learn by sampling or optimization.We also investigated the sensitivity of speedup to the Dirichlet parameter .", "rank": 52, "paragraph_comparative_number": 2, "entities": [], "id": "p_52"}, "sentences": [{"end": 23194, "text": "For all experiments, we set Dirichlet parameter  = 0.01 (prior on word given topic) and Dirichlet parameter  = 2/K (prior on topic given document), except where noted.", "rank": 192, "start": 23027, "IsComparative": "1", "id": "st_192"}, {"end": 23271, "text": "Setting  this way ensured that the total added probability mass was constant.", "rank": 193, "start": 23194, "IsComparative": "0", "id": "st_193"}, {"end": 23447, "text": "These settings of Dirichlet hyperparameters are typical for those used for topic modeling these data sets, and similar to values that one may learn by sampling or optimization.", "rank": 194, "start": 23271, "IsComparative": "0", "id": "st_194"}, {"end": 23523, "text": "We also investigated the sensitivity of speedup to the Dirichlet parameter .", "rank": 195, "start": 23447, "IsComparative": "1", "id": "st_195"}]}, {"paragraph_info": {"end": 23911, "start": 23523, "text": "The bound presented in Section 4.1 was expressed in the more general form of Holders inequality.For all experiments, except where noted, we used the general form of Holders inequality with p = 2, q = 2, r = .Section 6.4 examines the effect of different choices of p, q and r.As is shown and discussed in that section, the choice of p = 2, q = 2, r =  is the better one to use in practice.", "rank": 53, "paragraph_comparative_number": 1, "entities": [], "id": "p_53"}, "sentences": [{"end": 23619, "text": "The bound presented in Section 4.1 was expressed in the more general form of Holders inequality.", "rank": 196, "start": 23523, "IsComparative": "0", "id": "st_196"}, {"end": 23731, "text": "For all experiments, except where noted, we used the general form of Holders inequality with p = 2, q = 2, r = .", "rank": 197, "start": 23619, "IsComparative": "0", "id": "st_197"}, {"end": 23798, "text": "Section 6.4 examines the effect of different choices of p, q and r.", "rank": 198, "start": 23731, "IsComparative": "0", "id": "st_198"}, {"end": 23911, "text": "As is shown and discussed in that section, the choice of p = 2, q = 2, r =  is the better one to use in practice.", "rank": 199, "start": 23798, "IsComparative": "1", "id": "st_199"}]}, {"paragraph_info": {"end": 23930, "start": 23911, "text": "6.3 Speedup Results", "rank": 54, "paragraph_comparative_number": 0, "entities": [], "id": "p_54"}, "sentences": [{"end": 23930, "text": "6.3 Speedup Results", "rank": 200, "start": 23911, "IsComparative": "0", "id": "st_200"}]}, {"paragraph_info": {"end": 24984, "start": 23930, "text": "CPU time for LDA increases linearly with the number of topics K (Figure 5), an expected experimental result given the for loop over K topics in algorithm 3.1.The CPU time for FastLDA is significantly less than the CPU time for LDA for both the NIPS and Enron data sets.Furthermore, we see that FastLDA CPU time increases slower than linearly with increasing topics, indicating a greater speedup with increasing number of topics.Figure 6 shows the same results, this time displayed as speedup, i.e. the y-axis is the CPU Time for LDA divided by the CPU Time for FastLDA.For these data sets, we see speedups between 3 and 8, with speedup increasing with higher number of topics.The fraction of topics FastLDA must consider on average per sample is related to the fraction of topics used by documents on average.This in turn depends on other factors such as the latent structure of the data and the Dirichlet parameters  and .Consequently, in experiments using a reasonable number of topics the speedup of FastLDA increases as the number of topics increase.", "rank": 55, "paragraph_comparative_number": 3, "entities": [], "id": "p_55"}, "sentences": [{"end": 24088, "text": "CPU time for LDA increases linearly with the number of topics K (Figure 5), an expected experimental result given the for loop over K topics in algorithm 3.1.", "rank": 201, "start": 23930, "IsComparative": "1", "id": "st_201"}, {"end": 24199, "text": "The CPU time for FastLDA is significantly less than the CPU time for LDA for both the NIPS and Enron data sets.", "rank": 202, "start": 24088, "IsComparative": "1", "id": "st_202"}, {"end": 24358, "text": "Furthermore, we see that FastLDA CPU time increases slower than linearly with increasing topics, indicating a greater speedup with increasing number of topics.", "rank": 203, "start": 24199, "IsComparative": "0", "id": "st_203"}, {"end": 24499, "text": "Figure 6 shows the same results, this time displayed as speedup, i.e. the y-axis is the CPU Time for LDA divided by the CPU Time for FastLDA.", "rank": 204, "start": 24358, "IsComparative": "0", "id": "st_204"}, {"end": 24606, "text": "For these data sets, we see speedups between 3 and 8, with speedup increasing with higher number of topics.", "rank": 205, "start": 24499, "IsComparative": "0", "id": "st_205"}, {"end": 24739, "text": "The fraction of topics FastLDA must consider on average per sample is related to the fraction of topics used by documents on average.", "rank": 206, "start": 24606, "IsComparative": "0", "id": "st_206"}, {"end": 24853, "text": "This in turn depends on other factors such as the latent structure of the data and the Dirichlet parameters  and .", "rank": 207, "start": 24739, "IsComparative": "0", "id": "st_207"}, {"end": 24984, "text": "Consequently, in experiments using a reasonable number of topics the speedup of FastLDA increases as the number of topics increase.", "rank": 208, "start": 24853, "IsComparative": "1", "id": "st_208"}]}, {"paragraph_info": {"end": 25745, "start": 24984, "text": "Our summary of the speedup results for all four data sets are shown in Figure 7.Each pair of bars shows the speedup of FastLDA relative to LDA, for two different topic settings per corpus.The number of topics are: NIPS K = 400, 800, Enron K = 400, 800, NYTimes K = 800, 1600 and PubMed K = 2000, 4000, with the speedup for the larger number of topics shown in the black bar on the right of each pair.We see a range of 5 to 8 speedup for this wide variety of data sets and topic settings.On the two huge data sets, NYTimes and PubMed, FastLDA shows a consistent 5.7 to 7.5 speedup.This speedup is non-trivial for these larger computations.For example, FastLDA reduces the computation time for NYTimes from over one week to less than one day, for K = 1600 topics.", "rank": 56, "paragraph_comparative_number": 5, "entities": [], "id": "p_56"}, "sentences": [{"end": 25064, "text": "Our summary of the speedup results for all four data sets are shown in Figure 7.", "rank": 209, "start": 24984, "IsComparative": "1", "id": "st_209"}, {"end": 25172, "text": "Each pair of bars shows the speedup of FastLDA relative to LDA, for two different topic settings per corpus.", "rank": 210, "start": 25064, "IsComparative": "1", "id": "st_210"}, {"end": 25384, "text": "The number of topics are: NIPS K = 400, 800, Enron K = 400, 800, NYTimes K = 800, 1600 and PubMed K = 2000, 4000, with the speedup for the larger number of topics shown in the black bar on the right of each pair.", "rank": 211, "start": 25172, "IsComparative": "0", "id": "st_211"}, {"end": 25471, "text": "We see a range of 5 to 8 speedup for this wide variety of data sets and topic settings.", "rank": 212, "start": 25384, "IsComparative": "1", "id": "st_212"}, {"end": 25564, "text": "On the two huge data sets, NYTimes and PubMed, FastLDA shows a consistent 5.7 to 7.5 speedup.", "rank": 213, "start": 25471, "IsComparative": "1", "id": "st_213"}, {"end": 25622, "text": "This speedup is non-trivial for these larger computations.", "rank": 214, "start": 25564, "IsComparative": "0", "id": "st_214"}, {"end": 25745, "text": "For example, FastLDA reduces the computation time for NYTimes from over one week to less than one day, for K = 1600 topics.", "rank": 215, "start": 25622, "IsComparative": "1", "id": "st_215"}]}, {"paragraph_info": {"end": 25978, "start": 25745, "text": "The speedup is relatively insensitive to the number of documents in a corpus, assuming that as the number of documents increases the content stays consistent.Figure 8 shows the speedup for the NIPS collection versus number of topics.", "rank": 57, "paragraph_comparative_number": 1, "entities": [], "id": "p_57"}, "sentences": [{"end": 25903, "text": "The speedup is relatively insensitive to the number of documents in a corpus, assuming that as the number of documents increases the content stays consistent.", "rank": 216, "start": 25745, "IsComparative": "1", "id": "st_216"}, {"end": 25978, "text": "Figure 8 shows the speedup for the NIPS collection versus number of topics.", "rank": 217, "start": 25903, "IsComparative": "0", "id": "st_217"}]}, {"paragraph_info": {"end": 26664, "start": 25978, "text": "The three different curves respectively show the entire NIPS collection of D = 1500 documents, and two subcollections made up of D = 800 and D = 400 documents (where the sub-collections are made up from random sub-samples of the full 1500-document collection).The figure shows that speedup is not significantly effected by corpus size, but predominantly dependent on number of topics, as observed earlier.The choice of Dirichlet parameter  more directly affects speedup, as shown in Figure 9.This is because using a larger Dirichlet parameter smooths the distribution of topics within a document, and gives higher probability to topics that may be irrelevant to any particular document.", "rank": 58, "paragraph_comparative_number": 2, "entities": [], "id": "p_58"}, "sentences": [{"end": 26238, "text": "The three different curves respectively show the entire NIPS collection of D = 1500 documents, and two subcollections made up of D = 800 and D = 400 documents (where the sub-collections are made up from random sub-samples of the full 1500-document collection).", "rank": 218, "start": 25978, "IsComparative": "1", "id": "st_218"}, {"end": 26383, "text": "The figure shows that speedup is not significantly effected by corpus size, but predominantly dependent on number of topics, as observed earlier.", "rank": 219, "start": 26238, "IsComparative": "0", "id": "st_219"}, {"end": 26470, "text": "The choice of Dirichlet parameter  more directly affects speedup, as shown in Figure 9.", "rank": 220, "start": 26383, "IsComparative": "0", "id": "st_220"}, {"end": 26664, "text": "This is because using a larger Dirichlet parameter smooths the distribution of topics within a document, and gives higher probability to topics that may be irrelevant to any particular document.", "rank": 221, "start": 26470, "IsComparative": "1", "id": "st_221"}]}, {"paragraph_info": {"end": 26938, "start": 26664, "text": "The resulting effect of increasing  is that FastLDA needs to visit and compute more topics before drawing a sample.Conversely, setting  to a low value further concentrates the topic probabilities, and produces more than an 18 speedup on the NIPS corpus using K = 800 topics.", "rank": 59, "paragraph_comparative_number": 2, "entities": [], "id": "p_59"}, "sentences": [{"end": 26779, "text": "The resulting effect of increasing  is that FastLDA needs to visit and compute more topics before drawing a sample.", "rank": 222, "start": 26664, "IsComparative": "1", "id": "st_222"}, {"end": 26938, "text": "Conversely, setting  to a low value further concentrates the topic probabilities, and produces more than an 18 speedup on the NIPS corpus using K = 800 topics.", "rank": 223, "start": 26779, "IsComparative": "1", "id": "st_223"}]}, {"paragraph_info": {"end": 26957, "start": 26938, "text": "6.4 Choice of Bound", "rank": 60, "paragraph_comparative_number": 0, "entities": [], "id": "p_60"}, "sentences": [{"end": 26957, "text": "6.4 Choice of Bound", "rank": 224, "start": 26938, "IsComparative": "0", "id": "st_224"}]}, {"paragraph_info": {"end": 27311, "start": 26957, "text": "We experimented with two different bounds for Z, corresponding to particular choices of p, q and r in Holders inequality.The first was setting p = q = 2 and r = , i.e. using mink Nk.We also used the symmetric setting of p = q = r = 3.In all comparisons so far we found the p = q = r = 3 setting resulted in slower execution times than p = q = 2 and r = .", "rank": 61, "paragraph_comparative_number": 2, "entities": [], "id": "p_61"}, "sentences": [{"end": 27078, "text": "We experimented with two different bounds for Z, corresponding to particular choices of p, q and r in Holders inequality.", "rank": 225, "start": 26957, "IsComparative": "0", "id": "st_225"}, {"end": 27139, "text": "The first was setting p = q = 2 and r = , i.e. using mink Nk.", "rank": 226, "start": 27078, "IsComparative": "0", "id": "st_226"}, {"end": 27191, "text": "We also used the symmetric setting of p = q = r = 3.", "rank": 227, "start": 27139, "IsComparative": "1", "id": "st_227"}, {"end": 27311, "text": "In all comparisons so far we found the p = q = r = 3 setting resulted in slower execution times than p = q = 2 and r = .", "rank": 228, "start": 27191, "IsComparative": "1", "id": "st_228"}]}, {"paragraph_info": {"end": 27945, "start": 27311, "text": "Figure 10 shows given two choices for p, q, r, how quickly the bound Zk converges to Z as a function of the number of topics evaluated.This plot shows the average ratio Zk/Z for the kth topic evaluated before drawing a sample.The faster Zk/Z converges to 1, the fewer calculations are needed on average.Using the NIPS data set, four runs are compared using the two different choices of p, q, r and K = 400 versus K = 4000 topics.Here as well, we see that the bound produced by p = q = r = 3 tends to give much higher ratios on average, forcing the algorithm to evaluate many topics before the probabilities approach their true values.", "rank": 62, "paragraph_comparative_number": 2, "entities": [], "id": "p_62"}, "sentences": [{"end": 27446, "text": "Figure 10 shows given two choices for p, q, r, how quickly the bound Zk converges to Z as a function of the number of topics evaluated.", "rank": 229, "start": 27311, "IsComparative": "1", "id": "st_229"}, {"end": 27537, "text": "This plot shows the average ratio Zk/Z for the kth topic evaluated before drawing a sample.", "rank": 230, "start": 27446, "IsComparative": "0", "id": "st_230"}, {"end": 27614, "text": "The faster Zk/Z converges to 1, the fewer calculations are needed on average.", "rank": 231, "start": 27537, "IsComparative": "0", "id": "st_231"}, {"end": 27740, "text": "Using the NIPS data set, four runs are compared using the two different choices of p, q, r and K = 400 versus K = 4000 topics.", "rank": 232, "start": 27614, "IsComparative": "0", "id": "st_232"}, {"end": 27945, "text": "Here as well, we see that the bound produced by p = q = r = 3 tends to give much higher ratios on average, forcing the algorithm to evaluate many topics before the probabilities approach their true values.", "rank": 233, "start": 27740, "IsComparative": "1", "id": "st_233"}]}, {"paragraph_info": {"end": 27958, "start": 27945, "text": "7.CONCLUSIONS", "rank": 63, "paragraph_comparative_number": 2, "entities": [], "id": "p_63"}, "sentences": [{"end": 27947, "text": "7.", "rank": 234, "start": 27945, "IsComparative": "1", "id": "st_234"}, {"end": 27958, "text": "CONCLUSIONS", "rank": 235, "start": 27947, "IsComparative": "1", "id": "st_235"}]}, {"paragraph_info": {"end": 28407, "start": 27958, "text": "Topic modeling of text collections is rapidly gaining importance for a wide variety of applications including information retrieval and automatic subject indexing.Among these, Latent Dirichlet Allocation and Gibbs sampling are perhaps the most widely used model and inference algorithm.However, as the size of both the individual documents and the total corpus grows, it becomes increasingly important to be as computationally efficient as possible.", "rank": 64, "paragraph_comparative_number": 1, "entities": [], "id": "p_64"}, "sentences": [{"end": 28121, "text": "Topic modeling of text collections is rapidly gaining importance for a wide variety of applications including information retrieval and automatic subject indexing.", "rank": 236, "start": 27958, "IsComparative": "0", "id": "st_236"}, {"end": 28244, "text": "Among these, Latent Dirichlet Allocation and Gibbs sampling are perhaps the most widely used model and inference algorithm.", "rank": 237, "start": 28121, "IsComparative": "0", "id": "st_237"}, {"end": 28407, "text": "However, as the size of both the individual documents and the total corpus grows, it becomes increasingly important to be as computationally efficient as possible.", "rank": 238, "start": 28244, "IsComparative": "1", "id": "st_238"}]}, {"paragraph_info": {"end": 29038, "start": 28407, "text": "In this paper, we have described a method for increasing the speed of LDA Gibbs sampling while providing exactly equivalent samples, thus retaining all the optimality guarantees associated with the original LDA algorithm.By organizing the computations in a better way, and constructing an adaptive upper bound on the true normalization constant, we can take advantage of the sparse and predictable nature of the topic association probabilities.This ensures both rapid improvement of the adaptive bound and that high-probability topics are visited early, allowing the sampling process to stop as soon as the sample value is located.", "rank": 65, "paragraph_comparative_number": 1, "entities": [], "id": "p_65"}, "sentences": [{"end": 28628, "text": "In this paper, we have described a method for increasing the speed of LDA Gibbs sampling while providing exactly equivalent samples, thus retaining all the optimality guarantees associated with the original LDA algorithm.", "rank": 239, "start": 28407, "IsComparative": "0", "id": "st_239"}, {"end": 28851, "text": "By organizing the computations in a better way, and constructing an adaptive upper bound on the true normalization constant, we can take advantage of the sparse and predictable nature of the topic association probabilities.", "rank": 240, "start": 28628, "IsComparative": "1", "id": "st_240"}, {"end": 29038, "text": "This ensures both rapid improvement of the adaptive bound and that high-probability topics are visited early, allowing the sampling process to stop as soon as the sample value is located.", "rank": 241, "start": 28851, "IsComparative": "0", "id": "st_241"}]}, {"paragraph_info": {"end": 29946, "start": 29038, "text": "We find that this process gives a 38 factor of improvement in speed, with this factor increasing with greater numbers of topics.These speed-ups are in addition to improvements gained through other means (such as the parallelization technique of Newman et al.<14>), and can be used in conjunction to make topic modeling of extremely large corpora practical.The general method we describe, to avoid having to consider all possibilities when sampling from a discrete distribution, should be applicable to other models as well.In particular we expect the method to work well for other varieties of topic model, such as the Hierarchical Dirichlet Process <18> and Pachinko allocation <11>, which have a sampling step similar to LDA.However, how to maintain an efficient upper bound for Z, the accuracy of the bound, and an efficientto maintain ordering in which to consider topics, remain model specific problems.", "rank": 66, "paragraph_comparative_number": 1, "entities": [], "id": "p_66"}, "sentences": [{"end": 29166, "text": "We find that this process gives a 38 factor of improvement in speed, with this factor increasing with greater numbers of topics.", "rank": 242, "start": 29038, "IsComparative": "0", "id": "st_242"}, {"end": 29296, "text": "These speed-ups are in addition to improvements gained through other means (such as the parallelization technique of Newman et al.", "rank": 243, "start": 29166, "IsComparative": "0", "id": "st_243"}, {"end": 29394, "text": "<14>), and can be used in conjunction to make topic modeling of extremely large corpora practical.", "rank": 244, "start": 29296, "IsComparative": "0", "id": "st_244"}, {"end": 29561, "text": "The general method we describe, to avoid having to consider all possibilities when sampling from a discrete distribution, should be applicable to other models as well.", "rank": 245, "start": 29394, "IsComparative": "0", "id": "st_245"}, {"end": 29765, "text": "In particular we expect the method to work well for other varieties of topic model, such as the Hierarchical Dirichlet Process <18> and Pachinko allocation <11>, which have a sampling step similar to LDA.", "rank": 246, "start": 29561, "IsComparative": "0", "id": "st_246"}, {"end": 29946, "text": "However, how to maintain an efficient upper bound for Z, the accuracy of the bound, and an efficientto maintain ordering in which to consider topics, remain model specific problems.", "rank": 247, "start": 29765, "IsComparative": "1", "id": "st_247"}]}, {"paragraph_info": {"end": 30227, "start": 29946, "text": "Additionally, our boundandrefine algorithm used one particular class of bounds based on Holders inequality, and a refinement schedule based on the document statistics.Whether other choices of bounds or schedules could further improve the performance of FastLDA is an open question.", "rank": 67, "paragraph_comparative_number": 1, "entities": [], "id": "p_67"}, "sentences": [{"end": 30113, "text": "Additionally, our boundandrefine algorithm used one particular class of bounds based on Holders inequality, and a refinement schedule based on the document statistics.", "rank": 248, "start": 29946, "IsComparative": "1", "id": "st_248"}, {"end": 30227, "text": "Whether other choices of bounds or schedules could further improve the performance of FastLDA is an open question.", "rank": 249, "start": 30113, "IsComparative": "0", "id": "st_249"}]}]}