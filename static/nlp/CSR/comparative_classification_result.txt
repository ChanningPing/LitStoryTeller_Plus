/System/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7 /Users/qingping/PycharmProjects/TextGistGraph/TextGistGraph.py
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
sucessfully read the dict:
[[['JJ_improv'], 1, 1, 1.0, '1', 1], [['JJ_improv', 'NN'], 1, 1, 1.0, '1', 2], [['JJ_improv', 'NN', 'NN'], 1, 1, 1.0, '1', 3], [['JJ_improv', 'NN', 'IN'], 1, 1, 1.0, '1', 4], [['JJ_improv', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 5], [['JJ_improv', 'IN'], 1, 1, 1.0, '1', 6], [['JJ_improv', 'IN', 'NN'], 1, 1, 1.0, '1', 7], [['JJR_larger'], 1, 1, 1.0, '0', 8], [['JJR_larger', 'NNS'], 1, 1, 1.0, '0', 9], [['JJR_larger', 'NNS', 'NNS'], 1, 1, 1.0, '0', 10], [['JJR_larger', 'NNS', 'NNS', 'CD'], 1, 1, 1.0, '0', 11], [['JJR_larger', 'NNS', 'CD'], 1, 1, 1.0, '0', 12], [['JJR_larger', 'CD'], 1, 1, 1.0, '0', 13], [['VBG'], 3, 3, 1.0, '1', 14], [['VBG', 'RB_well'], 1, 1, 1.0, '1', 15], [['VBG', 'RB_well', 'NN'], 1, 1, 1.0, '1', 16], [['VBG', 'RB_well', 'IN'], 1, 1, 1.0, '1', 17], [['VBG', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 18], [['VBG', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 19], [['VBG', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 20], [['VBG', 'NNS'], 2, 2, 1.0, '1', 21], [['VBG', 'NNS', 'RB_well'], 1, 1, 1.0, '1', 22], [['VBG', 'NNS', 'RB_well', 'NN'], 1, 1, 1.0, '1', 23], [['VBG', 'NNS', 'RB_well', 'IN'], 1, 1, 1.0, '1', 24], [['VBG', 'NNS', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 25], [['VBG', 'NNS', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 26], [['VBG', 'NNS', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 27], [['VBG', 'NNS', 'NN'], 1, 1, 1.0, '1', 28], [['VBG', 'NNS', 'RB'], 1, 1, 1.0, '1', 29], [['VBG', 'NNS', 'RB', 'RB_well'], 1, 1, 1.0, '1', 30], [['VBG', 'NNS', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 31], [['VBG', 'NNS', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '1', 32], [['VBG', 'NNS', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 33], [['VBG', 'NNS', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 34], [['VBG', 'NNS', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 35], [['VBG', 'NNS', 'RB', 'NN'], 1, 1, 1.0, '1', 36], [['VBG', 'NNS', 'RB', 'IN'], 1, 1, 1.0, '1', 37], [['VBG', 'NNS', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 38], [['VBG', 'NNS', 'RB', 'IN', 'IN'], 1, 1, 1.0, '1', 39], [['VBG', 'NNS', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 40], [['VBG', 'NNS', 'IN'], 1, 1, 1.0, '1', 41], [['VBG', 'NNS', 'IN', 'NN'], 1, 1, 1.0, '1', 42], [['VBG', 'NNS', 'IN', 'IN'], 1, 1, 1.0, '1', 43], [['VBG', 'NNS', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 44], [['VBG', 'NN'], 1, 1, 1.0, '1', 45], [['VBG', 'RB'], 1, 1, 1.0, '1', 46], [['VBG', 'RB', 'RB_well'], 1, 1, 1.0, '1', 47], [['VBG', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 48], [['VBG', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '1', 49], [['VBG', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 50], [['VBG', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 51], [['VBG', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 52], [['VBG', 'RB', 'NN'], 1, 1, 1.0, '1', 53], [['VBG', 'RB', 'IN'], 1, 1, 1.0, '1', 54], [['VBG', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 55], [['VBG', 'RB', 'IN', 'IN'], 1, 1, 1.0, '1', 56], [['VBG', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 57], [['VBG', 'IN'], 1, 1, 1.0, '1', 58], [['VBG', 'IN', 'NN'], 1, 1, 1.0, '1', 59], [['VBG', 'IN', 'IN'], 1, 1, 1.0, '1', 60], [['VBG', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 61], [['JJR_better'], 2, 2, 1.0, '1', 62], [['JJR_better', 'MD'], 1, 1, 1.0, '1', 63], [['JJR_better', 'MD', 'VB'], 1, 1, 1.0, '1', 64], [['JJR_better', 'VB'], 1, 1, 1.0, '1', 65], [['JJR_better', 'JJS'], 1, 1, 1.0, '1', 66], [['JJR_better', 'IN'], 1, 1, 1.0, '1', 67], [['JJR_better', 'IN', 'DT'], 1, 1, 1.0, '1', 68], [['JJR_better', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 69], [['JJR_better', 'IN', 'JJS'], 1, 1, 1.0, '1', 70], [['JJR_better', 'DT'], 1, 1, 1.0, '1', 71], [['JJR_better', 'DT', 'JJS'], 1, 1, 1.0, '1', 72], [['JJR_better', 'NNS'], 1, 1, 1.0, '1', 73], [['JJR_better', 'NNS', 'MD'], 1, 1, 1.0, '1', 74], [['JJR_better', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 75], [['JJR_better', 'NNS', 'VB'], 1, 1, 1.0, '1', 76], [['NNS_gain'], 2, 2, 1.0, '1', 77], [['NNS_gain', 'VBP'], 1, 1, 1.0, '1', 78], [['NNS_gain', 'VBP', 'VBN'], 1, 1, 1.0, '1', 79], [['NNS_gain', 'VBP', 'VBN', 'VBN'], 1, 1, 1.0, '1', 80], [['NNS_gain', 'VBN'], 1, 1, 1.0, '1', 81], [['NNS_gain', 'VBN', 'VBN'], 1, 1, 1.0, '1', 82], [['NNS_gain', 'NN'], 1, 1, 1.0, '1', 83], [['NNS_gain', 'JJ'], 1, 1, 1.0, '1', 84], [['NNS_gain', 'JJ', 'NN'], 1, 1, 1.0, '1', 85], [['NNS_gain', 'IN'], 1, 1, 1.0, '1', 86], [['NNS_gain', 'IN', 'NN'], 1, 1, 1.0, '1', 87], [['NNS_gain', 'IN', 'JJ'], 1, 1, 1.0, '1', 88], [['NNS_gain', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 89], [['VBN'], 11, 7, 0.6363636363636364, '1', 90], [['VBN', 'JJ_improv'], 1, 1, 1.0, '1', 91], [['VBN', 'JJ_improv', 'NN'], 1, 1, 1.0, '1', 92], [['VBN', 'JJ_improv', 'NN', 'NN'], 1, 1, 1.0, '1', 93], [['VBN', 'JJ_improv', 'NN', 'IN'], 1, 1, 1.0, '1', 94], [['VBN', 'JJ_improv', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 95], [['VBN', 'JJ_improv', 'IN'], 1, 1, 1.0, '1', 96], [['VBN', 'JJ_improv', 'IN', 'NN'], 1, 1, 1.0, '1', 97], [['VBN', 'VB'], 1, 1, 1.0, '1', 98], [['VBN', 'VB', 'JJ_advantag'], 1, 1, 1.0, '1', 99], [['VBN', 'JJ'], 1, 1, 1.0, '1', 100], [['VBN', 'JJ_advantag'], 1, 1, 1.0, '1', 101], [['VBN', 'VBD'], 1, 1, 1.0, '1', 102], [['VBN', 'VBD', 'JJR_better'], 1, 1, 1.0, '1', 103], [['VBN', 'VBD', 'JJR_better', 'DT'], 1, 1, 1.0, '1', 104], [['VBN', 'VBD', 'JJR_better', 'DT', 'JJS'], 1, 1, 1.0, '1', 105], [['VBN', 'VBD', 'JJR_better', 'JJS'], 1, 1, 1.0, '1', 106], [['VBN', 'VBD', 'JJR_better', 'IN'], 1, 1, 1.0, '1', 107], [['VBN', 'VBD', 'JJR_better', 'IN', 'DT'], 1, 1, 1.0, '1', 108], [['VBN', 'VBD', 'JJR_better', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 109], [['VBN', 'VBD', 'JJR_better', 'IN', 'JJS'], 1, 1, 1.0, '1', 110], [['VBN', 'VBD', 'DT'], 1, 1, 1.0, '1', 111], [['VBN', 'VBD', 'DT', 'JJS'], 1, 1, 1.0, '1', 112], [['VBN', 'VBD', 'JJS'], 1, 1, 1.0, '1', 113], [['VBN', 'VBD', 'IN'], 1, 1, 1.0, '1', 114], [['VBN', 'VBD', 'IN', 'DT'], 1, 1, 1.0, '1', 115], [['VBN', 'VBD', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 116], [['VBN', 'VBD', 'IN', 'JJS'], 1, 1, 1.0, '1', 117], [['VBN', 'DT_all'], 1, 1, 1.0, '1', 118], [['VBN', 'DT_all', 'NNS'], 1, 1, 1.0, '1', 119], [['VBN', 'DT_all', 'NNS', 'NNS'], 1, 1, 1.0, '1', 120], [['VBN', 'DT_all', 'CD'], 1, 1, 1.0, '1', 121], [['VBN', 'DT_all', 'CD', 'NNS'], 1, 1, 1.0, '1', 122], [['VBN', 'DT_all', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 123], [['VBN', 'JJS'], 1, 1, 1.0, '1', 124], [['VBN', 'VBN'], 2, 2, 1.0, '1', 125], [['VBN', 'VBN', 'DT_all'], 1, 1, 1.0, '1', 126], [['VBN', 'VBN', 'DT_all', 'NNS'], 1, 1, 1.0, '1', 127], [['VBN', 'VBN', 'DT_all', 'NNS', 'NNS'], 1, 1, 1.0, '1', 128], [['VBN', 'VBN', 'DT_all', 'CD'], 1, 1, 1.0, '1', 129], [['VBN', 'VBN', 'DT_all', 'CD', 'NNS'], 1, 1, 1.0, '1', 130], [['VBN', 'VBN', 'DT_all', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 131], [['VBN', 'VBN', 'CD'], 1, 1, 1.0, '1', 132], [['VBN', 'VBN', 'CD', 'NNS'], 1, 1, 1.0, '1', 133], [['VBN', 'VBN', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 134], [['VBN', 'VBN', 'NNS'], 1, 1, 1.0, '1', 135], [['VBN', 'VBN', 'NNS', 'NNS'], 1, 1, 1.0, '1', 136], [['VBN', 'VBN', 'IN'], 1, 1, 1.0, '1', 137], [['VBN', 'VBN', 'IN', 'DT_all'], 1, 1, 1.0, '1', 138], [['VBN', 'VBN', 'IN', 'DT_all', 'NNS'], 1, 1, 1.0, '1', 139], [['VBN', 'VBN', 'IN', 'DT_all', 'NNS', 'NNS'], 1, 1, 1.0, '1', 140], [['VBN', 'VBN', 'IN', 'DT_all', 'CD'], 1, 1, 1.0, '1', 141], [['VBN', 'VBN', 'IN', 'DT_all', 'CD', 'NNS'], 1, 1, 1.0, '1', 142], [['VBN', 'VBN', 'IN', 'DT_all', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 143], [['VBN', 'VBN', 'IN', 'NNS'], 1, 1, 1.0, '1', 144], [['VBN', 'VBN', 'IN', 'NNS', 'NNS'], 1, 1, 1.0, '1', 145], [['VBN', 'VBN', 'IN', 'CD'], 1, 1, 1.0, '1', 146], [['VBN', 'VBN', 'IN', 'CD', 'NNS'], 1, 1, 1.0, '1', 147], [['VBN', 'VBN', 'IN', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 148], [['VBN', 'CD'], 1, 1, 1.0, '1', 149], [['VBN', 'CD', 'NNS'], 1, 1, 1.0, '1', 150], [['VBN', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 151], [['VBN', 'TO'], 1, 1, 1.0, '1', 152], [['VBN', 'TO', 'VB'], 1, 1, 1.0, '1', 153], [['VBN', 'TO', 'VB', 'JJ_advantag'], 1, 1, 1.0, '1', 154], [['VBN', 'TO', 'JJ_advantag'], 1, 1, 1.0, '1', 155], [['VBN', 'NN'], 3, 2, 0.6666666666666666, '1', 156], [['VBN', 'NN', 'JJR_better'], 1, 1, 1.0, '1', 157], [['VBN', 'NN', 'JJR_better', 'DT'], 1, 1, 1.0, '1', 158], [['VBN', 'NN', 'JJR_better', 'DT', 'JJS'], 1, 1, 1.0, '1', 159], [['VBN', 'NN', 'JJR_better', 'JJS'], 1, 1, 1.0, '1', 160], [['VBN', 'NN', 'JJR_better', 'IN'], 1, 1, 1.0, '1', 161], [['VBN', 'NN', 'JJR_better', 'IN', 'DT'], 1, 1, 1.0, '1', 162], [['VBN', 'NN', 'JJR_better', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 163], [['VBN', 'NN', 'JJR_better', 'IN', 'JJS'], 1, 1, 1.0, '1', 164], [['VBN', 'NN', 'NN'], 1, 1, 1.0, '1', 165], [['VBN', 'NN', 'VBD'], 1, 1, 1.0, '1', 166], [['VBN', 'NN', 'VBD', 'JJR_better'], 1, 1, 1.0, '1', 167], [['VBN', 'NN', 'VBD', 'JJR_better', 'DT'], 1, 1, 1.0, '1', 168], [['VBN', 'NN', 'VBD', 'JJR_better', 'DT', 'JJS'], 1, 1, 1.0, '1', 169], [['VBN', 'NN', 'VBD', 'JJR_better', 'JJS'], 1, 1, 1.0, '1', 170], [['VBN', 'NN', 'VBD', 'JJR_better', 'IN'], 1, 1, 1.0, '1', 171], [['VBN', 'NN', 'VBD', 'JJR_better', 'IN', 'DT'], 1, 1, 1.0, '1', 172], [['VBN', 'NN', 'VBD', 'JJR_better', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 173], [['VBN', 'NN', 'VBD', 'JJR_better', 'IN', 'JJS'], 1, 1, 1.0, '1', 174], [['VBN', 'NN', 'VBD', 'DT'], 1, 1, 1.0, '1', 175], [['VBN', 'NN', 'VBD', 'DT', 'JJS'], 1, 1, 1.0, '1', 176], [['VBN', 'NN', 'VBD', 'JJS'], 1, 1, 1.0, '1', 177], [['VBN', 'NN', 'VBD', 'IN'], 1, 1, 1.0, '1', 178], [['VBN', 'NN', 'VBD', 'IN', 'DT'], 1, 1, 1.0, '1', 179], [['VBN', 'NN', 'VBD', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 180], [['VBN', 'NN', 'VBD', 'IN', 'JJS'], 1, 1, 1.0, '1', 181], [['VBN', 'NN', 'JJS'], 1, 1, 1.0, '1', 182], [['VBN', 'NN', 'IN'], 2, 2, 1.0, '1', 183], [['VBN', 'NN', 'IN', 'DT'], 1, 1, 1.0, '1', 184], [['VBN', 'NN', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 185], [['VBN', 'NN', 'IN', 'JJS'], 1, 1, 1.0, '1', 186], [['VBN', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 187], [['VBN', 'NN', 'DT'], 1, 1, 1.0, '1', 188], [['VBN', 'NN', 'DT', 'JJS'], 1, 1, 1.0, '1', 189], [['VBN', 'JJR_better'], 1, 1, 1.0, '1', 190], [['VBN', 'JJR_better', 'DT'], 1, 1, 1.0, '1', 191], [['VBN', 'JJR_better', 'DT', 'JJS'], 1, 1, 1.0, '1', 192], [['VBN', 'JJR_better', 'JJS'], 1, 1, 1.0, '1', 193], [['VBN', 'JJR_better', 'IN'], 1, 1, 1.0, '1', 194], [['VBN', 'JJR_better', 'IN', 'DT'], 1, 1, 1.0, '1', 195], [['VBN', 'JJR_better', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 196], [['VBN', 'JJR_better', 'IN', 'JJS'], 1, 1, 1.0, '1', 197], [['VBN', 'RB'], 1, 1, 1.0, '1', 198], [['VBN', 'RB', 'DT'], 1, 1, 1.0, '1', 199], [['VBN', 'RB', 'DT', 'JJ'], 1, 1, 1.0, '1', 200], [['VBN', 'RB', 'IN'], 1, 1, 1.0, '1', 201], [['VBN', 'RB', 'IN', 'DT'], 1, 1, 1.0, '1', 202], [['VBN', 'RB', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 203], [['VBN', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '1', 204], [['VBN', 'RB', 'JJ'], 1, 1, 1.0, '1', 205], [['VBN', 'RB', 'VBN_compar'], 1, 1, 1.0, '1', 206], [['VBN', 'RB', 'VBN_compar', 'DT'], 1, 1, 1.0, '1', 207], [['VBN', 'RB', 'VBN_compar', 'DT', 'JJ'], 1, 1, 1.0, '1', 208], [['VBN', 'RB', 'VBN_compar', 'JJ'], 1, 1, 1.0, '1', 209], [['VBN', 'RB', 'VBN_compar', 'IN'], 1, 1, 1.0, '1', 210], [['VBN', 'RB', 'VBN_compar', 'IN', 'DT'], 1, 1, 1.0, '1', 211], [['VBN', 'RB', 'VBN_compar', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 212], [['VBN', 'RB', 'VBN_compar', 'IN', 'JJ'], 1, 1, 1.0, '1', 213], [['VBN', 'IN'], 7, 5, 0.7142857142857143, '1', 214], [['VBN', 'IN', 'JJ_improv'], 1, 1, 1.0, '1', 215], [['VBN', 'IN', 'JJ_improv', 'NN'], 1, 1, 1.0, '1', 216], [['VBN', 'IN', 'JJ_improv', 'NN', 'NN'], 1, 1, 1.0, '1', 217], [['VBN', 'IN', 'JJ_improv', 'NN', 'IN'], 1, 1, 1.0, '1', 218], [['VBN', 'IN', 'JJ_improv', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 219], [['VBN', 'IN', 'JJ_improv', 'IN'], 1, 1, 1.0, '1', 220], [['VBN', 'IN', 'JJ_improv', 'IN', 'NN'], 1, 1, 1.0, '1', 221], [['VBN', 'IN', 'NN'], 1, 1, 1.0, '1', 222], [['VBN', 'IN', 'NN', 'NN'], 1, 1, 1.0, '1', 223], [['VBN', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 224], [['VBN', 'IN', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 225], [['VBN', 'IN', 'DT_all'], 1, 1, 1.0, '1', 226], [['VBN', 'IN', 'DT_all', 'NNS'], 1, 1, 1.0, '1', 227], [['VBN', 'IN', 'DT_all', 'NNS', 'NNS'], 1, 1, 1.0, '1', 228], [['VBN', 'IN', 'DT_all', 'CD'], 1, 1, 1.0, '1', 229], [['VBN', 'IN', 'DT_all', 'CD', 'NNS'], 1, 1, 1.0, '1', 230], [['VBN', 'IN', 'DT_all', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 231], [['VBN', 'IN', 'JJS'], 1, 1, 1.0, '1', 232], [['VBN', 'IN', 'CD'], 1, 1, 1.0, '1', 233], [['VBN', 'IN', 'CD', 'NNS'], 1, 1, 1.0, '1', 234], [['VBN', 'IN', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 235], [['VBN', 'IN', 'JJ'], 1, 1, 1.0, '1', 236], [['VBN', 'IN', 'IN'], 1, 1, 1.0, '1', 237], [['VBN', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 238], [['VBN', 'IN', 'DT'], 3, 3, 1.0, '1', 239], [['VBN', 'IN', 'DT', 'JJ_improv'], 1, 1, 1.0, '1', 240], [['VBN', 'IN', 'DT', 'JJ_improv', 'NN'], 1, 1, 1.0, '1', 241], [['VBN', 'IN', 'DT', 'JJ_improv', 'NN', 'NN'], 1, 1, 1.0, '1', 242], [['VBN', 'IN', 'DT', 'JJ_improv', 'NN', 'IN'], 1, 1, 1.0, '1', 243], [['VBN', 'IN', 'DT', 'JJ_improv', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 244], [['VBN', 'IN', 'DT', 'JJ_improv', 'IN'], 1, 1, 1.0, '1', 245], [['VBN', 'IN', 'DT', 'JJ_improv', 'IN', 'NN'], 1, 1, 1.0, '1', 246], [['VBN', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 247], [['VBN', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 248], [['VBN', 'IN', 'DT', 'NN', 'NN'], 1, 1, 1.0, '1', 249], [['VBN', 'IN', 'DT', 'NN', 'IN'], 1, 1, 1.0, '1', 250], [['VBN', 'IN', 'DT', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 251], [['VBN', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 252], [['VBN', 'IN', 'DT', 'IN'], 1, 1, 1.0, '1', 253], [['VBN', 'IN', 'DT', 'IN', 'NN'], 1, 1, 1.0, '1', 254], [['VBN', 'IN', 'NNS'], 1, 1, 1.0, '1', 255], [['VBN', 'IN', 'NNS', 'NNS'], 1, 1, 1.0, '1', 256], [['VBN', 'DT'], 3, 3, 1.0, '1', 257], [['VBN', 'DT', 'JJ_improv'], 1, 1, 1.0, '1', 258], [['VBN', 'DT', 'JJ_improv', 'NN'], 1, 1, 1.0, '1', 259], [['VBN', 'DT', 'JJ_improv', 'NN', 'NN'], 1, 1, 1.0, '1', 260], [['VBN', 'DT', 'JJ_improv', 'NN', 'IN'], 1, 1, 1.0, '1', 261], [['VBN', 'DT', 'JJ_improv', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 262], [['VBN', 'DT', 'JJ_improv', 'IN'], 1, 1, 1.0, '1', 263], [['VBN', 'DT', 'JJ_improv', 'IN', 'NN'], 1, 1, 1.0, '1', 264], [['VBN', 'DT', 'JJS'], 1, 1, 1.0, '1', 265], [['VBN', 'DT', 'NN'], 1, 1, 1.0, '1', 266], [['VBN', 'DT', 'NN', 'NN'], 1, 1, 1.0, '1', 267], [['VBN', 'DT', 'NN', 'IN'], 1, 1, 1.0, '1', 268], [['VBN', 'DT', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 269], [['VBN', 'DT', 'JJ'], 1, 1, 1.0, '1', 270], [['VBN', 'DT', 'IN'], 1, 1, 1.0, '1', 271], [['VBN', 'DT', 'IN', 'NN'], 1, 1, 1.0, '1', 272], [['VBN', 'NNS'], 1, 1, 1.0, '1', 273], [['VBN', 'NNS', 'NNS'], 1, 1, 1.0, '1', 274], [['VBN', 'VBN_compar'], 1, 1, 1.0, '1', 275], [['VBN', 'VBN_compar', 'DT'], 1, 1, 1.0, '1', 276], [['VBN', 'VBN_compar', 'DT', 'JJ'], 1, 1, 1.0, '1', 277], [['VBN', 'VBN_compar', 'JJ'], 1, 1, 1.0, '1', 278], [['VBN', 'VBN_compar', 'IN'], 1, 1, 1.0, '1', 279], [['VBN', 'VBN_compar', 'IN', 'DT'], 1, 1, 1.0, '1', 280], [['VBN', 'VBN_compar', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 281], [['VBN', 'VBN_compar', 'IN', 'JJ'], 1, 1, 1.0, '1', 282], [['VBP'], 9, 6, 0.6666666666666666, '1', 283], [['VBP', 'JJR_better'], 1, 1, 1.0, '1', 284], [['VBP', 'JJR_better', 'MD'], 1, 1, 1.0, '1', 285], [['VBP', 'JJR_better', 'MD', 'VB'], 1, 1, 1.0, '1', 286], [['VBP', 'JJR_better', 'VB'], 1, 1, 1.0, '1', 287], [['VBP', 'JJR_better', 'NNS'], 1, 1, 1.0, '1', 288], [['VBP', 'JJR_better', 'NNS', 'MD'], 1, 1, 1.0, '1', 289], [['VBP', 'JJR_better', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 290], [['VBP', 'JJR_better', 'NNS', 'VB'], 1, 1, 1.0, '1', 291], [['VBP', 'VB'], 1, 1, 1.0, '1', 292], [['VBP', 'JJ'], 1, 1, 1.0, '1', 293], [['VBP', 'JJ', 'NNS_gain'], 1, 1, 1.0, '1', 294], [['VBP', 'JJ', 'NNS_gain', 'NN'], 1, 1, 1.0, '1', 295], [['VBP', 'JJ', 'NNS_gain', 'JJ'], 1, 1, 1.0, '1', 296], [['VBP', 'JJ', 'NNS_gain', 'JJ', 'NN'], 1, 1, 1.0, '1', 297], [['VBP', 'JJ', 'NNS_gain', 'IN'], 1, 1, 1.0, '1', 298], [['VBP', 'JJ', 'NNS_gain', 'IN', 'NN'], 1, 1, 1.0, '1', 299], [['VBP', 'JJ', 'NNS_gain', 'IN', 'JJ'], 1, 1, 1.0, '1', 300], [['VBP', 'JJ', 'NNS_gain', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 301], [['VBP', 'JJ', 'JJ'], 1, 1, 1.0, '1', 302], [['VBP', 'JJ', 'JJ', 'NN'], 1, 1, 1.0, '1', 303], [['VBP', 'JJ', 'NN'], 1, 1, 1.0, '1', 304], [['VBP', 'JJ', 'NN', 'NNS_gain'], 1, 1, 1.0, '1', 305], [['VBP', 'JJ', 'NN', 'NNS_gain', 'NN'], 1, 1, 1.0, '1', 306], [['VBP', 'JJ', 'NN', 'NNS_gain', 'JJ'], 1, 1, 1.0, '1', 307], [['VBP', 'JJ', 'NN', 'NNS_gain', 'JJ', 'NN'], 1, 1, 1.0, '1', 308], [['VBP', 'JJ', 'NN', 'NNS_gain', 'IN'], 1, 1, 1.0, '1', 309], [['VBP', 'JJ', 'NN', 'NNS_gain', 'IN', 'NN'], 1, 1, 1.0, '1', 310], [['VBP', 'JJ', 'NN', 'NNS_gain', 'IN', 'JJ'], 1, 1, 1.0, '1', 311], [['VBP', 'JJ', 'NN', 'NNS_gain', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 312], [['VBP', 'JJ', 'NN', 'NN'], 1, 1, 1.0, '1', 313], [['VBP', 'JJ', 'NN', 'JJ'], 1, 1, 1.0, '1', 314], [['VBP', 'JJ', 'NN', 'JJ', 'NN'], 1, 1, 1.0, '1', 315], [['VBP', 'JJ', 'NN', 'IN'], 1, 1, 1.0, '1', 316], [['VBP', 'JJ', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 317], [['VBP', 'JJ', 'NN', 'IN', 'JJ'], 1, 1, 1.0, '1', 318], [['VBP', 'JJ', 'NN', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 319], [['VBP', 'JJ', 'IN'], 1, 1, 1.0, '1', 320], [['VBP', 'JJ', 'IN', 'NN'], 1, 1, 1.0, '1', 321], [['VBP', 'JJ', 'IN', 'JJ'], 1, 1, 1.0, '1', 322], [['VBP', 'JJ', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 323], [['VBP', 'NN'], 5, 3, 0.6, '1', 324], [['VBP', 'NN', 'JJ'], 1, 1, 1.0, '1', 325], [['VBP', 'NN', 'JJ', 'NN'], 1, 1, 1.0, '1', 326], [['VBP', 'NN', 'NN'], 2, 2, 1.0, '1', 327], [['VBP', 'NN', 'NNS_gain'], 1, 1, 1.0, '1', 328], [['VBP', 'NN', 'NNS_gain', 'NN'], 1, 1, 1.0, '1', 329], [['VBP', 'NN', 'NNS_gain', 'JJ'], 1, 1, 1.0, '1', 330], [['VBP', 'NN', 'NNS_gain', 'JJ', 'NN'], 1, 1, 1.0, '1', 331], [['VBP', 'NN', 'NNS_gain', 'IN'], 1, 1, 1.0, '1', 332], [['VBP', 'NN', 'NNS_gain', 'IN', 'NN'], 1, 1, 1.0, '1', 333], [['VBP', 'NN', 'NNS_gain', 'IN', 'JJ'], 1, 1, 1.0, '1', 334], [['VBP', 'NN', 'NNS_gain', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 335], [['VBP', 'NN', 'VBN'], 2, 2, 1.0, '0', 336], [['VBP', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 337], [['VBP', 'NN', 'RB'], 1, 1, 1.0, '1', 338], [['VBP', 'NN', 'RB', 'RB_well'], 1, 1, 1.0, '1', 339], [['VBP', 'NN', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 340], [['VBP', 'NN', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '1', 341], [['VBP', 'NN', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 342], [['VBP', 'NN', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 343], [['VBP', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 344], [['VBP', 'NN', 'RB', 'NN'], 1, 1, 1.0, '1', 345], [['VBP', 'NN', 'RB', 'IN'], 1, 1, 1.0, '1', 346], [['VBP', 'NN', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 347], [['VBP', 'NN', 'RB', 'IN', 'IN'], 1, 1, 1.0, '1', 348], [['VBP', 'NN', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 349], [['VBP', 'NN', 'IN'], 5, 3, 0.6, '1', 350], [['VBP', 'NN', 'IN', 'NN'], 2, 2, 1.0, '1', 351], [['VBP', 'NN', 'IN', 'JJ'], 1, 1, 1.0, '1', 352], [['VBP', 'NN', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 353], [['VBP', 'NN', 'IN', 'IN'], 1, 1, 1.0, '1', 354], [['VBP', 'NN', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 355], [['VBP', 'NN', 'RB_well'], 1, 1, 1.0, '1', 356], [['VBP', 'NN', 'RB_well', 'NN'], 1, 1, 1.0, '1', 357], [['VBP', 'NN', 'RB_well', 'IN'], 1, 1, 1.0, '1', 358], [['VBP', 'NN', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 359], [['VBP', 'NN', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 360], [['VBP', 'NN', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 361], [['VBP', 'MD'], 1, 1, 1.0, '1', 362], [['VBP', 'MD', 'VB'], 1, 1, 1.0, '1', 363], [['VBP', 'NNS_gain'], 1, 1, 1.0, '1', 364], [['VBP', 'NNS_gain', 'NN'], 1, 1, 1.0, '1', 365], [['VBP', 'NNS_gain', 'JJ'], 1, 1, 1.0, '1', 366], [['VBP', 'NNS_gain', 'JJ', 'NN'], 1, 1, 1.0, '1', 367], [['VBP', 'NNS_gain', 'IN'], 1, 1, 1.0, '1', 368], [['VBP', 'NNS_gain', 'IN', 'NN'], 1, 1, 1.0, '1', 369], [['VBP', 'NNS_gain', 'IN', 'JJ'], 1, 1, 1.0, '1', 370], [['VBP', 'NNS_gain', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 371], [['VBP', 'VBN'], 4, 3, 0.75, '0', 372], [['VBP', 'VBN', 'VBN'], 1, 1, 1.0, '1', 373], [['VBP', 'VBN', 'IN'], 2, 2, 1.0, '0', 374], [['VBP', 'NNS_advantag'], 2, 2, 1.0, '1', 375], [['VBP', 'NNS_advantag', 'NNS'], 1, 1, 1.0, '1', 376], [['VBP', 'NNS_advantag', 'NNS', 'IN'], 1, 1, 1.0, '1', 377], [['VBP', 'NNS_advantag', 'NN'], 1, 1, 1.0, '1', 378], [['VBP', 'NNS_advantag', 'NN', 'IN'], 1, 1, 1.0, '1', 379], [['VBP', 'NNS_advantag', 'IN'], 2, 2, 1.0, '1', 380], [['VBP', 'NNS_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 381], [['VBP', 'NNS_advantag', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 382], [['VBP', 'NNS_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 383], [['VBP', 'NNS_advantag', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 384], [['VBP', 'NNS_advantag', 'IN', 'IN'], 2, 2, 1.0, '1', 385], [['VBP', 'JJS_best'], 2, 2, 1.0, '0', 386], [['VBP', 'JJS_best', 'VBN'], 2, 2, 1.0, '0', 387], [['VBP', 'JJS_best', 'VBN', 'IN'], 2, 2, 1.0, '0', 388], [['VBP', 'JJS_best', 'NN'], 2, 2, 1.0, '0', 389], [['VBP', 'JJS_best', 'NN', 'VBN'], 2, 2, 1.0, '0', 390], [['VBP', 'JJS_best', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 391], [['VBP', 'JJS_best', 'NN', 'IN'], 2, 2, 1.0, '0', 392], [['VBP', 'JJS_best', 'IN'], 2, 2, 1.0, '0', 393], [['VBP', 'RB'], 2, 2, 1.0, '1', 394], [['VBP', 'RB', 'JJR_better'], 1, 1, 1.0, '1', 395], [['VBP', 'RB', 'JJR_better', 'MD'], 1, 1, 1.0, '1', 396], [['VBP', 'RB', 'JJR_better', 'MD', 'VB'], 1, 1, 1.0, '1', 397], [['VBP', 'RB', 'JJR_better', 'VB'], 1, 1, 1.0, '1', 398], [['VBP', 'RB', 'JJR_better', 'NNS'], 1, 1, 1.0, '1', 399], [['VBP', 'RB', 'JJR_better', 'NNS', 'MD'], 1, 1, 1.0, '1', 400], [['VBP', 'RB', 'JJR_better', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 401], [['VBP', 'RB', 'JJR_better', 'NNS', 'VB'], 1, 1, 1.0, '1', 402], [['VBP', 'RB', 'VB'], 1, 1, 1.0, '1', 403], [['VBP', 'RB', 'NN'], 1, 1, 1.0, '1', 404], [['VBP', 'RB', 'MD'], 1, 1, 1.0, '1', 405], [['VBP', 'RB', 'MD', 'VB'], 1, 1, 1.0, '1', 406], [['VBP', 'RB', 'IN'], 1, 1, 1.0, '1', 407], [['VBP', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 408], [['VBP', 'RB', 'IN', 'IN'], 1, 1, 1.0, '1', 409], [['VBP', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 410], [['VBP', 'RB', 'RB_well'], 1, 1, 1.0, '1', 411], [['VBP', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 412], [['VBP', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '1', 413], [['VBP', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 414], [['VBP', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 415], [['VBP', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 416], [['VBP', 'RB', 'NNS'], 1, 1, 1.0, '1', 417], [['VBP', 'RB', 'NNS', 'MD'], 1, 1, 1.0, '1', 418], [['VBP', 'RB', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 419], [['VBP', 'RB', 'NNS', 'VB'], 1, 1, 1.0, '1', 420], [['VBP', 'IN'], 7, 5, 0.7142857142857143, '1', 421], [['VBP', 'IN', 'JJR_better'], 1, 1, 1.0, '1', 422], [['VBP', 'IN', 'JJR_better', 'MD'], 1, 1, 1.0, '1', 423], [['VBP', 'IN', 'JJR_better', 'MD', 'VB'], 1, 1, 1.0, '1', 424], [['VBP', 'IN', 'JJR_better', 'VB'], 1, 1, 1.0, '1', 425], [['VBP', 'IN', 'JJR_better', 'NNS'], 1, 1, 1.0, '1', 426], [['VBP', 'IN', 'JJR_better', 'NNS', 'MD'], 1, 1, 1.0, '1', 427], [['VBP', 'IN', 'JJR_better', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 428], [['VBP', 'IN', 'JJR_better', 'NNS', 'VB'], 1, 1, 1.0, '1', 429], [['VBP', 'IN', 'VB'], 1, 1, 1.0, '1', 430], [['VBP', 'IN', 'JJ'], 1, 1, 1.0, '1', 431], [['VBP', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 432], [['VBP', 'IN', 'NN'], 3, 3, 1.0, '1', 433], [['VBP', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 434], [['VBP', 'IN', 'MD'], 1, 1, 1.0, '1', 435], [['VBP', 'IN', 'MD', 'VB'], 1, 1, 1.0, '1', 436], [['VBP', 'IN', 'RB'], 1, 1, 1.0, '1', 437], [['VBP', 'IN', 'RB', 'JJR_better'], 1, 1, 1.0, '1', 438], [['VBP', 'IN', 'RB', 'JJR_better', 'MD'], 1, 1, 1.0, '1', 439], [['VBP', 'IN', 'RB', 'JJR_better', 'MD', 'VB'], 1, 1, 1.0, '1', 440], [['VBP', 'IN', 'RB', 'JJR_better', 'VB'], 1, 1, 1.0, '1', 441], [['VBP', 'IN', 'RB', 'JJR_better', 'NNS'], 1, 1, 1.0, '1', 442], [['VBP', 'IN', 'RB', 'JJR_better', 'NNS', 'MD'], 1, 1, 1.0, '1', 443], [['VBP', 'IN', 'RB', 'JJR_better', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 444], [['VBP', 'IN', 'RB', 'JJR_better', 'NNS', 'VB'], 1, 1, 1.0, '1', 445], [['VBP', 'IN', 'RB', 'VB'], 1, 1, 1.0, '1', 446], [['VBP', 'IN', 'RB', 'NNS'], 1, 1, 1.0, '1', 447], [['VBP', 'IN', 'RB', 'NNS', 'MD'], 1, 1, 1.0, '1', 448], [['VBP', 'IN', 'RB', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 449], [['VBP', 'IN', 'RB', 'NNS', 'VB'], 1, 1, 1.0, '1', 450], [['VBP', 'IN', 'RB', 'MD'], 1, 1, 1.0, '1', 451], [['VBP', 'IN', 'RB', 'MD', 'VB'], 1, 1, 1.0, '1', 452], [['VBP', 'IN', 'IN'], 3, 3, 1.0, '1', 453], [['VBP', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 454], [['VBP', 'IN', 'NNS'], 2, 2, 1.0, '1', 455], [['VBP', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 456], [['VBP', 'IN', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 457], [['VBP', 'IN', 'NNS', 'VB'], 1, 1, 1.0, '1', 458], [['VBP', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 459], [['VBP', 'RB_well'], 1, 1, 1.0, '1', 460], [['VBP', 'RB_well', 'NN'], 1, 1, 1.0, '1', 461], [['VBP', 'RB_well', 'IN'], 1, 1, 1.0, '1', 462], [['VBP', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 463], [['VBP', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 464], [['VBP', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 465], [['VBP', 'DT'], 3, 2, 0.6666666666666666, '0', 466], [['VBP', 'DT', 'NNS_advantag'], 1, 1, 1.0, '1', 467], [['VBP', 'DT', 'NNS_advantag', 'NN'], 1, 1, 1.0, '1', 468], [['VBP', 'DT', 'NNS_advantag', 'NN', 'IN'], 1, 1, 1.0, '1', 469], [['VBP', 'DT', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 470], [['VBP', 'DT', 'NNS_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 471], [['VBP', 'DT', 'NNS_advantag', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 472], [['VBP', 'DT', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 473], [['VBP', 'DT', 'JJS_best'], 2, 2, 1.0, '0', 474], [['VBP', 'DT', 'JJS_best', 'VBN'], 2, 2, 1.0, '0', 475], [['VBP', 'DT', 'JJS_best', 'VBN', 'IN'], 2, 2, 1.0, '0', 476], [['VBP', 'DT', 'JJS_best', 'NN'], 2, 2, 1.0, '0', 477], [['VBP', 'DT', 'JJS_best', 'NN', 'VBN'], 2, 2, 1.0, '0', 478], [['VBP', 'DT', 'JJS_best', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 479], [['VBP', 'DT', 'JJS_best', 'NN', 'IN'], 2, 2, 1.0, '0', 480], [['VBP', 'DT', 'JJS_best', 'IN'], 2, 2, 1.0, '0', 481], [['VBP', 'DT', 'VBN'], 2, 2, 1.0, '0', 482], [['VBP', 'DT', 'VBN', 'IN'], 2, 2, 1.0, '0', 483], [['VBP', 'DT', 'NN'], 3, 2, 0.6666666666666666, '0', 484], [['VBP', 'DT', 'NN', 'VBN'], 2, 2, 1.0, '0', 485], [['VBP', 'DT', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 486], [['VBP', 'DT', 'NN', 'IN'], 3, 2, 0.6666666666666666, '0', 487], [['VBP', 'DT', 'IN'], 3, 2, 0.6666666666666666, '0', 488], [['VBP', 'DT', 'IN', 'NN'], 1, 1, 1.0, '1', 489], [['VBP', 'DT', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 490], [['VBP', 'DT', 'IN', 'IN'], 1, 1, 1.0, '1', 491], [['VBP', 'NNS'], 2, 2, 1.0, '1', 492], [['VBP', 'NNS', 'NNS_advantag'], 1, 1, 1.0, '1', 493], [['VBP', 'NNS', 'NNS_advantag', 'NNS'], 1, 1, 1.0, '1', 494], [['VBP', 'NNS', 'NNS_advantag', 'NNS', 'IN'], 1, 1, 1.0, '1', 495], [['VBP', 'NNS', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 496], [['VBP', 'NNS', 'NNS_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 497], [['VBP', 'NNS', 'NNS_advantag', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 498], [['VBP', 'NNS', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 499], [['VBP', 'NNS', 'MD'], 1, 1, 1.0, '1', 500], [['VBP', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 501], [['VBP', 'NNS', 'VB'], 1, 1, 1.0, '1', 502], [['VBP', 'NNS', 'NNS'], 1, 1, 1.0, '1', 503], [['VBP', 'NNS', 'NNS', 'IN'], 1, 1, 1.0, '1', 504], [['VBP', 'NNS', 'IN'], 1, 1, 1.0, '1', 505], [['VBP', 'NNS', 'IN', 'NNS'], 1, 1, 1.0, '1', 506], [['VBP', 'NNS', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 507], [['VBP', 'NNS', 'IN', 'IN'], 1, 1, 1.0, '1', 508], [['WDT'], 1, 1, 1.0, '1', 509], [['WDT', 'NNS_advantag'], 1, 1, 1.0, '1', 510], [['WDT', 'NNS_advantag', 'NNS'], 1, 1, 1.0, '1', 511], [['WDT', 'NNS_advantag', 'NNS', 'IN'], 1, 1, 1.0, '1', 512], [['WDT', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 513], [['WDT', 'NNS_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 514], [['WDT', 'NNS_advantag', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 515], [['WDT', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 516], [['WDT', 'VBP'], 1, 1, 1.0, '1', 517], [['WDT', 'VBP', 'NNS_advantag'], 1, 1, 1.0, '1', 518], [['WDT', 'VBP', 'NNS_advantag', 'NNS'], 1, 1, 1.0, '1', 519], [['WDT', 'VBP', 'NNS_advantag', 'NNS', 'IN'], 1, 1, 1.0, '1', 520], [['WDT', 'VBP', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 521], [['WDT', 'VBP', 'NNS_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 522], [['WDT', 'VBP', 'NNS_advantag', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 523], [['WDT', 'VBP', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 524], [['WDT', 'VBP', 'NNS'], 1, 1, 1.0, '1', 525], [['WDT', 'VBP', 'NNS', 'NNS_advantag'], 1, 1, 1.0, '1', 526], [['WDT', 'VBP', 'NNS', 'NNS_advantag', 'NNS'], 1, 1, 1.0, '1', 527], [['WDT', 'VBP', 'NNS', 'NNS_advantag', 'NNS', 'IN'], 1, 1, 1.0, '1', 528], [['WDT', 'VBP', 'NNS', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 529], [['WDT', 'VBP', 'NNS', 'NNS_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 530], [['WDT', 'VBP', 'NNS', 'NNS_advantag', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 531], [['WDT', 'VBP', 'NNS', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 532], [['WDT', 'VBP', 'NNS', 'NNS'], 1, 1, 1.0, '1', 533], [['WDT', 'VBP', 'NNS', 'NNS', 'IN'], 1, 1, 1.0, '1', 534], [['WDT', 'VBP', 'NNS', 'IN'], 1, 1, 1.0, '1', 535], [['WDT', 'VBP', 'NNS', 'IN', 'NNS'], 1, 1, 1.0, '1', 536], [['WDT', 'VBP', 'NNS', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 537], [['WDT', 'VBP', 'NNS', 'IN', 'IN'], 1, 1, 1.0, '1', 538], [['WDT', 'VBP', 'IN'], 1, 1, 1.0, '1', 539], [['WDT', 'VBP', 'IN', 'NNS'], 1, 1, 1.0, '1', 540], [['WDT', 'VBP', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 541], [['WDT', 'VBP', 'IN', 'IN'], 1, 1, 1.0, '1', 542], [['WDT', 'NNS'], 1, 1, 1.0, '1', 543], [['WDT', 'NNS', 'NNS_advantag'], 1, 1, 1.0, '1', 544], [['WDT', 'NNS', 'NNS_advantag', 'NNS'], 1, 1, 1.0, '1', 545], [['WDT', 'NNS', 'NNS_advantag', 'NNS', 'IN'], 1, 1, 1.0, '1', 546], [['WDT', 'NNS', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 547], [['WDT', 'NNS', 'NNS_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 548], [['WDT', 'NNS', 'NNS_advantag', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 549], [['WDT', 'NNS', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 550], [['WDT', 'NNS', 'NNS'], 1, 1, 1.0, '1', 551], [['WDT', 'NNS', 'NNS', 'IN'], 1, 1, 1.0, '1', 552], [['WDT', 'NNS', 'IN'], 1, 1, 1.0, '1', 553], [['WDT', 'NNS', 'IN', 'NNS'], 1, 1, 1.0, '1', 554], [['WDT', 'NNS', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 555], [['WDT', 'NNS', 'IN', 'IN'], 1, 1, 1.0, '1', 556], [['WDT', 'IN'], 1, 1, 1.0, '1', 557], [['WDT', 'IN', 'NNS'], 1, 1, 1.0, '1', 558], [['WDT', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 559], [['WDT', 'IN', 'IN'], 1, 1, 1.0, '1', 560], [['JJ'], 13, 10, 0.7692307692307693, '1', 561], [['JJ', 'VBG'], 1, 1, 1.0, '1', 562], [['JJ', 'RB'], 3, 2, 0.6666666666666666, '0', 563], [['JJ', 'RB', 'JJ'], 1, 1, 1.0, '0', 564], [['JJ', 'RB', 'JJ', 'NNS'], 1, 1, 1.0, '0', 565], [['JJ', 'RB', 'JJR_smaller'], 1, 1, 1.0, '0', 566], [['JJ', 'RB', 'JJR_smaller', 'VBP'], 1, 1, 1.0, '0', 567], [['JJ', 'RB', 'JJR_smaller', 'VBP', 'VBN'], 1, 1, 1.0, '0', 568], [['JJ', 'RB', 'JJR_smaller', 'NNS'], 1, 1, 1.0, '0', 569], [['JJ', 'RB', 'JJR_smaller', 'NNS', 'VBP'], 1, 1, 1.0, '0', 570], [['JJ', 'RB', 'JJR_smaller', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 571], [['JJ', 'RB', 'JJR_smaller', 'NNS', 'VBN'], 1, 1, 1.0, '0', 572], [['JJ', 'RB', 'JJR_smaller', 'VBN'], 1, 1, 1.0, '0', 573], [['JJ', 'RB', 'VBN'], 1, 1, 1.0, '0', 574], [['JJ', 'RB', 'VBP'], 1, 1, 1.0, '0', 575], [['JJ', 'RB', 'VBP', 'VBN'], 1, 1, 1.0, '0', 576], [['JJ', 'RB', 'RB'], 1, 1, 1.0, '1', 577], [['JJ', 'RB', 'IN'], 1, 1, 1.0, '0', 578], [['JJ', 'RB', 'IN', 'NNS'], 1, 1, 1.0, '0', 579], [['JJ', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '0', 580], [['JJ', 'RB', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 581], [['JJ', 'RB', 'IN', 'IN'], 1, 1, 1.0, '0', 582], [['JJ', 'RB', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 583], [['JJ', 'RB', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 584], [['JJ', 'RB', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 585], [['JJ', 'RB', 'RB_well'], 1, 1, 1.0, '0', 586], [['JJ', 'RB', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 587], [['JJ', 'RB', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 588], [['JJ', 'RB', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 589], [['JJ', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '0', 590], [['JJ', 'RB', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 591], [['JJ', 'RB', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 592], [['JJ', 'RB', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 593], [['JJ', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '0', 594], [['JJ', 'RB', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 595], [['JJ', 'RB', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 596], [['JJ', 'RB', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 597], [['JJ', 'RB', 'NNS'], 2, 2, 1.0, '0', 598], [['JJ', 'RB', 'NNS', 'VBP'], 1, 1, 1.0, '0', 599], [['JJ', 'RB', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 600], [['JJ', 'RB', 'NNS', 'VBN'], 1, 1, 1.0, '0', 601], [['JJ', 'NN'], 10, 8, 0.8, '1', 602], [['JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 603], [['JJ', 'NN', 'RB', 'RB_well'], 1, 1, 1.0, '0', 604], [['JJ', 'NN', 'RB', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 605], [['JJ', 'NN', 'RB', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 606], [['JJ', 'NN', 'RB', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 607], [['JJ', 'NN', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '0', 608], [['JJ', 'NN', 'RB', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 609], [['JJ', 'NN', 'RB', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 610], [['JJ', 'NN', 'RB', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 611], [['JJ', 'NN', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '0', 612], [['JJ', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 613], [['JJ', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 614], [['JJ', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 615], [['JJ', 'NN', 'RB', 'NNS'], 1, 1, 1.0, '0', 616], [['JJ', 'NN', 'RB', 'RB'], 1, 1, 1.0, '1', 617], [['JJ', 'NN', 'RB', 'JJ'], 1, 1, 1.0, '0', 618], [['JJ', 'NN', 'RB', 'JJ', 'NNS'], 1, 1, 1.0, '0', 619], [['JJ', 'NN', 'RB', 'IN'], 1, 1, 1.0, '0', 620], [['JJ', 'NN', 'RB', 'IN', 'NNS'], 1, 1, 1.0, '0', 621], [['JJ', 'NN', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '0', 622], [['JJ', 'NN', 'RB', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 623], [['JJ', 'NN', 'RB', 'IN', 'IN'], 1, 1, 1.0, '0', 624], [['JJ', 'NN', 'RB', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 625], [['JJ', 'NN', 'RB', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 626], [['JJ', 'NN', 'RB', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 627], [['JJ', 'NN', 'NN'], 3, 2, 0.6666666666666666, '1', 628], [['JJ', 'NN', 'NN', 'VBG'], 1, 1, 1.0, '1', 629], [['JJ', 'NN', 'IN_over', 'VBG'], 1, 1, 1.0, '1', 630], [['JJ', 'NN', 'IN_over', 'NN', 'VBG'], 1, 1, 1.0, '1', 631], [['JJ', 'NN', 'IN_over', 'JJ', 'VBG'], 1, 1, 1.0, '1', 632], [['JJ', 'NN', 'IN_over', 'JJ', 'VBN'], 1, 1, 1.0, '0', 633], [['JJ', 'NN', 'IN_over', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 634], [['JJ', 'NN', 'IN_over', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 635], [['JJ', 'NN', 'IN_over', 'VBN'], 1, 1, 1.0, '0', 636], [['JJ', 'NN', 'IN_over', 'VBN', 'NN'], 1, 1, 1.0, '0', 637], [['JJ', 'NN', 'NNS_gain'], 2, 2, 1.0, '1', 638], [['JJ', 'NN', 'NNS_gain', 'VBP'], 1, 1, 1.0, '1', 639], [['JJ', 'NN', 'NNS_gain', 'VBP', 'VBN'], 1, 1, 1.0, '1', 640], [['JJ', 'NN', 'NNS_gain', 'VBP', 'VBN', 'VBN'], 1, 1, 1.0, '1', 641], [['JJ', 'NN', 'NNS_gain', 'VBN'], 1, 1, 1.0, '1', 642], [['JJ', 'NN', 'NNS_gain', 'VBN', 'VBN'], 1, 1, 1.0, '1', 643], [['JJ', 'NN', 'NNS_gain', 'NN'], 1, 1, 1.0, '1', 644], [['JJ', 'NN', 'NNS_gain', 'JJ'], 1, 1, 1.0, '1', 645], [['JJ', 'NN', 'NNS_gain', 'JJ', 'NN'], 1, 1, 1.0, '1', 646], [['JJ', 'NN', 'NNS_gain', 'IN'], 1, 1, 1.0, '1', 647], [['JJ', 'NN', 'NNS_gain', 'IN', 'NN'], 1, 1, 1.0, '1', 648], [['JJ', 'NN', 'NNS_gain', 'IN', 'JJ'], 1, 1, 1.0, '1', 649], [['JJ', 'NN', 'NNS_gain', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 650], [['JJ', 'NN', 'VBN'], 3, 2, 0.6666666666666666, '1', 651], [['JJ', 'NN', 'VBN', 'VBN'], 1, 1, 1.0, '1', 652], [['JJ', 'NN', 'VBN', 'NN'], 1, 1, 1.0, '0', 653], [['JJ', 'NN', 'VBN', 'IN'], 1, 1, 1.0, '1', 654], [['JJ', 'NN', 'VBP'], 1, 1, 1.0, '1', 655], [['JJ', 'NN', 'VBP', 'VBN'], 1, 1, 1.0, '1', 656], [['JJ', 'NN', 'VBP', 'VBN', 'VBN'], 1, 1, 1.0, '1', 657], [['JJ', 'NN', 'JJ', 'VBG'], 1, 1, 1.0, '1', 658], [['JJ', 'NN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 659], [['JJ', 'NN', 'JJ', 'VBN'], 1, 1, 1.0, '0', 660], [['JJ', 'NN', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 661], [['JJ', 'NN', 'JJ', 'NN'], 3, 2, 0.6666666666666666, '1', 662], [['JJ', 'NN', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 663], [['JJ', 'NN', 'IN'], 3, 2, 0.6666666666666666, '1', 664], [['JJ', 'NN', 'IN', 'NNS'], 1, 1, 1.0, '0', 665], [['JJ', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 666], [['JJ', 'NN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 667], [['JJ', 'NN', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 668], [['JJ', 'NN', 'IN', 'IN'], 1, 1, 1.0, '0', 669], [['JJ', 'NN', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 670], [['JJ', 'NN', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 671], [['JJ', 'NN', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 672], [['JJ', 'NN', 'RB_well'], 1, 1, 1.0, '0', 673], [['JJ', 'NN', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 674], [['JJ', 'NN', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 675], [['JJ', 'NN', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 676], [['JJ', 'NN', 'RB_well', 'IN'], 1, 1, 1.0, '0', 677], [['JJ', 'NN', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 678], [['JJ', 'NN', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 679], [['JJ', 'NN', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 680], [['JJ', 'NN', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '0', 681], [['JJ', 'NN', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 682], [['JJ', 'NN', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 683], [['JJ', 'NN', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 684], [['JJ', 'NN', 'VBG_match'], 2, 2, 1.0, '1', 685], [['JJ', 'NN', 'VBG_match', 'NNS'], 2, 2, 1.0, '1', 686], [['JJ', 'NN', 'VBG_match', 'NNS', 'VBN'], 1, 1, 1.0, '1', 687], [['JJ', 'NN', 'VBG_match', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 688], [['JJ', 'NN', 'VBG_match', 'NNS', 'RB'], 1, 1, 1.0, '1', 689], [['JJ', 'NN', 'VBG_match', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 690], [['JJ', 'NN', 'VBG_match', 'NNS', 'IN'], 1, 1, 1.0, '1', 691], [['JJ', 'NN', 'VBG_match', 'VBN'], 1, 1, 1.0, '1', 692], [['JJ', 'NN', 'VBG_match', 'VBN', 'IN'], 1, 1, 1.0, '1', 693], [['JJ', 'NN', 'VBG_match', 'RB'], 1, 1, 1.0, '1', 694], [['JJ', 'NN', 'VBG_match', 'RB', 'RB'], 1, 1, 1.0, '1', 695], [['JJ', 'NN', 'VBG_match', 'IN'], 1, 1, 1.0, '1', 696], [['JJ', 'NN', 'NNS'], 4, 3, 0.75, '1', 697], [['JJ', 'NN', 'NNS', 'VBG'], 1, 1, 1.0, '1', 698], [['JJ', 'NN', 'NNS', 'JJ'], 1, 1, 1.0, '1', 699], [['JJ', 'NN', 'NNS', 'JJ', 'VBG'], 1, 1, 1.0, '1', 700], [['JJ', 'NN', 'NNS', 'JJ', 'NN'], 1, 1, 1.0, '1', 701], [['JJ', 'NN', 'NNS', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 702], [['JJ', 'NN', 'NNS', 'NN'], 1, 1, 1.0, '1', 703], [['JJ', 'NN', 'NNS', 'NN', 'VBG'], 1, 1, 1.0, '1', 704], [['JJ', 'NN', 'NNS', 'IN_over'], 1, 1, 1.0, '1', 705], [['JJ', 'NN', 'NNS', 'IN_over', 'VBG'], 1, 1, 1.0, '1', 706], [['JJ', 'NN', 'NNS', 'IN_over', 'NN'], 1, 1, 1.0, '1', 707], [['JJ', 'NN', 'NNS', 'IN_over', 'NN', 'VBG'], 1, 1, 1.0, '1', 708], [['JJ', 'NN', 'NNS', 'IN_over', 'JJ'], 1, 1, 1.0, '1', 709], [['JJ', 'NN', 'NNS', 'IN_over', 'JJ', 'VBG'], 1, 1, 1.0, '1', 710], [['JJ', 'NN', 'NNS', 'IN_over', 'JJ', 'NN'], 1, 1, 1.0, '1', 711], [['JJ', 'NN', 'NNS', 'IN_over', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 712], [['JJ', 'NN', 'NNS', 'VBN'], 1, 1, 1.0, '1', 713], [['JJ', 'NN', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 714], [['JJ', 'NN', 'NNS', 'RB'], 1, 1, 1.0, '1', 715], [['JJ', 'NN', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 716], [['JJ', 'NN', 'NNS', 'IN'], 1, 1, 1.0, '1', 717], [['JJ', 'NN_advantag'], 1, 1, 1.0, '1', 718], [['JJ', 'NN_advantag', 'DT'], 1, 1, 1.0, '1', 719], [['JJ', 'NN_advantag', 'DT', 'NN'], 1, 1, 1.0, '1', 720], [['JJ', 'NN_advantag', 'NN'], 1, 1, 1.0, '1', 721], [['JJ', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 722], [['JJ', 'NN_advantag', 'IN', 'DT'], 1, 1, 1.0, '1', 723], [['JJ', 'NN_advantag', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 724], [['JJ', 'NN_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 725], [['JJ', 'JJR_smaller'], 1, 1, 1.0, '0', 726], [['JJ', 'JJR_smaller', 'VBP'], 1, 1, 1.0, '0', 727], [['JJ', 'JJR_smaller', 'VBP', 'VBN'], 1, 1, 1.0, '0', 728], [['JJ', 'JJR_smaller', 'NNS'], 1, 1, 1.0, '0', 729], [['JJ', 'JJR_smaller', 'NNS', 'VBP'], 1, 1, 1.0, '0', 730], [['JJ', 'JJR_smaller', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 731], [['JJ', 'JJR_smaller', 'NNS', 'VBN'], 1, 1, 1.0, '0', 732], [['JJ', 'JJR_smaller', 'VBN'], 1, 1, 1.0, '0', 733], [['JJ', 'IN_over', 'VBG'], 1, 1, 1.0, '1', 734], [['JJ', 'IN_over', 'NN', 'VBG'], 1, 1, 1.0, '1', 735], [['JJ', 'IN_over', 'JJ', 'VBG'], 1, 1, 1.0, '1', 736], [['JJ', 'IN_over', 'JJ', 'VBN'], 1, 1, 1.0, '0', 737], [['JJ', 'IN_over', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 738], [['JJ', 'IN_over', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 739], [['JJ', 'IN_over', 'VBN'], 1, 1, 1.0, '0', 740], [['JJ', 'IN_over', 'VBN', 'NN'], 1, 1, 1.0, '0', 741], [['JJ', 'NNS_gain'], 2, 2, 1.0, '1', 742], [['JJ', 'NNS_gain', 'VBP'], 1, 1, 1.0, '1', 743], [['JJ', 'NNS_gain', 'VBP', 'VBN'], 1, 1, 1.0, '1', 744], [['JJ', 'NNS_gain', 'VBP', 'VBN', 'VBN'], 1, 1, 1.0, '1', 745], [['JJ', 'NNS_gain', 'VBN'], 1, 1, 1.0, '1', 746], [['JJ', 'NNS_gain', 'VBN', 'VBN'], 1, 1, 1.0, '1', 747], [['JJ', 'NNS_gain', 'NN'], 1, 1, 1.0, '1', 748], [['JJ', 'NNS_gain', 'JJ'], 1, 1, 1.0, '1', 749], [['JJ', 'NNS_gain', 'JJ', 'NN'], 1, 1, 1.0, '1', 750], [['JJ', 'NNS_gain', 'IN'], 1, 1, 1.0, '1', 751], [['JJ', 'NNS_gain', 'IN', 'NN'], 1, 1, 1.0, '1', 752], [['JJ', 'NNS_gain', 'IN', 'JJ'], 1, 1, 1.0, '1', 753], [['JJ', 'NNS_gain', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 754], [['JJ', 'VBN', 'VBN'], 1, 1, 1.0, '1', 755], [['JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 756], [['JJ', 'VBN', 'IN'], 1, 1, 1.0, '1', 757], [['JJ', 'VBP', 'VBN', 'VBN'], 1, 1, 1.0, '1', 758], [['JJ', 'JJ'], 5, 3, 0.6, '1', 759], [['JJ', 'JJ', 'VBG'], 1, 1, 1.0, '1', 760], [['JJ', 'JJ', 'NNS'], 1, 1, 1.0, '0', 761], [['JJ', 'JJ', 'VBN'], 1, 1, 1.0, '0', 762], [['JJ', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 763], [['JJ', 'JJ', 'NN'], 4, 3, 0.75, '1', 764], [['JJ', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 765], [['JJ', 'IN'], 4, 3, 0.75, '1', 766], [['JJ', 'IN', 'DT'], 1, 1, 1.0, '1', 767], [['JJ', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 768], [['JJ', 'IN', 'NNS'], 1, 1, 1.0, '0', 769], [['JJ', 'IN', 'NN'], 2, 2, 1.0, '1', 770], [['JJ', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 771], [['JJ', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 772], [['JJ', 'IN', 'IN'], 1, 1, 1.0, '0', 773], [['JJ', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 774], [['JJ', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 775], [['JJ', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 776], [['JJ', 'RB_well'], 1, 1, 1.0, '0', 777], [['JJ', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 778], [['JJ', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 779], [['JJ', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 780], [['JJ', 'RB_well', 'IN'], 1, 1, 1.0, '0', 781], [['JJ', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 782], [['JJ', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 783], [['JJ', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 784], [['JJ', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '0', 785], [['JJ', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 786], [['JJ', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 787], [['JJ', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 788], [['JJ', 'VBG_match'], 2, 2, 1.0, '1', 789], [['JJ', 'VBG_match', 'NNS'], 2, 2, 1.0, '1', 790], [['JJ', 'VBG_match', 'NNS', 'VBN'], 1, 1, 1.0, '1', 791], [['JJ', 'VBG_match', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 792], [['JJ', 'VBG_match', 'NNS', 'RB'], 1, 1, 1.0, '1', 793], [['JJ', 'VBG_match', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 794], [['JJ', 'VBG_match', 'NNS', 'IN'], 1, 1, 1.0, '1', 795], [['JJ', 'VBG_match', 'VBN'], 1, 1, 1.0, '1', 796], [['JJ', 'VBG_match', 'VBN', 'IN'], 1, 1, 1.0, '1', 797], [['JJ', 'VBG_match', 'RB'], 1, 1, 1.0, '1', 798], [['JJ', 'VBG_match', 'RB', 'RB'], 1, 1, 1.0, '1', 799], [['JJ', 'VBG_match', 'IN'], 1, 1, 1.0, '1', 800], [['JJ', 'DT'], 2, 2, 1.0, '1', 801], [['JJ', 'DT', 'NN'], 2, 2, 1.0, '1', 802], [['JJ', 'DT', 'JJ'], 1, 1, 1.0, '1', 803], [['JJ', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 804], [['JJ', 'VBP_domin'], 1, 1, 1.0, '1', 805], [['JJ', 'VBP_domin', 'DT'], 1, 1, 1.0, '1', 806], [['JJ', 'VBP_domin', 'DT', 'NN'], 1, 1, 1.0, '1', 807], [['JJ', 'VBP_domin', 'DT', 'JJ'], 1, 1, 1.0, '1', 808], [['JJ', 'VBP_domin', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 809], [['JJ', 'VBP_domin', 'NN'], 1, 1, 1.0, '1', 810], [['JJ', 'VBP_domin', 'JJ'], 1, 1, 1.0, '1', 811], [['JJ', 'VBP_domin', 'JJ', 'NN'], 1, 1, 1.0, '1', 812], [['JJ', 'NNS'], 6, 4, 0.6666666666666666, '1', 813], [['JJ', 'NNS', 'VBG'], 1, 1, 1.0, '1', 814], [['JJ', 'NNS', 'RB', 'RB_well'], 1, 1, 1.0, '0', 815], [['JJ', 'NNS', 'RB', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 816], [['JJ', 'NNS', 'RB', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 817], [['JJ', 'NNS', 'RB', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 818], [['JJ', 'NNS', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '0', 819], [['JJ', 'NNS', 'RB', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 820], [['JJ', 'NNS', 'RB', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 821], [['JJ', 'NNS', 'RB', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 822], [['JJ', 'NNS', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '0', 823], [['JJ', 'NNS', 'RB', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 824], [['JJ', 'NNS', 'RB', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 825], [['JJ', 'NNS', 'RB', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 826], [['JJ', 'NNS', 'RB', 'NNS'], 1, 1, 1.0, '0', 827], [['JJ', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 828], [['JJ', 'NNS', 'RB', 'JJ'], 1, 1, 1.0, '0', 829], [['JJ', 'NNS', 'RB', 'JJ', 'NNS'], 1, 1, 1.0, '0', 830], [['JJ', 'NNS', 'RB', 'IN'], 1, 1, 1.0, '0', 831], [['JJ', 'NNS', 'RB', 'IN', 'NNS'], 1, 1, 1.0, '0', 832], [['JJ', 'NNS', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '0', 833], [['JJ', 'NNS', 'RB', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 834], [['JJ', 'NNS', 'RB', 'IN', 'IN'], 1, 1, 1.0, '0', 835], [['JJ', 'NNS', 'RB', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 836], [['JJ', 'NNS', 'RB', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 837], [['JJ', 'NNS', 'RB', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 838], [['JJ', 'NNS', 'NN'], 3, 2, 0.6666666666666666, '1', 839], [['JJ', 'NNS', 'NN', 'VBG'], 1, 1, 1.0, '1', 840], [['JJ', 'NNS', 'NN', 'RB'], 1, 1, 1.0, '0', 841], [['JJ', 'NNS', 'NN', 'RB', 'RB_well'], 1, 1, 1.0, '0', 842], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 843], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 844], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 845], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '0', 846], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 847], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 848], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 849], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '0', 850], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 851], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 852], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 853], [['JJ', 'NNS', 'NN', 'RB', 'NNS'], 1, 1, 1.0, '0', 854], [['JJ', 'NNS', 'NN', 'RB', 'JJ'], 1, 1, 1.0, '0', 855], [['JJ', 'NNS', 'NN', 'RB', 'JJ', 'NNS'], 1, 1, 1.0, '0', 856], [['JJ', 'NNS', 'NN', 'RB', 'IN'], 1, 1, 1.0, '0', 857], [['JJ', 'NNS', 'NN', 'RB', 'IN', 'NNS'], 1, 1, 1.0, '0', 858], [['JJ', 'NNS', 'NN', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '0', 859], [['JJ', 'NNS', 'NN', 'RB', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 860], [['JJ', 'NNS', 'NN', 'RB', 'IN', 'IN'], 1, 1, 1.0, '0', 861], [['JJ', 'NNS', 'NN', 'RB', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 862], [['JJ', 'NNS', 'NN', 'RB', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 863], [['JJ', 'NNS', 'NN', 'RB', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 864], [['JJ', 'NNS', 'NN', 'JJ'], 1, 1, 1.0, '0', 865], [['JJ', 'NNS', 'NN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 866], [['JJ', 'NNS', 'NN', 'IN'], 1, 1, 1.0, '0', 867], [['JJ', 'NNS', 'NN', 'IN', 'NNS'], 1, 1, 1.0, '0', 868], [['JJ', 'NNS', 'NN', 'IN', 'JJ'], 1, 1, 1.0, '0', 869], [['JJ', 'NNS', 'NN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 870], [['JJ', 'NNS', 'NN', 'IN', 'IN'], 1, 1, 1.0, '0', 871], [['JJ', 'NNS', 'NN', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 872], [['JJ', 'NNS', 'NN', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 873], [['JJ', 'NNS', 'NN', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 874], [['JJ', 'NNS', 'NN', 'RB_well'], 1, 1, 1.0, '0', 875], [['JJ', 'NNS', 'NN', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 876], [['JJ', 'NNS', 'NN', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 877], [['JJ', 'NNS', 'NN', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 878], [['JJ', 'NNS', 'NN', 'RB_well', 'IN'], 1, 1, 1.0, '0', 879], [['JJ', 'NNS', 'NN', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 880], [['JJ', 'NNS', 'NN', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 881], [['JJ', 'NNS', 'NN', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 882], [['JJ', 'NNS', 'NN', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '0', 883], [['JJ', 'NNS', 'NN', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 884], [['JJ', 'NNS', 'NN', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 885], [['JJ', 'NNS', 'NN', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 886], [['JJ', 'NNS', 'NN', 'NNS'], 1, 1, 1.0, '0', 887], [['JJ', 'NNS', 'IN_over'], 1, 1, 1.0, '1', 888], [['JJ', 'NNS', 'IN_over', 'VBG'], 1, 1, 1.0, '1', 889], [['JJ', 'NNS', 'IN_over', 'NN'], 1, 1, 1.0, '1', 890], [['JJ', 'NNS', 'IN_over', 'NN', 'VBG'], 1, 1, 1.0, '1', 891], [['JJ', 'NNS', 'IN_over', 'JJ'], 1, 1, 1.0, '1', 892], [['JJ', 'NNS', 'IN_over', 'JJ', 'VBG'], 1, 1, 1.0, '1', 893], [['JJ', 'NNS', 'IN_over', 'JJ', 'NN'], 1, 1, 1.0, '1', 894], [['JJ', 'NNS', 'IN_over', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 895], [['JJ', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 896], [['JJ', 'NNS', 'VBP'], 1, 1, 1.0, '0', 897], [['JJ', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 898], [['JJ', 'NNS', 'JJ'], 3, 2, 0.6666666666666666, '1', 899], [['JJ', 'NNS', 'JJ', 'VBG'], 1, 1, 1.0, '1', 900], [['JJ', 'NNS', 'JJ', 'NNS'], 1, 1, 1.0, '0', 901], [['JJ', 'NNS', 'JJ', 'NN'], 2, 2, 1.0, '1', 902], [['JJ', 'NNS', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 903], [['JJ', 'NNS', 'IN', 'NNS'], 1, 1, 1.0, '0', 904], [['JJ', 'NNS', 'IN', 'JJ'], 1, 1, 1.0, '0', 905], [['JJ', 'NNS', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 906], [['JJ', 'NNS', 'IN', 'IN'], 1, 1, 1.0, '0', 907], [['JJ', 'NNS', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 908], [['JJ', 'NNS', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 909], [['JJ', 'NNS', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 910], [['JJ', 'NNS', 'RB_well'], 1, 1, 1.0, '0', 911], [['JJ', 'NNS', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 912], [['JJ', 'NNS', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 913], [['JJ', 'NNS', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 914], [['JJ', 'NNS', 'RB_well', 'IN'], 1, 1, 1.0, '0', 915], [['JJ', 'NNS', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 916], [['JJ', 'NNS', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 917], [['JJ', 'NNS', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 918], [['JJ', 'NNS', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '0', 919], [['JJ', 'NNS', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 920], [['JJ', 'NNS', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 921], [['JJ', 'NNS', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 922], [['JJ', 'NNS', 'DT'], 1, 1, 1.0, '1', 923], [['JJ', 'NNS', 'DT', 'NN'], 1, 1, 1.0, '1', 924], [['JJ', 'NNS', 'DT', 'JJ'], 1, 1, 1.0, '1', 925], [['JJ', 'NNS', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 926], [['JJ', 'NNS', 'VBP_domin'], 1, 1, 1.0, '1', 927], [['JJ', 'NNS', 'VBP_domin', 'DT'], 1, 1, 1.0, '1', 928], [['JJ', 'NNS', 'VBP_domin', 'DT', 'NN'], 1, 1, 1.0, '1', 929], [['JJ', 'NNS', 'VBP_domin', 'DT', 'JJ'], 1, 1, 1.0, '1', 930], [['JJ', 'NNS', 'VBP_domin', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 931], [['JJ', 'NNS', 'VBP_domin', 'NN'], 1, 1, 1.0, '1', 932], [['JJ', 'NNS', 'VBP_domin', 'JJ'], 1, 1, 1.0, '1', 933], [['JJ', 'NNS', 'VBP_domin', 'JJ', 'NN'], 1, 1, 1.0, '1', 934], [['JJ', 'NNS', 'NNS'], 1, 1, 1.0, '0', 935], [['VBZ'], 2, 2, 1.0, '1', 936], [['VBZ', 'MD'], 1, 1, 1.0, '1', 937], [['VBZ', 'RB'], 1, 1, 1.0, '1', 938], [['VBZ', 'RB', 'DT'], 1, 1, 1.0, '1', 939], [['VBZ', 'RB', 'DT', 'JJ'], 1, 1, 1.0, '1', 940], [['VBZ', 'RB', 'IN'], 1, 1, 1.0, '1', 941], [['VBZ', 'RB', 'IN', 'DT'], 1, 1, 1.0, '1', 942], [['VBZ', 'RB', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 943], [['VBZ', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '1', 944], [['VBZ', 'RB', 'JJ'], 1, 1, 1.0, '1', 945], [['VBZ', 'RB', 'VBN_compar'], 1, 1, 1.0, '1', 946], [['VBZ', 'RB', 'VBN_compar', 'DT'], 1, 1, 1.0, '1', 947], [['VBZ', 'RB', 'VBN_compar', 'DT', 'JJ'], 1, 1, 1.0, '1', 948], [['VBZ', 'RB', 'VBN_compar', 'JJ'], 1, 1, 1.0, '1', 949], [['VBZ', 'RB', 'VBN_compar', 'IN'], 1, 1, 1.0, '1', 950], [['VBZ', 'RB', 'VBN_compar', 'IN', 'DT'], 1, 1, 1.0, '1', 951], [['VBZ', 'RB', 'VBN_compar', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 952], [['VBZ', 'RB', 'VBN_compar', 'IN', 'JJ'], 1, 1, 1.0, '1', 953], [['VBZ', 'NN_advantag'], 1, 1, 1.0, '1', 954], [['VBZ', 'NN_advantag', 'MD'], 1, 1, 1.0, '1', 955], [['VBZ', 'NN_advantag', 'NNS'], 1, 1, 1.0, '1', 956], [['VBZ', 'NN_advantag', 'NNS', 'MD'], 1, 1, 1.0, '1', 957], [['VBZ', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 958], [['VBZ', 'NN_advantag', 'IN', 'MD'], 1, 1, 1.0, '1', 959], [['VBZ', 'NN_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 960], [['VBZ', 'NN_advantag', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 961], [['VBZ', 'VBN'], 1, 1, 1.0, '1', 962], [['VBZ', 'VBN', 'DT'], 1, 1, 1.0, '1', 963], [['VBZ', 'VBN', 'DT', 'JJ'], 1, 1, 1.0, '1', 964], [['VBZ', 'VBN', 'IN'], 1, 1, 1.0, '1', 965], [['VBZ', 'VBN', 'IN', 'DT'], 1, 1, 1.0, '1', 966], [['VBZ', 'VBN', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 967], [['VBZ', 'VBN', 'IN', 'JJ'], 1, 1, 1.0, '1', 968], [['VBZ', 'VBN', 'JJ'], 1, 1, 1.0, '1', 969], [['VBZ', 'VBN', 'RB'], 1, 1, 1.0, '1', 970], [['VBZ', 'VBN', 'RB', 'DT'], 1, 1, 1.0, '1', 971], [['VBZ', 'VBN', 'RB', 'DT', 'JJ'], 1, 1, 1.0, '1', 972], [['VBZ', 'VBN', 'RB', 'IN'], 1, 1, 1.0, '1', 973], [['VBZ', 'VBN', 'RB', 'IN', 'DT'], 1, 1, 1.0, '1', 974], [['VBZ', 'VBN', 'RB', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 975], [['VBZ', 'VBN', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '1', 976], [['VBZ', 'VBN', 'RB', 'JJ'], 1, 1, 1.0, '1', 977], [['VBZ', 'VBN', 'RB', 'VBN_compar'], 1, 1, 1.0, '1', 978], [['VBZ', 'VBN', 'RB', 'VBN_compar', 'DT'], 1, 1, 1.0, '1', 979], [['VBZ', 'VBN', 'RB', 'VBN_compar', 'DT', 'JJ'], 1, 1, 1.0, '1', 980], [['VBZ', 'VBN', 'RB', 'VBN_compar', 'JJ'], 1, 1, 1.0, '1', 981], [['VBZ', 'VBN', 'RB', 'VBN_compar', 'IN'], 1, 1, 1.0, '1', 982], [['VBZ', 'VBN', 'RB', 'VBN_compar', 'IN', 'DT'], 1, 1, 1.0, '1', 983], [['VBZ', 'VBN', 'RB', 'VBN_compar', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 984], [['VBZ', 'VBN', 'RB', 'VBN_compar', 'IN', 'JJ'], 1, 1, 1.0, '1', 985], [['VBZ', 'VBN', 'VBN_compar'], 1, 1, 1.0, '1', 986], [['VBZ', 'VBN', 'VBN_compar', 'DT'], 1, 1, 1.0, '1', 987], [['VBZ', 'VBN', 'VBN_compar', 'DT', 'JJ'], 1, 1, 1.0, '1', 988], [['VBZ', 'VBN', 'VBN_compar', 'JJ'], 1, 1, 1.0, '1', 989], [['VBZ', 'VBN', 'VBN_compar', 'IN'], 1, 1, 1.0, '1', 990], [['VBZ', 'VBN', 'VBN_compar', 'IN', 'DT'], 1, 1, 1.0, '1', 991], [['VBZ', 'VBN', 'VBN_compar', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 992], [['VBZ', 'VBN', 'VBN_compar', 'IN', 'JJ'], 1, 1, 1.0, '1', 993], [['VBZ', 'JJ'], 1, 1, 1.0, '1', 994], [['VBZ', 'IN'], 2, 2, 1.0, '1', 995], [['VBZ', 'IN', 'MD'], 1, 1, 1.0, '1', 996], [['VBZ', 'IN', 'DT'], 1, 1, 1.0, '1', 997], [['VBZ', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 998], [['VBZ', 'IN', 'NNS'], 1, 1, 1.0, '1', 999], [['VBZ', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1000], [['VBZ', 'IN', 'JJ'], 1, 1, 1.0, '1', 1001], [['VBZ', 'DT'], 2, 2, 1.0, '1', 1002], [['VBZ', 'DT', 'MD'], 1, 1, 1.0, '1', 1003], [['VBZ', 'DT', 'NNS'], 1, 1, 1.0, '1', 1004], [['VBZ', 'DT', 'NNS', 'MD'], 1, 1, 1.0, '1', 1005], [['VBZ', 'DT', 'NN_advantag'], 1, 1, 1.0, '1', 1006], [['VBZ', 'DT', 'NN_advantag', 'MD'], 1, 1, 1.0, '1', 1007], [['VBZ', 'DT', 'NN_advantag', 'NNS'], 1, 1, 1.0, '1', 1008], [['VBZ', 'DT', 'NN_advantag', 'NNS', 'MD'], 1, 1, 1.0, '1', 1009], [['VBZ', 'DT', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1010], [['VBZ', 'DT', 'NN_advantag', 'IN', 'MD'], 1, 1, 1.0, '1', 1011], [['VBZ', 'DT', 'NN_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 1012], [['VBZ', 'DT', 'NN_advantag', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1013], [['VBZ', 'DT', 'JJ'], 1, 1, 1.0, '1', 1014], [['VBZ', 'DT', 'IN'], 1, 1, 1.0, '1', 1015], [['VBZ', 'DT', 'IN', 'MD'], 1, 1, 1.0, '1', 1016], [['VBZ', 'DT', 'IN', 'NNS'], 1, 1, 1.0, '1', 1017], [['VBZ', 'DT', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1018], [['VBZ', 'NNS'], 1, 1, 1.0, '1', 1019], [['VBZ', 'NNS', 'MD'], 1, 1, 1.0, '1', 1020], [['VBZ', 'VBN_compar'], 1, 1, 1.0, '1', 1021], [['VBZ', 'VBN_compar', 'DT'], 1, 1, 1.0, '1', 1022], [['VBZ', 'VBN_compar', 'DT', 'JJ'], 1, 1, 1.0, '1', 1023], [['VBZ', 'VBN_compar', 'JJ'], 1, 1, 1.0, '1', 1024], [['VBZ', 'VBN_compar', 'IN'], 1, 1, 1.0, '1', 1025], [['VBZ', 'VBN_compar', 'IN', 'DT'], 1, 1, 1.0, '1', 1026], [['VBZ', 'VBN_compar', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 1027], [['VBZ', 'VBN_compar', 'IN', 'JJ'], 1, 1, 1.0, '1', 1028], [['JJ_compar'], 1, 1, 1.0, '1', 1029], [['JJ_compar', 'TO'], 1, 1, 1.0, '1', 1030], [['JJ_compar', 'TO', 'VB'], 1, 1, 1.0, '1', 1031], [['JJ_compar', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 1032], [['JJ_compar', 'TO', 'IN'], 1, 1, 1.0, '1', 1033], [['JJ_compar', 'VB'], 1, 1, 1.0, '1', 1034], [['JJ_compar', 'VB', 'IN'], 1, 1, 1.0, '1', 1035], [['JJ_compar', 'IN'], 1, 1, 1.0, '1', 1036], [['VBG_match'], 2, 2, 1.0, '1', 1037], [['VBG_match', 'NNS'], 2, 2, 1.0, '1', 1038], [['VBG_match', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1039], [['VBG_match', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1040], [['VBG_match', 'NNS', 'RB'], 1, 1, 1.0, '1', 1041], [['VBG_match', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 1042], [['VBG_match', 'NNS', 'IN'], 1, 1, 1.0, '1', 1043], [['VBG_match', 'VBN'], 1, 1, 1.0, '1', 1044], [['VBG_match', 'VBN', 'IN'], 1, 1, 1.0, '1', 1045], [['VBG_match', 'RB'], 1, 1, 1.0, '1', 1046], [['VBG_match', 'RB', 'RB'], 1, 1, 1.0, '1', 1047], [['VBG_match', 'IN'], 1, 1, 1.0, '1', 1048], [['DT'], 12, 10, 0.8333333333333334, '1', 1049], [['DT', 'JJ_improv'], 1, 1, 1.0, '1', 1050], [['DT', 'JJ_improv', 'NN'], 1, 1, 1.0, '1', 1051], [['DT', 'JJ_improv', 'NN', 'NN'], 1, 1, 1.0, '1', 1052], [['DT', 'JJ_improv', 'NN', 'IN'], 1, 1, 1.0, '1', 1053], [['DT', 'JJ_improv', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 1054], [['DT', 'JJ_improv', 'IN'], 1, 1, 1.0, '1', 1055], [['DT', 'JJ_improv', 'IN', 'NN'], 1, 1, 1.0, '1', 1056], [['DT', 'VBG_match'], 1, 1, 1.0, '1', 1057], [['DT', 'VBG_match', 'NNS'], 1, 1, 1.0, '1', 1058], [['DT', 'VBG_match', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1059], [['DT', 'VBG_match', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1060], [['DT', 'VBG_match', 'NNS', 'IN'], 1, 1, 1.0, '1', 1061], [['DT', 'VBG_match', 'VBN'], 1, 1, 1.0, '1', 1062], [['DT', 'VBG_match', 'VBN', 'IN'], 1, 1, 1.0, '1', 1063], [['DT', 'VBG_match', 'IN'], 1, 1, 1.0, '1', 1064], [['DT', 'RB'], 1, 1, 1.0, '1', 1065], [['DT', 'NN'], 8, 6, 0.75, '1', 1066], [['DT', 'NN', 'NNS'], 1, 1, 1.0, '1', 1067], [['DT', 'NN', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1068], [['DT', 'NN', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1069], [['DT', 'NN', 'NNS', 'IN'], 1, 1, 1.0, '1', 1070], [['DT', 'NN', 'VBG_match'], 1, 1, 1.0, '1', 1071], [['DT', 'NN', 'VBG_match', 'NNS'], 1, 1, 1.0, '1', 1072], [['DT', 'NN', 'VBG_match', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1073], [['DT', 'NN', 'VBG_match', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1074], [['DT', 'NN', 'VBG_match', 'NNS', 'IN'], 1, 1, 1.0, '1', 1075], [['DT', 'NN', 'VBG_match', 'VBN'], 1, 1, 1.0, '1', 1076], [['DT', 'NN', 'VBG_match', 'VBN', 'IN'], 1, 1, 1.0, '1', 1077], [['DT', 'NN', 'VBG_match', 'IN'], 1, 1, 1.0, '1', 1078], [['DT', 'NN', 'VBN'], 3, 2, 0.6666666666666666, '0', 1079], [['DT', 'NN', 'VBN', 'IN'], 3, 2, 0.6666666666666666, '0', 1080], [['DT', 'NN', 'NN'], 1, 1, 1.0, '1', 1081], [['DT', 'NN', 'IN'], 5, 3, 0.6, '1', 1082], [['DT', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 1083], [['DT', 'MD'], 1, 1, 1.0, '1', 1084], [['DT', 'NN_advantag'], 1, 1, 1.0, '1', 1085], [['DT', 'NN_advantag', 'MD'], 1, 1, 1.0, '1', 1086], [['DT', 'NN_advantag', 'NNS'], 1, 1, 1.0, '1', 1087], [['DT', 'NN_advantag', 'NNS', 'MD'], 1, 1, 1.0, '1', 1088], [['DT', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1089], [['DT', 'NN_advantag', 'IN', 'MD'], 1, 1, 1.0, '1', 1090], [['DT', 'NN_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 1091], [['DT', 'NN_advantag', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1092], [['DT', 'JJS'], 1, 1, 1.0, '1', 1093], [['DT', 'VBN'], 3, 2, 0.6666666666666666, '0', 1094], [['DT', 'VBN', 'IN'], 3, 2, 0.6666666666666666, '0', 1095], [['DT', 'NNS_advantag'], 1, 1, 1.0, '1', 1096], [['DT', 'NNS_advantag', 'NN'], 1, 1, 1.0, '1', 1097], [['DT', 'NNS_advantag', 'NN', 'IN'], 1, 1, 1.0, '1', 1098], [['DT', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 1099], [['DT', 'NNS_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1100], [['DT', 'NNS_advantag', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1101], [['DT', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 1102], [['DT', 'JJS_best'], 3, 2, 0.6666666666666666, '0', 1103], [['DT', 'JJS_best', 'JJ'], 1, 1, 1.0, '1', 1104], [['DT', 'JJS_best', 'JJ', 'NN'], 1, 1, 1.0, '1', 1105], [['DT', 'JJS_best', 'VBN'], 2, 2, 1.0, '0', 1106], [['DT', 'JJS_best', 'VBN', 'IN'], 2, 2, 1.0, '0', 1107], [['DT', 'JJS_best', 'NN'], 3, 2, 0.6666666666666666, '0', 1108], [['DT', 'JJS_best', 'NN', 'VBN'], 2, 2, 1.0, '0', 1109], [['DT', 'JJS_best', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 1110], [['DT', 'JJS_best', 'NN', 'IN'], 2, 2, 1.0, '0', 1111], [['DT', 'JJS_best', 'IN'], 2, 2, 1.0, '0', 1112], [['DT', 'JJ'], 4, 4, 1.0, '1', 1113], [['DT', 'JJ', 'NNS'], 1, 1, 1.0, '1', 1114], [['DT', 'JJ', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1115], [['DT', 'JJ', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1116], [['DT', 'JJ', 'NNS', 'IN'], 1, 1, 1.0, '1', 1117], [['DT', 'JJ', 'VBG_match'], 1, 1, 1.0, '1', 1118], [['DT', 'JJ', 'VBG_match', 'NNS'], 1, 1, 1.0, '1', 1119], [['DT', 'JJ', 'VBG_match', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1120], [['DT', 'JJ', 'VBG_match', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1121], [['DT', 'JJ', 'VBG_match', 'NNS', 'IN'], 1, 1, 1.0, '1', 1122], [['DT', 'JJ', 'VBG_match', 'VBN'], 1, 1, 1.0, '1', 1123], [['DT', 'JJ', 'VBG_match', 'VBN', 'IN'], 1, 1, 1.0, '1', 1124], [['DT', 'JJ', 'VBG_match', 'IN'], 1, 1, 1.0, '1', 1125], [['DT', 'JJ', 'VBN'], 1, 1, 1.0, '1', 1126], [['DT', 'JJ', 'VBN', 'IN'], 1, 1, 1.0, '1', 1127], [['DT', 'JJ', 'NN'], 3, 3, 1.0, '1', 1128], [['DT', 'JJ', 'NN', 'NNS'], 1, 1, 1.0, '1', 1129], [['DT', 'JJ', 'NN', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1130], [['DT', 'JJ', 'NN', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1131], [['DT', 'JJ', 'NN', 'NNS', 'IN'], 1, 1, 1.0, '1', 1132], [['DT', 'JJ', 'NN', 'VBG_match'], 1, 1, 1.0, '1', 1133], [['DT', 'JJ', 'NN', 'VBG_match', 'NNS'], 1, 1, 1.0, '1', 1134], [['DT', 'JJ', 'NN', 'VBG_match', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1135], [['DT', 'JJ', 'NN', 'VBG_match', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1136], [['DT', 'JJ', 'NN', 'VBG_match', 'NNS', 'IN'], 1, 1, 1.0, '1', 1137], [['DT', 'JJ', 'NN', 'VBG_match', 'VBN'], 1, 1, 1.0, '1', 1138], [['DT', 'JJ', 'NN', 'VBG_match', 'VBN', 'IN'], 1, 1, 1.0, '1', 1139], [['DT', 'JJ', 'NN', 'VBG_match', 'IN'], 1, 1, 1.0, '1', 1140], [['DT', 'JJ', 'NN', 'VBN'], 1, 1, 1.0, '1', 1141], [['DT', 'JJ', 'NN', 'VBN', 'IN'], 1, 1, 1.0, '1', 1142], [['DT', 'JJ', 'NN', 'IN'], 1, 1, 1.0, '1', 1143], [['DT', 'JJ', 'IN'], 1, 1, 1.0, '1', 1144], [['DT', 'IN'], 6, 4, 0.6666666666666666, '1', 1145], [['DT', 'IN', 'MD'], 1, 1, 1.0, '1', 1146], [['DT', 'IN', 'NNS'], 1, 1, 1.0, '1', 1147], [['DT', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1148], [['DT', 'IN', 'NN'], 2, 2, 1.0, '1', 1149], [['DT', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1150], [['DT', 'IN', 'IN'], 1, 1, 1.0, '1', 1151], [['DT', 'NNS'], 2, 2, 1.0, '1', 1152], [['DT', 'NNS', 'MD'], 1, 1, 1.0, '1', 1153], [['DT', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1154], [['DT', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1155], [['DT', 'NNS', 'IN'], 1, 1, 1.0, '1', 1156], [['NN_contrast'], 1, 1, 1.0, '1', 1157], [['NN_contrast', 'TO'], 1, 1, 1.0, '1', 1158], [['NN_contrast', 'TO', 'VB'], 1, 1, 1.0, '1', 1159], [['NN_contrast', 'TO', 'VB', 'JJ'], 1, 1, 1.0, '1', 1160], [['NN_contrast', 'TO', 'JJ'], 1, 1, 1.0, '1', 1161], [['NN_contrast', 'VB'], 1, 1, 1.0, '1', 1162], [['NN_contrast', 'VB', 'JJ'], 1, 1, 1.0, '1', 1163], [['NN_contrast', 'JJ'], 1, 1, 1.0, '1', 1164], [['NN'], 22, 18, 0.8181818181818182, '1', 1165], [['NN', 'VB_fail'], 1, 1, 1.0, '1', 1166], [['NN', 'VB_fail', 'NN'], 1, 1, 1.0, '1', 1167], [['NN', 'VB_fail', 'RB'], 1, 1, 1.0, '1', 1168], [['NN', 'VB_fail', 'RB', 'NN'], 1, 1, 1.0, '1', 1169], [['NN', 'VB_fail', 'RB', 'IN'], 1, 1, 1.0, '1', 1170], [['NN', 'VB_fail', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1171], [['NN', 'VB_fail', 'IN'], 1, 1, 1.0, '1', 1172], [['NN', 'VB_fail', 'IN', 'NN'], 1, 1, 1.0, '1', 1173], [['NN', 'MD'], 2, 2, 1.0, '1', 1174], [['NN', 'MD', 'VB_fail'], 1, 1, 1.0, '1', 1175], [['NN', 'MD', 'VB_fail', 'NN'], 1, 1, 1.0, '1', 1176], [['NN', 'MD', 'VB_fail', 'RB'], 1, 1, 1.0, '1', 1177], [['NN', 'MD', 'VB_fail', 'RB', 'NN'], 1, 1, 1.0, '1', 1178], [['NN', 'MD', 'VB_fail', 'RB', 'IN'], 1, 1, 1.0, '1', 1179], [['NN', 'MD', 'VB_fail', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1180], [['NN', 'MD', 'VB_fail', 'IN'], 1, 1, 1.0, '1', 1181], [['NN', 'MD', 'VB_fail', 'IN', 'NN'], 1, 1, 1.0, '1', 1182], [['NN', 'MD', 'NN'], 1, 1, 1.0, '1', 1183], [['NN', 'MD', 'RB'], 1, 1, 1.0, '1', 1184], [['NN', 'MD', 'RB', 'VB_fail'], 1, 1, 1.0, '1', 1185], [['NN', 'MD', 'RB', 'VB_fail', 'NN'], 1, 1, 1.0, '1', 1186], [['NN', 'MD', 'RB', 'VB_fail', 'RB'], 1, 1, 1.0, '1', 1187], [['NN', 'MD', 'RB', 'VB_fail', 'RB', 'NN'], 1, 1, 1.0, '1', 1188], [['NN', 'MD', 'RB', 'VB_fail', 'RB', 'IN'], 1, 1, 1.0, '1', 1189], [['NN', 'MD', 'RB', 'VB_fail', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1190], [['NN', 'MD', 'RB', 'VB_fail', 'IN'], 1, 1, 1.0, '1', 1191], [['NN', 'MD', 'RB', 'VB_fail', 'IN', 'NN'], 1, 1, 1.0, '1', 1192], [['NN', 'MD', 'RB', 'NN'], 1, 1, 1.0, '1', 1193], [['NN', 'MD', 'RB', 'RB'], 1, 1, 1.0, '1', 1194], [['NN', 'MD', 'RB', 'RB', 'NN'], 1, 1, 1.0, '1', 1195], [['NN', 'MD', 'RB', 'RB', 'IN'], 1, 1, 1.0, '1', 1196], [['NN', 'MD', 'RB', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1197], [['NN', 'MD', 'RB', 'IN'], 1, 1, 1.0, '1', 1198], [['NN', 'MD', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1199], [['NN', 'MD', 'IN'], 1, 1, 1.0, '1', 1200], [['NN', 'MD', 'IN', 'NN'], 1, 1, 1.0, '1', 1201], [['NN', 'VBG'], 3, 3, 1.0, '1', 1202], [['NN', 'VBG', 'RB_well'], 1, 1, 1.0, '1', 1203], [['NN', 'VBG', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1204], [['NN', 'VBG', 'RB_well', 'IN'], 1, 1, 1.0, '1', 1205], [['NN', 'VBG', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1206], [['NN', 'VBG', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 1207], [['NN', 'VBG', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1208], [['NN', 'VBG', 'NNS'], 2, 2, 1.0, '1', 1209], [['NN', 'VBG', 'NNS', 'RB_well'], 1, 1, 1.0, '1', 1210], [['NN', 'VBG', 'NNS', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1211], [['NN', 'VBG', 'NNS', 'RB_well', 'IN'], 1, 1, 1.0, '1', 1212], [['NN', 'VBG', 'NNS', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1213], [['NN', 'VBG', 'NNS', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 1214], [['NN', 'VBG', 'NNS', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1215], [['NN', 'VBG', 'NNS', 'NN'], 1, 1, 1.0, '1', 1216], [['NN', 'VBG', 'NNS', 'RB'], 1, 1, 1.0, '1', 1217], [['NN', 'VBG', 'NNS', 'RB', 'RB_well'], 1, 1, 1.0, '1', 1218], [['NN', 'VBG', 'NNS', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1219], [['NN', 'VBG', 'NNS', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '1', 1220], [['NN', 'VBG', 'NNS', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1221], [['NN', 'VBG', 'NNS', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 1222], [['NN', 'VBG', 'NNS', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1223], [['NN', 'VBG', 'NNS', 'RB', 'NN'], 1, 1, 1.0, '1', 1224], [['NN', 'VBG', 'NNS', 'RB', 'IN'], 1, 1, 1.0, '1', 1225], [['NN', 'VBG', 'NNS', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1226], [['NN', 'VBG', 'NNS', 'RB', 'IN', 'IN'], 1, 1, 1.0, '1', 1227], [['NN', 'VBG', 'NNS', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1228], [['NN', 'VBG', 'NNS', 'IN'], 1, 1, 1.0, '1', 1229], [['NN', 'VBG', 'NNS', 'IN', 'NN'], 1, 1, 1.0, '1', 1230], [['NN', 'VBG', 'NNS', 'IN', 'IN'], 1, 1, 1.0, '1', 1231], [['NN', 'VBG', 'NNS', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1232], [['NN', 'VBG', 'NN'], 1, 1, 1.0, '1', 1233], [['NN', 'VBG', 'RB'], 1, 1, 1.0, '1', 1234], [['NN', 'VBG', 'RB', 'RB_well'], 1, 1, 1.0, '1', 1235], [['NN', 'VBG', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1236], [['NN', 'VBG', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '1', 1237], [['NN', 'VBG', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1238], [['NN', 'VBG', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 1239], [['NN', 'VBG', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1240], [['NN', 'VBG', 'RB', 'NN'], 1, 1, 1.0, '1', 1241], [['NN', 'VBG', 'RB', 'IN'], 1, 1, 1.0, '1', 1242], [['NN', 'VBG', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1243], [['NN', 'VBG', 'RB', 'IN', 'IN'], 1, 1, 1.0, '1', 1244], [['NN', 'VBG', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1245], [['NN', 'VBG', 'IN'], 1, 1, 1.0, '1', 1246], [['NN', 'VBG', 'IN', 'NN'], 1, 1, 1.0, '1', 1247], [['NN', 'VBG', 'IN', 'IN'], 1, 1, 1.0, '1', 1248], [['NN', 'VBG', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1249], [['NN', 'RB'], 5, 4, 0.8, '1', 1250], [['NN', 'RB', 'VB_fail'], 1, 1, 1.0, '1', 1251], [['NN', 'RB', 'VB_fail', 'NN'], 1, 1, 1.0, '1', 1252], [['NN', 'RB', 'VB_fail', 'RB'], 1, 1, 1.0, '1', 1253], [['NN', 'RB', 'VB_fail', 'RB', 'NN'], 1, 1, 1.0, '1', 1254], [['NN', 'RB', 'VB_fail', 'RB', 'IN'], 1, 1, 1.0, '1', 1255], [['NN', 'RB', 'VB_fail', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1256], [['NN', 'RB', 'VB_fail', 'IN'], 1, 1, 1.0, '1', 1257], [['NN', 'RB', 'VB_fail', 'IN', 'NN'], 1, 1, 1.0, '1', 1258], [['NN', 'RB', 'JJ'], 1, 1, 1.0, '0', 1259], [['NN', 'RB', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1260], [['NN', 'RB', 'NN'], 3, 3, 1.0, '1', 1261], [['NN', 'RB', 'RB'], 2, 2, 1.0, '1', 1262], [['NN', 'RB', 'RB', 'NN'], 1, 1, 1.0, '1', 1263], [['NN', 'RB', 'RB', 'IN'], 1, 1, 1.0, '1', 1264], [['NN', 'RB', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1265], [['NN', 'RB', 'IN'], 4, 3, 0.75, '1', 1266], [['NN', 'RB', 'IN', 'NNS'], 1, 1, 1.0, '0', 1267], [['NN', 'RB', 'IN', 'NN'], 3, 3, 1.0, '1', 1268], [['NN', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '0', 1269], [['NN', 'RB', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1270], [['NN', 'RB', 'IN', 'IN'], 3, 2, 0.6666666666666666, '1', 1271], [['NN', 'RB', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1272], [['NN', 'RB', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 1273], [['NN', 'RB', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1274], [['NN', 'RB', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1275], [['NN', 'RB', 'RB_well'], 3, 2, 0.6666666666666666, '1', 1276], [['NN', 'RB', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 1277], [['NN', 'RB', 'RB_well', 'NN'], 2, 2, 1.0, '1', 1278], [['NN', 'RB', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 1279], [['NN', 'RB', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1280], [['NN', 'RB', 'RB_well', 'IN'], 3, 2, 0.6666666666666666, '1', 1281], [['NN', 'RB', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 1282], [['NN', 'RB', 'RB_well', 'IN', 'NN'], 2, 2, 1.0, '1', 1283], [['NN', 'RB', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 1284], [['NN', 'RB', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1285], [['NN', 'RB', 'RB_well', 'IN', 'IN'], 3, 2, 0.6666666666666666, '1', 1286], [['NN', 'RB', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1287], [['NN', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 1288], [['NN', 'RB', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1289], [['NN', 'RB', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1290], [['NN', 'RB', 'NNS'], 1, 1, 1.0, '0', 1291], [['NN', 'NN'], 8, 7, 0.875, '1', 1292], [['NN', 'NN', 'VBG'], 1, 1, 1.0, '1', 1293], [['NN', 'VBD'], 1, 1, 1.0, '1', 1294], [['NN', 'VBD', 'JJR_better'], 1, 1, 1.0, '1', 1295], [['NN', 'VBD', 'JJR_better', 'DT'], 1, 1, 1.0, '1', 1296], [['NN', 'VBD', 'JJR_better', 'DT', 'JJS'], 1, 1, 1.0, '1', 1297], [['NN', 'VBD', 'JJR_better', 'JJS'], 1, 1, 1.0, '1', 1298], [['NN', 'VBD', 'JJR_better', 'IN'], 1, 1, 1.0, '1', 1299], [['NN', 'VBD', 'JJR_better', 'IN', 'DT'], 1, 1, 1.0, '1', 1300], [['NN', 'VBD', 'JJR_better', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 1301], [['NN', 'VBD', 'JJR_better', 'IN', 'JJS'], 1, 1, 1.0, '1', 1302], [['NN', 'VBD', 'DT'], 1, 1, 1.0, '1', 1303], [['NN', 'VBD', 'DT', 'JJS'], 1, 1, 1.0, '1', 1304], [['NN', 'VBD', 'JJS'], 1, 1, 1.0, '1', 1305], [['NN', 'VBD', 'IN'], 1, 1, 1.0, '1', 1306], [['NN', 'VBD', 'IN', 'DT'], 1, 1, 1.0, '1', 1307], [['NN', 'VBD', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 1308], [['NN', 'VBD', 'IN', 'JJS'], 1, 1, 1.0, '1', 1309], [['NN', 'NN_advantag'], 1, 1, 1.0, '1', 1310], [['NN', 'NN_advantag', 'MD'], 1, 1, 1.0, '1', 1311], [['NN', 'NN_advantag', 'NNS'], 1, 1, 1.0, '1', 1312], [['NN', 'NN_advantag', 'NNS', 'MD'], 1, 1, 1.0, '1', 1313], [['NN', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1314], [['NN', 'NN_advantag', 'IN', 'MD'], 1, 1, 1.0, '1', 1315], [['NN', 'NN_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 1316], [['NN', 'NN_advantag', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1317], [['NN', 'IN_over'], 3, 2, 0.6666666666666666, '1', 1318], [['NN', 'IN_over', 'VBG'], 1, 1, 1.0, '1', 1319], [['NN', 'IN_over', 'NN'], 3, 2, 0.6666666666666666, '1', 1320], [['NN', 'IN_over', 'NN', 'VBG'], 1, 1, 1.0, '1', 1321], [['NN', 'IN_over', 'JJ', 'VBG'], 1, 1, 1.0, '1', 1322], [['NN', 'IN_over', 'JJ', 'VBN'], 1, 1, 1.0, '0', 1323], [['NN', 'IN_over', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 1324], [['NN', 'IN_over', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 1325], [['NN', 'IN_over', 'VBN'], 1, 1, 1.0, '0', 1326], [['NN', 'IN_over', 'VBN', 'NN'], 1, 1, 1.0, '0', 1327], [['NN', 'NNS_gain'], 2, 2, 1.0, '1', 1328], [['NN', 'NNS_gain', 'VBP'], 1, 1, 1.0, '1', 1329], [['NN', 'NNS_gain', 'VBP', 'VBN'], 1, 1, 1.0, '1', 1330], [['NN', 'NNS_gain', 'VBP', 'VBN', 'VBN'], 1, 1, 1.0, '1', 1331], [['NN', 'NNS_gain', 'VBN'], 1, 1, 1.0, '1', 1332], [['NN', 'NNS_gain', 'VBN', 'VBN'], 1, 1, 1.0, '1', 1333], [['NN', 'NNS_gain', 'NN'], 1, 1, 1.0, '1', 1334], [['NN', 'NNS_gain', 'JJ'], 1, 1, 1.0, '1', 1335], [['NN', 'NNS_gain', 'JJ', 'NN'], 1, 1, 1.0, '1', 1336], [['NN', 'NNS_gain', 'IN'], 1, 1, 1.0, '1', 1337], [['NN', 'NNS_gain', 'IN', 'NN'], 1, 1, 1.0, '1', 1338], [['NN', 'NNS_gain', 'IN', 'JJ'], 1, 1, 1.0, '1', 1339], [['NN', 'NNS_gain', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 1340], [['NN', 'JJS'], 1, 1, 1.0, '1', 1341], [['NN', 'VBN'], 5, 3, 0.6, '0', 1342], [['NN', 'VBN', 'VBN'], 1, 1, 1.0, '1', 1343], [['NN', 'VBN', 'NN'], 1, 1, 1.0, '0', 1344], [['NN', 'VBN', 'IN'], 3, 2, 0.6666666666666666, '0', 1345], [['NN', 'VBZ'], 1, 1, 1.0, '1', 1346], [['NN', 'VBZ', 'MD'], 1, 1, 1.0, '1', 1347], [['NN', 'VBZ', 'DT'], 1, 1, 1.0, '1', 1348], [['NN', 'VBZ', 'DT', 'MD'], 1, 1, 1.0, '1', 1349], [['NN', 'VBZ', 'DT', 'NNS'], 1, 1, 1.0, '1', 1350], [['NN', 'VBZ', 'DT', 'NNS', 'MD'], 1, 1, 1.0, '1', 1351], [['NN', 'VBZ', 'DT', 'NN_advantag'], 1, 1, 1.0, '1', 1352], [['NN', 'VBZ', 'DT', 'NN_advantag', 'MD'], 1, 1, 1.0, '1', 1353], [['NN', 'VBZ', 'DT', 'NN_advantag', 'NNS'], 1, 1, 1.0, '1', 1354], [['NN', 'VBZ', 'DT', 'NN_advantag', 'NNS', 'MD'], 1, 1, 1.0, '1', 1355], [['NN', 'VBZ', 'DT', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1356], [['NN', 'VBZ', 'DT', 'NN_advantag', 'IN', 'MD'], 1, 1, 1.0, '1', 1357], [['NN', 'VBZ', 'DT', 'NN_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 1358], [['NN', 'VBZ', 'DT', 'NN_advantag', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1359], [['NN', 'VBZ', 'DT', 'IN'], 1, 1, 1.0, '1', 1360], [['NN', 'VBZ', 'DT', 'IN', 'MD'], 1, 1, 1.0, '1', 1361], [['NN', 'VBZ', 'DT', 'IN', 'NNS'], 1, 1, 1.0, '1', 1362], [['NN', 'VBZ', 'DT', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1363], [['NN', 'VBZ', 'NNS'], 1, 1, 1.0, '1', 1364], [['NN', 'VBZ', 'NNS', 'MD'], 1, 1, 1.0, '1', 1365], [['NN', 'VBZ', 'NN_advantag'], 1, 1, 1.0, '1', 1366], [['NN', 'VBZ', 'NN_advantag', 'MD'], 1, 1, 1.0, '1', 1367], [['NN', 'VBZ', 'NN_advantag', 'NNS'], 1, 1, 1.0, '1', 1368], [['NN', 'VBZ', 'NN_advantag', 'NNS', 'MD'], 1, 1, 1.0, '1', 1369], [['NN', 'VBZ', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1370], [['NN', 'VBZ', 'NN_advantag', 'IN', 'MD'], 1, 1, 1.0, '1', 1371], [['NN', 'VBZ', 'NN_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 1372], [['NN', 'VBZ', 'NN_advantag', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1373], [['NN', 'VBZ', 'IN'], 1, 1, 1.0, '1', 1374], [['NN', 'VBZ', 'IN', 'MD'], 1, 1, 1.0, '1', 1375], [['NN', 'VBZ', 'IN', 'NNS'], 1, 1, 1.0, '1', 1376], [['NN', 'VBZ', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1377], [['NN', 'VBP'], 1, 1, 1.0, '1', 1378], [['NN', 'VBP', 'VBN'], 1, 1, 1.0, '1', 1379], [['NN', 'VBP', 'VBN', 'VBN'], 1, 1, 1.0, '1', 1380], [['NN', 'JJ', 'VBG'], 1, 1, 1.0, '1', 1381], [['NN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1382], [['NN', 'JJ', 'VBN'], 1, 1, 1.0, '0', 1383], [['NN', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 1384], [['NN', 'JJ', 'NN'], 3, 2, 0.6666666666666666, '1', 1385], [['NN', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 1386], [['NN', 'IN'], 12, 9, 0.75, '1', 1387], [['NN', 'IN', 'MD'], 1, 1, 1.0, '1', 1388], [['NN', 'IN', 'NN'], 5, 5, 1.0, '1', 1389], [['NN', 'IN', 'JJS'], 1, 1, 1.0, '1', 1390], [['NN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1391], [['NN', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 1392], [['NN', 'IN', 'IN'], 3, 2, 0.6666666666666666, '1', 1393], [['NN', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1394], [['NN', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 1395], [['NN', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1396], [['NN', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1397], [['NN', 'IN', 'DT'], 1, 1, 1.0, '1', 1398], [['NN', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 1399], [['NN', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1400], [['NN', 'RB_well'], 3, 2, 0.6666666666666666, '1', 1401], [['NN', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 1402], [['NN', 'RB_well', 'NN'], 2, 2, 1.0, '1', 1403], [['NN', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 1404], [['NN', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1405], [['NN', 'RB_well', 'IN'], 3, 2, 0.6666666666666666, '1', 1406], [['NN', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 1407], [['NN', 'RB_well', 'IN', 'NN'], 2, 2, 1.0, '1', 1408], [['NN', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 1409], [['NN', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1410], [['NN', 'RB_well', 'IN', 'IN'], 3, 2, 0.6666666666666666, '1', 1411], [['NN', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1412], [['NN', 'RB_well', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 1413], [['NN', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1414], [['NN', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1415], [['NN', 'VBG_match'], 2, 2, 1.0, '1', 1416], [['NN', 'VBG_match', 'NNS'], 2, 2, 1.0, '1', 1417], [['NN', 'VBG_match', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1418], [['NN', 'VBG_match', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1419], [['NN', 'VBG_match', 'NNS', 'RB'], 1, 1, 1.0, '1', 1420], [['NN', 'VBG_match', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 1421], [['NN', 'VBG_match', 'NNS', 'IN'], 1, 1, 1.0, '1', 1422], [['NN', 'VBG_match', 'VBN'], 1, 1, 1.0, '1', 1423], [['NN', 'VBG_match', 'VBN', 'IN'], 1, 1, 1.0, '1', 1424], [['NN', 'VBG_match', 'RB'], 1, 1, 1.0, '1', 1425], [['NN', 'VBG_match', 'RB', 'RB'], 1, 1, 1.0, '1', 1426], [['NN', 'VBG_match', 'IN'], 1, 1, 1.0, '1', 1427], [['NN', 'JJR_better'], 1, 1, 1.0, '1', 1428], [['NN', 'JJR_better', 'DT'], 1, 1, 1.0, '1', 1429], [['NN', 'JJR_better', 'DT', 'JJS'], 1, 1, 1.0, '1', 1430], [['NN', 'JJR_better', 'JJS'], 1, 1, 1.0, '1', 1431], [['NN', 'JJR_better', 'IN'], 1, 1, 1.0, '1', 1432], [['NN', 'JJR_better', 'IN', 'DT'], 1, 1, 1.0, '1', 1433], [['NN', 'JJR_better', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 1434], [['NN', 'JJR_better', 'IN', 'JJS'], 1, 1, 1.0, '1', 1435], [['NN', 'NNS'], 7, 6, 0.8571428571428571, '1', 1436], [['NN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1437], [['NN', 'NNS', 'VBG'], 1, 1, 1.0, '1', 1438], [['NN', 'NNS', 'RB'], 2, 2, 1.0, '1', 1439], [['NN', 'NNS', 'RB', 'RB_well'], 1, 1, 1.0, '1', 1440], [['NN', 'NNS', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1441], [['NN', 'NNS', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '1', 1442], [['NN', 'NNS', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1443], [['NN', 'NNS', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 1444], [['NN', 'NNS', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1445], [['NN', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 1446], [['NN', 'NNS', 'RB', 'NN'], 1, 1, 1.0, '1', 1447], [['NN', 'NNS', 'RB', 'IN'], 1, 1, 1.0, '1', 1448], [['NN', 'NNS', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1449], [['NN', 'NNS', 'RB', 'IN', 'IN'], 1, 1, 1.0, '1', 1450], [['NN', 'NNS', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1451], [['NN', 'NNS', 'NN'], 2, 2, 1.0, '1', 1452], [['NN', 'NNS', 'NN', 'VBG'], 1, 1, 1.0, '1', 1453], [['NN', 'NNS', 'IN_over'], 1, 1, 1.0, '1', 1454], [['NN', 'NNS', 'IN_over', 'VBG'], 1, 1, 1.0, '1', 1455], [['NN', 'NNS', 'IN_over', 'NN'], 1, 1, 1.0, '1', 1456], [['NN', 'NNS', 'IN_over', 'NN', 'VBG'], 1, 1, 1.0, '1', 1457], [['NN', 'NNS', 'IN_over', 'JJ'], 1, 1, 1.0, '1', 1458], [['NN', 'NNS', 'IN_over', 'JJ', 'VBG'], 1, 1, 1.0, '1', 1459], [['NN', 'NNS', 'IN_over', 'JJ', 'NN'], 1, 1, 1.0, '1', 1460], [['NN', 'NNS', 'IN_over', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 1461], [['NN', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1462], [['NN', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1463], [['NN', 'NNS', 'JJ'], 1, 1, 1.0, '1', 1464], [['NN', 'NNS', 'JJ', 'VBG'], 1, 1, 1.0, '1', 1465], [['NN', 'NNS', 'JJ', 'NN'], 1, 1, 1.0, '1', 1466], [['NN', 'NNS', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 1467], [['NN', 'NNS', 'IN'], 2, 2, 1.0, '1', 1468], [['NN', 'NNS', 'IN', 'NN'], 1, 1, 1.0, '1', 1469], [['NN', 'NNS', 'IN', 'IN'], 1, 1, 1.0, '1', 1470], [['NN', 'NNS', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1471], [['NN', 'NNS', 'RB_well'], 1, 1, 1.0, '1', 1472], [['NN', 'NNS', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1473], [['NN', 'NNS', 'RB_well', 'IN'], 1, 1, 1.0, '1', 1474], [['NN', 'NNS', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1475], [['NN', 'NNS', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 1476], [['NN', 'NNS', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1477], [['NN', 'DT'], 2, 2, 1.0, '1', 1478], [['NN', 'DT', 'NNS'], 1, 1, 1.0, '1', 1479], [['NN', 'DT', 'NNS', 'MD'], 1, 1, 1.0, '1', 1480], [['NN', 'DT', 'MD'], 1, 1, 1.0, '1', 1481], [['NN', 'DT', 'JJS'], 1, 1, 1.0, '1', 1482], [['NN', 'DT', 'NN_advantag'], 1, 1, 1.0, '1', 1483], [['NN', 'DT', 'NN_advantag', 'MD'], 1, 1, 1.0, '1', 1484], [['NN', 'DT', 'NN_advantag', 'NNS'], 1, 1, 1.0, '1', 1485], [['NN', 'DT', 'NN_advantag', 'NNS', 'MD'], 1, 1, 1.0, '1', 1486], [['NN', 'DT', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1487], [['NN', 'DT', 'NN_advantag', 'IN', 'MD'], 1, 1, 1.0, '1', 1488], [['NN', 'DT', 'NN_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 1489], [['NN', 'DT', 'NN_advantag', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1490], [['NN', 'DT', 'IN'], 1, 1, 1.0, '1', 1491], [['NN', 'DT', 'IN', 'MD'], 1, 1, 1.0, '1', 1492], [['NN', 'DT', 'IN', 'NNS'], 1, 1, 1.0, '1', 1493], [['NN', 'DT', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1494], [['JJR_smaller'], 1, 1, 1.0, '0', 1495], [['JJR_smaller', 'VBP'], 1, 1, 1.0, '0', 1496], [['JJR_smaller', 'VBP', 'VBN'], 1, 1, 1.0, '0', 1497], [['JJR_smaller', 'NNS'], 1, 1, 1.0, '0', 1498], [['JJR_smaller', 'NNS', 'VBP'], 1, 1, 1.0, '0', 1499], [['JJR_smaller', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 1500], [['JJR_smaller', 'NNS', 'VBN'], 1, 1, 1.0, '0', 1501], [['JJR_smaller', 'VBN'], 1, 1, 1.0, '0', 1502], [['DT_all'], 2, 2, 1.0, '1', 1503], [['DT_all', 'DT'], 1, 1, 1.0, '1', 1504], [['DT_all', 'DT', 'RB'], 1, 1, 1.0, '1', 1505], [['DT_all', 'NNS'], 2, 2, 1.0, '1', 1506], [['DT_all', 'NNS', 'DT'], 1, 1, 1.0, '1', 1507], [['DT_all', 'NNS', 'DT', 'RB'], 1, 1, 1.0, '1', 1508], [['DT_all', 'NNS', 'NNS'], 1, 1, 1.0, '1', 1509], [['DT_all', 'NNS', 'RB'], 1, 1, 1.0, '1', 1510], [['DT_all', 'RB'], 1, 1, 1.0, '1', 1511], [['DT_all', 'CD'], 1, 1, 1.0, '1', 1512], [['DT_all', 'CD', 'NNS'], 1, 1, 1.0, '1', 1513], [['DT_all', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 1514], [['VBD'], 2, 2, 1.0, '1', 1515], [['VBD', 'JJR_better'], 1, 1, 1.0, '1', 1516], [['VBD', 'JJR_better', 'DT'], 1, 1, 1.0, '1', 1517], [['VBD', 'JJR_better', 'DT', 'JJS'], 1, 1, 1.0, '1', 1518], [['VBD', 'JJR_better', 'JJS'], 1, 1, 1.0, '1', 1519], [['VBD', 'JJR_better', 'IN'], 1, 1, 1.0, '1', 1520], [['VBD', 'JJR_better', 'IN', 'DT'], 1, 1, 1.0, '1', 1521], [['VBD', 'JJR_better', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 1522], [['VBD', 'JJR_better', 'IN', 'JJS'], 1, 1, 1.0, '1', 1523], [['VBD', 'VB'], 1, 1, 1.0, '1', 1524], [['VBD', 'VB', 'IN'], 1, 1, 1.0, '1', 1525], [['VBD', 'JJ_compar'], 1, 1, 1.0, '1', 1526], [['VBD', 'JJ_compar', 'TO'], 1, 1, 1.0, '1', 1527], [['VBD', 'JJ_compar', 'TO', 'VB'], 1, 1, 1.0, '1', 1528], [['VBD', 'JJ_compar', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 1529], [['VBD', 'JJ_compar', 'TO', 'IN'], 1, 1, 1.0, '1', 1530], [['VBD', 'JJ_compar', 'VB'], 1, 1, 1.0, '1', 1531], [['VBD', 'JJ_compar', 'VB', 'IN'], 1, 1, 1.0, '1', 1532], [['VBD', 'JJ_compar', 'IN'], 1, 1, 1.0, '1', 1533], [['VBD', 'JJS'], 1, 1, 1.0, '1', 1534], [['VBD', 'TO'], 1, 1, 1.0, '1', 1535], [['VBD', 'TO', 'VB'], 1, 1, 1.0, '1', 1536], [['VBD', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 1537], [['VBD', 'TO', 'IN'], 1, 1, 1.0, '1', 1538], [['VBD', 'RB'], 1, 1, 1.0, '1', 1539], [['VBD', 'RB', 'TO'], 1, 1, 1.0, '1', 1540], [['VBD', 'RB', 'TO', 'VB'], 1, 1, 1.0, '1', 1541], [['VBD', 'RB', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 1542], [['VBD', 'RB', 'TO', 'IN'], 1, 1, 1.0, '1', 1543], [['VBD', 'RB', 'VB'], 1, 1, 1.0, '1', 1544], [['VBD', 'RB', 'VB', 'IN'], 1, 1, 1.0, '1', 1545], [['VBD', 'RB', 'JJ_compar'], 1, 1, 1.0, '1', 1546], [['VBD', 'RB', 'JJ_compar', 'TO'], 1, 1, 1.0, '1', 1547], [['VBD', 'RB', 'JJ_compar', 'TO', 'VB'], 1, 1, 1.0, '1', 1548], [['VBD', 'RB', 'JJ_compar', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 1549], [['VBD', 'RB', 'JJ_compar', 'TO', 'IN'], 1, 1, 1.0, '1', 1550], [['VBD', 'RB', 'JJ_compar', 'VB'], 1, 1, 1.0, '1', 1551], [['VBD', 'RB', 'JJ_compar', 'VB', 'IN'], 1, 1, 1.0, '1', 1552], [['VBD', 'RB', 'JJ_compar', 'IN'], 1, 1, 1.0, '1', 1553], [['VBD', 'RB', 'IN'], 1, 1, 1.0, '1', 1554], [['VBD', 'IN'], 2, 2, 1.0, '1', 1555], [['VBD', 'IN', 'DT'], 1, 1, 1.0, '1', 1556], [['VBD', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 1557], [['VBD', 'IN', 'JJS'], 1, 1, 1.0, '1', 1558], [['VBD', 'DT'], 1, 1, 1.0, '1', 1559], [['VBD', 'DT', 'JJS'], 1, 1, 1.0, '1', 1560], [['NNS_advantag'], 2, 2, 1.0, '1', 1561], [['NNS_advantag', 'NNS'], 1, 1, 1.0, '1', 1562], [['NNS_advantag', 'NNS', 'IN'], 1, 1, 1.0, '1', 1563], [['NNS_advantag', 'NN'], 1, 1, 1.0, '1', 1564], [['NNS_advantag', 'NN', 'IN'], 1, 1, 1.0, '1', 1565], [['NNS_advantag', 'IN'], 2, 2, 1.0, '1', 1566], [['NNS_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 1567], [['NNS_advantag', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 1568], [['NNS_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1569], [['NNS_advantag', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1570], [['NNS_advantag', 'IN', 'IN'], 2, 2, 1.0, '1', 1571], [['TO'], 3, 3, 1.0, '1', 1572], [['TO', 'VB'], 3, 3, 1.0, '1', 1573], [['TO', 'VB', 'JJ_advantag'], 1, 1, 1.0, '1', 1574], [['TO', 'VB', 'JJ'], 1, 1, 1.0, '1', 1575], [['TO', 'VB', 'IN'], 1, 1, 1.0, '1', 1576], [['TO', 'JJ_advantag'], 1, 1, 1.0, '1', 1577], [['TO', 'JJ'], 1, 1, 1.0, '1', 1578], [['TO', 'IN'], 1, 1, 1.0, '1', 1579], [['PRP'], 2, 2, 1.0, '0', 1580], [['PRP', 'NN'], 2, 2, 1.0, '0', 1581], [['PRP', 'NN', 'VBN'], 2, 2, 1.0, '0', 1582], [['PRP', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 1583], [['PRP', 'NN', 'IN'], 2, 2, 1.0, '0', 1584], [['PRP', 'VBN'], 2, 2, 1.0, '0', 1585], [['PRP', 'VBN', 'IN'], 2, 2, 1.0, '0', 1586], [['PRP', 'VBP'], 2, 2, 1.0, '0', 1587], [['PRP', 'VBP', 'DT'], 2, 2, 1.0, '0', 1588], [['PRP', 'VBP', 'DT', 'JJS_best'], 2, 2, 1.0, '0', 1589], [['PRP', 'VBP', 'DT', 'JJS_best', 'VBN'], 2, 2, 1.0, '0', 1590], [['PRP', 'VBP', 'DT', 'JJS_best', 'VBN', 'IN'], 2, 2, 1.0, '0', 1591], [['PRP', 'VBP', 'DT', 'JJS_best', 'NN'], 2, 2, 1.0, '0', 1592], [['PRP', 'VBP', 'DT', 'JJS_best', 'NN', 'VBN'], 2, 2, 1.0, '0', 1593], [['PRP', 'VBP', 'DT', 'JJS_best', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 1594], [['PRP', 'VBP', 'DT', 'JJS_best', 'NN', 'IN'], 2, 2, 1.0, '0', 1595], [['PRP', 'VBP', 'DT', 'JJS_best', 'IN'], 2, 2, 1.0, '0', 1596], [['PRP', 'VBP', 'DT', 'VBN'], 2, 2, 1.0, '0', 1597], [['PRP', 'VBP', 'DT', 'VBN', 'IN'], 2, 2, 1.0, '0', 1598], [['PRP', 'VBP', 'DT', 'NN'], 2, 2, 1.0, '0', 1599], [['PRP', 'VBP', 'DT', 'NN', 'VBN'], 2, 2, 1.0, '0', 1600], [['PRP', 'VBP', 'DT', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 1601], [['PRP', 'VBP', 'DT', 'NN', 'IN'], 2, 2, 1.0, '0', 1602], [['PRP', 'VBP', 'DT', 'IN'], 2, 2, 1.0, '0', 1603], [['PRP', 'VBP', 'JJS_best'], 2, 2, 1.0, '0', 1604], [['PRP', 'VBP', 'JJS_best', 'VBN'], 2, 2, 1.0, '0', 1605], [['PRP', 'VBP', 'JJS_best', 'VBN', 'IN'], 2, 2, 1.0, '0', 1606], [['PRP', 'VBP', 'JJS_best', 'NN'], 2, 2, 1.0, '0', 1607], [['PRP', 'VBP', 'JJS_best', 'NN', 'VBN'], 2, 2, 1.0, '0', 1608], [['PRP', 'VBP', 'JJS_best', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 1609], [['PRP', 'VBP', 'JJS_best', 'NN', 'IN'], 2, 2, 1.0, '0', 1610], [['PRP', 'VBP', 'JJS_best', 'IN'], 2, 2, 1.0, '0', 1611], [['PRP', 'VBP', 'VBN'], 2, 2, 1.0, '0', 1612], [['PRP', 'VBP', 'VBN', 'IN'], 2, 2, 1.0, '0', 1613], [['PRP', 'VBP', 'NN'], 2, 2, 1.0, '0', 1614], [['PRP', 'VBP', 'NN', 'VBN'], 2, 2, 1.0, '0', 1615], [['PRP', 'VBP', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 1616], [['PRP', 'VBP', 'NN', 'IN'], 2, 2, 1.0, '0', 1617], [['PRP', 'VBP', 'IN'], 2, 2, 1.0, '0', 1618], [['PRP', 'JJS_best'], 2, 2, 1.0, '0', 1619], [['PRP', 'JJS_best', 'VBN'], 2, 2, 1.0, '0', 1620], [['PRP', 'JJS_best', 'VBN', 'IN'], 2, 2, 1.0, '0', 1621], [['PRP', 'JJS_best', 'NN'], 2, 2, 1.0, '0', 1622], [['PRP', 'JJS_best', 'NN', 'VBN'], 2, 2, 1.0, '0', 1623], [['PRP', 'JJS_best', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 1624], [['PRP', 'JJS_best', 'NN', 'IN'], 2, 2, 1.0, '0', 1625], [['PRP', 'JJS_best', 'IN'], 2, 2, 1.0, '0', 1626], [['PRP', 'IN'], 2, 2, 1.0, '0', 1627], [['PRP', 'DT'], 2, 2, 1.0, '0', 1628], [['PRP', 'DT', 'JJS_best'], 2, 2, 1.0, '0', 1629], [['PRP', 'DT', 'JJS_best', 'VBN'], 2, 2, 1.0, '0', 1630], [['PRP', 'DT', 'JJS_best', 'VBN', 'IN'], 2, 2, 1.0, '0', 1631], [['PRP', 'DT', 'JJS_best', 'NN'], 2, 2, 1.0, '0', 1632], [['PRP', 'DT', 'JJS_best', 'NN', 'VBN'], 2, 2, 1.0, '0', 1633], [['PRP', 'DT', 'JJS_best', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 1634], [['PRP', 'DT', 'JJS_best', 'NN', 'IN'], 2, 2, 1.0, '0', 1635], [['PRP', 'DT', 'JJS_best', 'IN'], 2, 2, 1.0, '0', 1636], [['PRP', 'DT', 'VBN'], 2, 2, 1.0, '0', 1637], [['PRP', 'DT', 'VBN', 'IN'], 2, 2, 1.0, '0', 1638], [['PRP', 'DT', 'NN'], 2, 2, 1.0, '0', 1639], [['PRP', 'DT', 'NN', 'VBN'], 2, 2, 1.0, '0', 1640], [['PRP', 'DT', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 1641], [['PRP', 'DT', 'NN', 'IN'], 2, 2, 1.0, '0', 1642], [['PRP', 'DT', 'IN'], 2, 2, 1.0, '0', 1643], [['RB'], 13, 11, 0.8461538461538461, '1', 1644], [['RB', 'VB_fail'], 1, 1, 1.0, '1', 1645], [['RB', 'VB_fail', 'NN'], 1, 1, 1.0, '1', 1646], [['RB', 'VB_fail', 'RB'], 1, 1, 1.0, '1', 1647], [['RB', 'VB_fail', 'RB', 'NN'], 1, 1, 1.0, '1', 1648], [['RB', 'VB_fail', 'RB', 'IN'], 1, 1, 1.0, '1', 1649], [['RB', 'VB_fail', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1650], [['RB', 'VB_fail', 'IN'], 1, 1, 1.0, '1', 1651], [['RB', 'VB_fail', 'IN', 'NN'], 1, 1, 1.0, '1', 1652], [['RB', 'JJR_better'], 1, 1, 1.0, '1', 1653], [['RB', 'JJR_better', 'MD'], 1, 1, 1.0, '1', 1654], [['RB', 'JJR_better', 'MD', 'VB'], 1, 1, 1.0, '1', 1655], [['RB', 'JJR_better', 'VB'], 1, 1, 1.0, '1', 1656], [['RB', 'JJR_better', 'NNS'], 1, 1, 1.0, '1', 1657], [['RB', 'JJR_better', 'NNS', 'MD'], 1, 1, 1.0, '1', 1658], [['RB', 'JJR_better', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 1659], [['RB', 'JJR_better', 'NNS', 'VB'], 1, 1, 1.0, '1', 1660], [['RB', 'VB'], 3, 3, 1.0, '1', 1661], [['RB', 'VB', 'DT'], 1, 1, 1.0, '1', 1662], [['RB', 'VB', 'DT', 'NN'], 1, 1, 1.0, '1', 1663], [['RB', 'VB', 'NN'], 1, 1, 1.0, '1', 1664], [['RB', 'VB', 'NN_advantag'], 1, 1, 1.0, '1', 1665], [['RB', 'VB', 'NN_advantag', 'DT'], 1, 1, 1.0, '1', 1666], [['RB', 'VB', 'NN_advantag', 'DT', 'NN'], 1, 1, 1.0, '1', 1667], [['RB', 'VB', 'NN_advantag', 'NN'], 1, 1, 1.0, '1', 1668], [['RB', 'VB', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1669], [['RB', 'VB', 'NN_advantag', 'IN', 'DT'], 1, 1, 1.0, '1', 1670], [['RB', 'VB', 'NN_advantag', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 1671], [['RB', 'VB', 'NN_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1672], [['RB', 'VB', 'JJ'], 1, 1, 1.0, '1', 1673], [['RB', 'VB', 'JJ', 'DT'], 1, 1, 1.0, '1', 1674], [['RB', 'VB', 'JJ', 'DT', 'NN'], 1, 1, 1.0, '1', 1675], [['RB', 'VB', 'JJ', 'NN'], 1, 1, 1.0, '1', 1676], [['RB', 'VB', 'JJ', 'NN_advantag'], 1, 1, 1.0, '1', 1677], [['RB', 'VB', 'JJ', 'NN_advantag', 'DT'], 1, 1, 1.0, '1', 1678], [['RB', 'VB', 'JJ', 'NN_advantag', 'DT', 'NN'], 1, 1, 1.0, '1', 1679], [['RB', 'VB', 'JJ', 'NN_advantag', 'NN'], 1, 1, 1.0, '1', 1680], [['RB', 'VB', 'JJ', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1681], [['RB', 'VB', 'JJ', 'NN_advantag', 'IN', 'DT'], 1, 1, 1.0, '1', 1682], [['RB', 'VB', 'JJ', 'NN_advantag', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 1683], [['RB', 'VB', 'JJ', 'NN_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1684], [['RB', 'VB', 'JJ', 'IN'], 1, 1, 1.0, '1', 1685], [['RB', 'VB', 'JJ', 'IN', 'DT'], 1, 1, 1.0, '1', 1686], [['RB', 'VB', 'JJ', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 1687], [['RB', 'VB', 'JJ', 'IN', 'NN'], 1, 1, 1.0, '1', 1688], [['RB', 'VB', 'IN'], 2, 2, 1.0, '1', 1689], [['RB', 'VB', 'IN', 'DT'], 1, 1, 1.0, '1', 1690], [['RB', 'VB', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 1691], [['RB', 'VB', 'IN', 'NN'], 1, 1, 1.0, '1', 1692], [['RB', 'JJ'], 3, 2, 0.6666666666666666, '1', 1693], [['RB', 'JJ', 'DT'], 1, 1, 1.0, '1', 1694], [['RB', 'JJ', 'DT', 'NN'], 1, 1, 1.0, '1', 1695], [['RB', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1696], [['RB', 'JJ', 'NN'], 1, 1, 1.0, '1', 1697], [['RB', 'JJ', 'NN_advantag'], 1, 1, 1.0, '1', 1698], [['RB', 'JJ', 'NN_advantag', 'DT'], 1, 1, 1.0, '1', 1699], [['RB', 'JJ', 'NN_advantag', 'DT', 'NN'], 1, 1, 1.0, '1', 1700], [['RB', 'JJ', 'NN_advantag', 'NN'], 1, 1, 1.0, '1', 1701], [['RB', 'JJ', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1702], [['RB', 'JJ', 'NN_advantag', 'IN', 'DT'], 1, 1, 1.0, '1', 1703], [['RB', 'JJ', 'NN_advantag', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 1704], [['RB', 'JJ', 'NN_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1705], [['RB', 'JJ', 'IN'], 1, 1, 1.0, '1', 1706], [['RB', 'JJ', 'IN', 'DT'], 1, 1, 1.0, '1', 1707], [['RB', 'JJ', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 1708], [['RB', 'JJ', 'IN', 'NN'], 1, 1, 1.0, '1', 1709], [['RB', 'NN'], 6, 6, 1.0, '1', 1710], [['RB', 'NN', 'IN'], 1, 1, 1.0, '1', 1711], [['RB', 'NN_advantag'], 1, 1, 1.0, '1', 1712], [['RB', 'NN_advantag', 'DT'], 1, 1, 1.0, '1', 1713], [['RB', 'NN_advantag', 'DT', 'NN'], 1, 1, 1.0, '1', 1714], [['RB', 'NN_advantag', 'NN'], 1, 1, 1.0, '1', 1715], [['RB', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1716], [['RB', 'NN_advantag', 'IN', 'DT'], 1, 1, 1.0, '1', 1717], [['RB', 'NN_advantag', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 1718], [['RB', 'NN_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1719], [['RB', 'JJR_smaller'], 1, 1, 1.0, '0', 1720], [['RB', 'JJR_smaller', 'VBP'], 1, 1, 1.0, '0', 1721], [['RB', 'JJR_smaller', 'VBP', 'VBN'], 1, 1, 1.0, '0', 1722], [['RB', 'JJR_smaller', 'NNS'], 1, 1, 1.0, '0', 1723], [['RB', 'JJR_smaller', 'NNS', 'VBP'], 1, 1, 1.0, '0', 1724], [['RB', 'JJR_smaller', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 1725], [['RB', 'JJR_smaller', 'NNS', 'VBN'], 1, 1, 1.0, '0', 1726], [['RB', 'JJR_smaller', 'VBN'], 1, 1, 1.0, '0', 1727], [['RB', 'IN_over'], 1, 1, 1.0, '1', 1728], [['RB', 'IN_over', 'NN'], 1, 1, 1.0, '1', 1729], [['RB', 'MD'], 1, 1, 1.0, '1', 1730], [['RB', 'MD', 'VB'], 1, 1, 1.0, '1', 1731], [['RB', 'VBN'], 1, 1, 1.0, '0', 1732], [['RB', 'JJ_compar'], 1, 1, 1.0, '1', 1733], [['RB', 'JJ_compar', 'TO'], 1, 1, 1.0, '1', 1734], [['RB', 'JJ_compar', 'TO', 'VB'], 1, 1, 1.0, '1', 1735], [['RB', 'JJ_compar', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 1736], [['RB', 'JJ_compar', 'TO', 'IN'], 1, 1, 1.0, '1', 1737], [['RB', 'JJ_compar', 'VB'], 1, 1, 1.0, '1', 1738], [['RB', 'JJ_compar', 'VB', 'IN'], 1, 1, 1.0, '1', 1739], [['RB', 'JJ_compar', 'IN'], 1, 1, 1.0, '1', 1740], [['RB', 'NNS_advantag'], 1, 1, 1.0, '1', 1741], [['RB', 'NNS_advantag', 'NN'], 1, 1, 1.0, '1', 1742], [['RB', 'NNS_advantag', 'NN', 'IN'], 1, 1, 1.0, '1', 1743], [['RB', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 1744], [['RB', 'NNS_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1745], [['RB', 'NNS_advantag', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1746], [['RB', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 1747], [['RB', 'TO'], 1, 1, 1.0, '1', 1748], [['RB', 'TO', 'VB'], 1, 1, 1.0, '1', 1749], [['RB', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 1750], [['RB', 'TO', 'IN'], 1, 1, 1.0, '1', 1751], [['RB', 'VBP', 'NNS_advantag'], 1, 1, 1.0, '1', 1752], [['RB', 'VBP', 'NNS_advantag', 'NN'], 1, 1, 1.0, '1', 1753], [['RB', 'VBP', 'NNS_advantag', 'NN', 'IN'], 1, 1, 1.0, '1', 1754], [['RB', 'VBP', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 1755], [['RB', 'VBP', 'NNS_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1756], [['RB', 'VBP', 'NNS_advantag', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1757], [['RB', 'VBP', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 1758], [['RB', 'VBP', 'DT'], 1, 1, 1.0, '1', 1759], [['RB', 'VBP', 'DT', 'NNS_advantag'], 1, 1, 1.0, '1', 1760], [['RB', 'VBP', 'DT', 'NNS_advantag', 'NN'], 1, 1, 1.0, '1', 1761], [['RB', 'VBP', 'DT', 'NNS_advantag', 'NN', 'IN'], 1, 1, 1.0, '1', 1762], [['RB', 'VBP', 'DT', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 1763], [['RB', 'VBP', 'DT', 'NNS_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1764], [['RB', 'VBP', 'DT', 'NNS_advantag', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1765], [['RB', 'VBP', 'DT', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 1766], [['RB', 'VBP', 'DT', 'NN'], 1, 1, 1.0, '1', 1767], [['RB', 'VBP', 'DT', 'NN', 'IN'], 1, 1, 1.0, '1', 1768], [['RB', 'VBP', 'DT', 'IN'], 1, 1, 1.0, '1', 1769], [['RB', 'VBP', 'DT', 'IN', 'NN'], 1, 1, 1.0, '1', 1770], [['RB', 'VBP', 'DT', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1771], [['RB', 'VBP', 'DT', 'IN', 'IN'], 1, 1, 1.0, '1', 1772], [['RB', 'VBP', 'VBN'], 1, 1, 1.0, '0', 1773], [['RB', 'VBP', 'NN'], 1, 1, 1.0, '1', 1774], [['RB', 'VBP', 'NN', 'IN'], 1, 1, 1.0, '1', 1775], [['RB', 'VBP', 'IN'], 1, 1, 1.0, '1', 1776], [['RB', 'VBP', 'IN', 'NN'], 1, 1, 1.0, '1', 1777], [['RB', 'VBP', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1778], [['RB', 'VBP', 'IN', 'IN'], 1, 1, 1.0, '1', 1779], [['RB', 'RB'], 3, 3, 1.0, '1', 1780], [['RB', 'RB', 'IN_over'], 1, 1, 1.0, '1', 1781], [['RB', 'RB', 'IN_over', 'NN'], 1, 1, 1.0, '1', 1782], [['RB', 'RB', 'NN'], 2, 2, 1.0, '1', 1783], [['RB', 'RB', 'IN'], 2, 2, 1.0, '1', 1784], [['RB', 'RB', 'IN', 'IN_over'], 1, 1, 1.0, '1', 1785], [['RB', 'RB', 'IN', 'IN_over', 'NN'], 1, 1, 1.0, '1', 1786], [['RB', 'RB', 'IN', 'NN'], 2, 2, 1.0, '1', 1787], [['RB', 'IN'], 9, 8, 0.8888888888888888, '1', 1788], [['RB', 'IN', 'NN'], 6, 6, 1.0, '1', 1789], [['RB', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1790], [['RB', 'IN', 'IN_over'], 1, 1, 1.0, '1', 1791], [['RB', 'IN', 'IN_over', 'NN'], 1, 1, 1.0, '1', 1792], [['RB', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1793], [['RB', 'IN', 'IN'], 4, 3, 0.75, '1', 1794], [['RB', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1795], [['RB', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 1796], [['RB', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1797], [['RB', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1798], [['RB', 'IN', 'DT'], 2, 2, 1.0, '1', 1799], [['RB', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 1800], [['RB', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 1801], [['RB', 'IN', 'NNS'], 1, 1, 1.0, '0', 1802], [['RB', 'RB_well'], 3, 2, 0.6666666666666666, '1', 1803], [['RB', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 1804], [['RB', 'RB_well', 'NN'], 2, 2, 1.0, '1', 1805], [['RB', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 1806], [['RB', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1807], [['RB', 'RB_well', 'IN'], 3, 2, 0.6666666666666666, '1', 1808], [['RB', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 1809], [['RB', 'RB_well', 'IN', 'NN'], 2, 2, 1.0, '1', 1810], [['RB', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 1811], [['RB', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1812], [['RB', 'RB_well', 'IN', 'IN'], 3, 2, 0.6666666666666666, '1', 1813], [['RB', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1814], [['RB', 'RB_well', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 1815], [['RB', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1816], [['RB', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1817], [['RB', 'DT'], 3, 3, 1.0, '1', 1818], [['RB', 'DT', 'NNS_advantag'], 1, 1, 1.0, '1', 1819], [['RB', 'DT', 'NNS_advantag', 'NN'], 1, 1, 1.0, '1', 1820], [['RB', 'DT', 'NNS_advantag', 'NN', 'IN'], 1, 1, 1.0, '1', 1821], [['RB', 'DT', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 1822], [['RB', 'DT', 'NNS_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1823], [['RB', 'DT', 'NNS_advantag', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1824], [['RB', 'DT', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 1825], [['RB', 'DT', 'NN'], 2, 2, 1.0, '1', 1826], [['RB', 'DT', 'NN', 'IN'], 1, 1, 1.0, '1', 1827], [['RB', 'DT', 'JJ'], 1, 1, 1.0, '1', 1828], [['RB', 'DT', 'IN'], 1, 1, 1.0, '1', 1829], [['RB', 'DT', 'IN', 'NN'], 1, 1, 1.0, '1', 1830], [['RB', 'DT', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1831], [['RB', 'DT', 'IN', 'IN'], 1, 1, 1.0, '1', 1832], [['RB', 'NNS'], 3, 2, 0.6666666666666666, '0', 1833], [['RB', 'NNS', 'MD'], 1, 1, 1.0, '1', 1834], [['RB', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 1835], [['RB', 'NNS', 'VB'], 1, 1, 1.0, '1', 1836], [['RB', 'NNS', 'VBP'], 1, 1, 1.0, '0', 1837], [['RB', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 1838], [['RB', 'NNS', 'VBN'], 1, 1, 1.0, '0', 1839], [['RB', 'VBN_compar'], 1, 1, 1.0, '1', 1840], [['RB', 'VBN_compar', 'DT'], 1, 1, 1.0, '1', 1841], [['RB', 'VBN_compar', 'DT', 'JJ'], 1, 1, 1.0, '1', 1842], [['RB', 'VBN_compar', 'JJ'], 1, 1, 1.0, '1', 1843], [['RB', 'VBN_compar', 'IN'], 1, 1, 1.0, '1', 1844], [['RB', 'VBN_compar', 'IN', 'DT'], 1, 1, 1.0, '1', 1845], [['RB', 'VBN_compar', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 1846], [['RB', 'VBN_compar', 'IN', 'JJ'], 1, 1, 1.0, '1', 1847], [['NNS'], 16, 13, 0.8125, '1', 1848], [['NNS', 'DT_both'], 1, 1, 1.0, '1', 1849], [['NNS', 'DT_both', 'NNS'], 1, 1, 1.0, '1', 1850], [['NNS', 'DT_both', 'VBG'], 1, 1, 1.0, '1', 1851], [['NNS', 'DT_both', 'VBG', 'NNS'], 1, 1, 1.0, '1', 1852], [['NNS', 'DT_both', 'NN'], 1, 1, 1.0, '1', 1853], [['NNS', 'DT_both', 'NN', 'NNS'], 1, 1, 1.0, '1', 1854], [['NNS', 'DT_both', 'NN', 'VBG'], 1, 1, 1.0, '1', 1855], [['NNS', 'DT_both', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 1856], [['NNS', 'VB'], 1, 1, 1.0, '1', 1857], [['NNS', 'VBG'], 2, 2, 1.0, '1', 1858], [['NNS', 'VBG', 'NNS'], 1, 1, 1.0, '1', 1859], [['NNS', 'RB'], 5, 4, 0.8, '1', 1860], [['NNS', 'RB', 'JJ'], 1, 1, 1.0, '0', 1861], [['NNS', 'RB', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1862], [['NNS', 'RB', 'NN'], 2, 2, 1.0, '1', 1863], [['NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 1864], [['NNS', 'RB', 'IN'], 3, 2, 0.6666666666666666, '1', 1865], [['NNS', 'RB', 'IN', 'NNS'], 1, 1, 1.0, '0', 1866], [['NNS', 'RB', 'IN', 'NN'], 2, 2, 1.0, '1', 1867], [['NNS', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '0', 1868], [['NNS', 'RB', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1869], [['NNS', 'RB', 'IN', 'IN'], 3, 2, 0.6666666666666666, '1', 1870], [['NNS', 'RB', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1871], [['NNS', 'RB', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 1872], [['NNS', 'RB', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1873], [['NNS', 'RB', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1874], [['NNS', 'RB', 'RB_well'], 3, 2, 0.6666666666666666, '1', 1875], [['NNS', 'RB', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 1876], [['NNS', 'RB', 'RB_well', 'NN'], 2, 2, 1.0, '1', 1877], [['NNS', 'RB', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 1878], [['NNS', 'RB', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1879], [['NNS', 'RB', 'RB_well', 'IN'], 3, 2, 0.6666666666666666, '1', 1880], [['NNS', 'RB', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 1881], [['NNS', 'RB', 'RB_well', 'IN', 'NN'], 2, 2, 1.0, '1', 1882], [['NNS', 'RB', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 1883], [['NNS', 'RB', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1884], [['NNS', 'RB', 'RB_well', 'IN', 'IN'], 3, 2, 0.6666666666666666, '1', 1885], [['NNS', 'RB', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1886], [['NNS', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 1887], [['NNS', 'RB', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1888], [['NNS', 'RB', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1889], [['NNS', 'RB', 'NNS'], 1, 1, 1.0, '0', 1890], [['NNS', 'NN'], 7, 6, 0.8571428571428571, '1', 1891], [['NNS', 'NN', 'VBG'], 2, 2, 1.0, '1', 1892], [['NNS', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 1893], [['NNS', 'NN', 'RB', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 1894], [['NNS', 'NN', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1895], [['NNS', 'NN', 'RB', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 1896], [['NNS', 'NN', 'RB', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1897], [['NNS', 'NN', 'RB', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 1898], [['NNS', 'NN', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1899], [['NNS', 'NN', 'RB', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 1900], [['NNS', 'NN', 'RB', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1901], [['NNS', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1902], [['NNS', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1903], [['NNS', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1904], [['NNS', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1905], [['NNS', 'NN', 'RB', 'NNS'], 1, 1, 1.0, '0', 1906], [['NNS', 'NN', 'RB', 'NN'], 1, 1, 1.0, '1', 1907], [['NNS', 'NN', 'RB', 'JJ'], 1, 1, 1.0, '0', 1908], [['NNS', 'NN', 'RB', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1909], [['NNS', 'NN', 'RB', 'IN', 'NNS'], 1, 1, 1.0, '0', 1910], [['NNS', 'NN', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1911], [['NNS', 'NN', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '0', 1912], [['NNS', 'NN', 'RB', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1913], [['NNS', 'NN', 'RB', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1914], [['NNS', 'NN', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1915], [['NNS', 'NN', 'RB', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1916], [['NNS', 'NN', 'RB', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1917], [['NNS', 'NN', 'NN'], 2, 2, 1.0, '1', 1918], [['NNS', 'NN', 'IN_over'], 1, 1, 1.0, '1', 1919], [['NNS', 'NN', 'IN_over', 'NN'], 1, 1, 1.0, '1', 1920], [['NNS', 'NN', 'JJ'], 1, 1, 1.0, '0', 1921], [['NNS', 'NN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1922], [['NNS', 'NN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1923], [['NNS', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 1924], [['NNS', 'NN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1925], [['NNS', 'NN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1926], [['NNS', 'NN', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1927], [['NNS', 'NN', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1928], [['NNS', 'NN', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1929], [['NNS', 'NN', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1930], [['NNS', 'NN', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 1931], [['NNS', 'NN', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1932], [['NNS', 'NN', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 1933], [['NNS', 'NN', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1934], [['NNS', 'NN', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 1935], [['NNS', 'NN', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1936], [['NNS', 'NN', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 1937], [['NNS', 'NN', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1938], [['NNS', 'NN', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1939], [['NNS', 'NN', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1940], [['NNS', 'NN', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1941], [['NNS', 'NN', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1942], [['NNS', 'MD'], 2, 2, 1.0, '1', 1943], [['NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 1944], [['NNS', 'CC'], 1, 1, 1.0, '1', 1945], [['NNS', 'CC', 'DT_both'], 1, 1, 1.0, '1', 1946], [['NNS', 'CC', 'DT_both', 'NNS'], 1, 1, 1.0, '1', 1947], [['NNS', 'CC', 'DT_both', 'VBG'], 1, 1, 1.0, '1', 1948], [['NNS', 'CC', 'DT_both', 'VBG', 'NNS'], 1, 1, 1.0, '1', 1949], [['NNS', 'CC', 'DT_both', 'NN'], 1, 1, 1.0, '1', 1950], [['NNS', 'CC', 'DT_both', 'NN', 'NNS'], 1, 1, 1.0, '1', 1951], [['NNS', 'CC', 'DT_both', 'NN', 'VBG'], 1, 1, 1.0, '1', 1952], [['NNS', 'CC', 'DT_both', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 1953], [['NNS', 'CC', 'VBG'], 1, 1, 1.0, '1', 1954], [['NNS', 'CC', 'VBG', 'NNS'], 1, 1, 1.0, '1', 1955], [['NNS', 'CC', 'NN'], 1, 1, 1.0, '1', 1956], [['NNS', 'CC', 'NN', 'NNS'], 1, 1, 1.0, '1', 1957], [['NNS', 'CC', 'NN', 'VBG'], 1, 1, 1.0, '1', 1958], [['NNS', 'CC', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 1959], [['NNS', 'CC', 'NNS'], 1, 1, 1.0, '1', 1960], [['NNS', 'IN_over'], 2, 2, 1.0, '1', 1961], [['NNS', 'IN_over', 'VBG'], 1, 1, 1.0, '1', 1962], [['NNS', 'IN_over', 'NN'], 2, 2, 1.0, '1', 1963], [['NNS', 'IN_over', 'NN', 'VBG'], 1, 1, 1.0, '1', 1964], [['NNS', 'IN_over', 'JJ'], 1, 1, 1.0, '1', 1965], [['NNS', 'IN_over', 'JJ', 'VBG'], 1, 1, 1.0, '1', 1966], [['NNS', 'IN_over', 'JJ', 'NN'], 1, 1, 1.0, '1', 1967], [['NNS', 'IN_over', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 1968], [['NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1969], [['NNS', 'CD'], 1, 1, 1.0, '0', 1970], [['NNS', 'NNS_advantag'], 1, 1, 1.0, '1', 1971], [['NNS', 'NNS_advantag', 'NNS'], 1, 1, 1.0, '1', 1972], [['NNS', 'NNS_advantag', 'NNS', 'IN'], 1, 1, 1.0, '1', 1973], [['NNS', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 1974], [['NNS', 'NNS_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 1975], [['NNS', 'NNS_advantag', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 1976], [['NNS', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 1977], [['NNS', 'VBP', 'RB_well'], 1, 1, 1.0, '1', 1978], [['NNS', 'VBP', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1979], [['NNS', 'VBP', 'RB_well', 'IN'], 1, 1, 1.0, '1', 1980], [['NNS', 'VBP', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1981], [['NNS', 'VBP', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 1982], [['NNS', 'VBP', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1983], [['NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 1984], [['NNS', 'VBP', 'RB'], 1, 1, 1.0, '1', 1985], [['NNS', 'VBP', 'RB', 'RB_well'], 1, 1, 1.0, '1', 1986], [['NNS', 'VBP', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1987], [['NNS', 'VBP', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '1', 1988], [['NNS', 'VBP', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1989], [['NNS', 'VBP', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 1990], [['NNS', 'VBP', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1991], [['NNS', 'VBP', 'RB', 'NN'], 1, 1, 1.0, '1', 1992], [['NNS', 'VBP', 'RB', 'IN'], 1, 1, 1.0, '1', 1993], [['NNS', 'VBP', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1994], [['NNS', 'VBP', 'RB', 'IN', 'IN'], 1, 1, 1.0, '1', 1995], [['NNS', 'VBP', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1996], [['NNS', 'VBP', 'NN'], 1, 1, 1.0, '1', 1997], [['NNS', 'VBP', 'NN', 'RB_well'], 1, 1, 1.0, '1', 1998], [['NNS', 'VBP', 'NN', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1999], [['NNS', 'VBP', 'NN', 'RB_well', 'IN'], 1, 1, 1.0, '1', 2000], [['NNS', 'VBP', 'NN', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 2001], [['NNS', 'VBP', 'NN', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 2002], [['NNS', 'VBP', 'NN', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 2003], [['NNS', 'VBP', 'NN', 'NN'], 1, 1, 1.0, '1', 2004], [['NNS', 'VBP', 'NN', 'RB'], 1, 1, 1.0, '1', 2005], [['NNS', 'VBP', 'NN', 'RB', 'RB_well'], 1, 1, 1.0, '1', 2006], [['NNS', 'VBP', 'NN', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 2007], [['NNS', 'VBP', 'NN', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '1', 2008], [['NNS', 'VBP', 'NN', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 2009], [['NNS', 'VBP', 'NN', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 2010], [['NNS', 'VBP', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 2011], [['NNS', 'VBP', 'NN', 'RB', 'NN'], 1, 1, 1.0, '1', 2012], [['NNS', 'VBP', 'NN', 'RB', 'IN'], 1, 1, 1.0, '1', 2013], [['NNS', 'VBP', 'NN', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 2014], [['NNS', 'VBP', 'NN', 'RB', 'IN', 'IN'], 1, 1, 1.0, '1', 2015], [['NNS', 'VBP', 'NN', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 2016], [['NNS', 'VBP', 'NN', 'IN'], 1, 1, 1.0, '1', 2017], [['NNS', 'VBP', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 2018], [['NNS', 'VBP', 'NN', 'IN', 'IN'], 1, 1, 1.0, '1', 2019], [['NNS', 'VBP', 'NN', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 2020], [['NNS', 'VBP', 'IN'], 1, 1, 1.0, '1', 2021], [['NNS', 'VBP', 'IN', 'NN'], 1, 1, 1.0, '1', 2022], [['NNS', 'VBP', 'IN', 'IN'], 1, 1, 1.0, '1', 2023], [['NNS', 'VBP', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 2024], [['NNS', 'JJ'], 3, 2, 0.6666666666666666, '1', 2025], [['NNS', 'JJ', 'VBG'], 1, 1, 1.0, '1', 2026], [['NNS', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2027], [['NNS', 'JJ', 'NN'], 2, 2, 1.0, '1', 2028], [['NNS', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 2029], [['NNS', 'IN'], 6, 5, 0.8333333333333334, '1', 2030], [['NNS', 'IN', 'IN_over'], 1, 1, 1.0, '1', 2031], [['NNS', 'IN', 'IN_over', 'NN'], 1, 1, 1.0, '1', 2032], [['NNS', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 2033], [['NNS', 'IN', 'NN'], 3, 3, 1.0, '1', 2034], [['NNS', 'IN', 'NN', 'IN_over'], 1, 1, 1.0, '1', 2035], [['NNS', 'IN', 'NN', 'IN_over', 'NN'], 1, 1, 1.0, '1', 2036], [['NNS', 'IN', 'NN', 'NN'], 1, 1, 1.0, '1', 2037], [['NNS', 'IN', 'JJ'], 1, 1, 1.0, '0', 2038], [['NNS', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2039], [['NNS', 'IN', 'IN'], 4, 3, 0.75, '1', 2040], [['NNS', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 2041], [['NNS', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 2042], [['NNS', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 2043], [['NNS', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2044], [['NNS', 'RB_well'], 3, 2, 0.6666666666666666, '1', 2045], [['NNS', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 2046], [['NNS', 'RB_well', 'NN'], 2, 2, 1.0, '1', 2047], [['NNS', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 2048], [['NNS', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2049], [['NNS', 'RB_well', 'IN'], 3, 2, 0.6666666666666666, '1', 2050], [['NNS', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 2051], [['NNS', 'RB_well', 'IN', 'NN'], 2, 2, 1.0, '1', 2052], [['NNS', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 2053], [['NNS', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2054], [['NNS', 'RB_well', 'IN', 'IN'], 3, 2, 0.6666666666666666, '1', 2055], [['NNS', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 2056], [['NNS', 'RB_well', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 2057], [['NNS', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 2058], [['NNS', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2059], [['NNS', 'DT'], 2, 2, 1.0, '1', 2060], [['NNS', 'DT', 'RB'], 1, 1, 1.0, '1', 2061], [['NNS', 'DT', 'NN'], 1, 1, 1.0, '1', 2062], [['NNS', 'DT', 'JJ'], 1, 1, 1.0, '1', 2063], [['NNS', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2064], [['NNS', 'VBP_domin'], 1, 1, 1.0, '1', 2065], [['NNS', 'VBP_domin', 'DT'], 1, 1, 1.0, '1', 2066], [['NNS', 'VBP_domin', 'DT', 'NN'], 1, 1, 1.0, '1', 2067], [['NNS', 'VBP_domin', 'DT', 'JJ'], 1, 1, 1.0, '1', 2068], [['NNS', 'VBP_domin', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2069], [['NNS', 'VBP_domin', 'NN'], 1, 1, 1.0, '1', 2070], [['NNS', 'VBP_domin', 'JJ'], 1, 1, 1.0, '1', 2071], [['NNS', 'VBP_domin', 'JJ', 'NN'], 1, 1, 1.0, '1', 2072], [['NNS', 'NNS'], 5, 3, 0.6, '1', 2073], [['NNS', 'NNS', 'DT_both'], 1, 1, 1.0, '1', 2074], [['NNS', 'NNS', 'DT_both', 'NNS'], 1, 1, 1.0, '1', 2075], [['NNS', 'NNS', 'DT_both', 'VBG'], 1, 1, 1.0, '1', 2076], [['NNS', 'NNS', 'DT_both', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2077], [['NNS', 'NNS', 'DT_both', 'NN'], 1, 1, 1.0, '1', 2078], [['NNS', 'NNS', 'DT_both', 'NN', 'NNS'], 1, 1, 1.0, '1', 2079], [['NNS', 'NNS', 'DT_both', 'NN', 'VBG'], 1, 1, 1.0, '1', 2080], [['NNS', 'NNS', 'DT_both', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2081], [['NNS', 'NNS', 'VBG'], 1, 1, 1.0, '1', 2082], [['NNS', 'NNS', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2083], [['NNS', 'NNS', 'NN'], 1, 1, 1.0, '1', 2084], [['NNS', 'NNS', 'NN', 'NNS'], 1, 1, 1.0, '1', 2085], [['NNS', 'NNS', 'NN', 'VBG'], 1, 1, 1.0, '1', 2086], [['NNS', 'NNS', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2087], [['NNS', 'NNS', 'CC'], 1, 1, 1.0, '1', 2088], [['NNS', 'NNS', 'CC', 'DT_both'], 1, 1, 1.0, '1', 2089], [['NNS', 'NNS', 'CC', 'DT_both', 'NNS'], 1, 1, 1.0, '1', 2090], [['NNS', 'NNS', 'CC', 'DT_both', 'VBG'], 1, 1, 1.0, '1', 2091], [['NNS', 'NNS', 'CC', 'DT_both', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2092], [['NNS', 'NNS', 'CC', 'DT_both', 'NN'], 1, 1, 1.0, '1', 2093], [['NNS', 'NNS', 'CC', 'DT_both', 'NN', 'NNS'], 1, 1, 1.0, '1', 2094], [['NNS', 'NNS', 'CC', 'DT_both', 'NN', 'VBG'], 1, 1, 1.0, '1', 2095], [['NNS', 'NNS', 'CC', 'DT_both', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2096], [['NNS', 'NNS', 'CC', 'VBG'], 1, 1, 1.0, '1', 2097], [['NNS', 'NNS', 'CC', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2098], [['NNS', 'NNS', 'CC', 'NN'], 1, 1, 1.0, '1', 2099], [['NNS', 'NNS', 'CC', 'NN', 'NNS'], 1, 1, 1.0, '1', 2100], [['NNS', 'NNS', 'CC', 'NN', 'VBG'], 1, 1, 1.0, '1', 2101], [['NNS', 'NNS', 'CC', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2102], [['NNS', 'NNS', 'CC', 'NNS'], 1, 1, 1.0, '1', 2103], [['NNS', 'NNS', 'CD'], 1, 1, 1.0, '0', 2104], [['NNS', 'NNS', 'IN'], 1, 1, 1.0, '1', 2105], [['NNS', 'NNS', 'NNS'], 1, 1, 1.0, '1', 2106], [['DT_both'], 1, 1, 1.0, '1', 2107], [['DT_both', 'NNS'], 1, 1, 1.0, '1', 2108], [['DT_both', 'VBG'], 1, 1, 1.0, '1', 2109], [['DT_both', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2110], [['DT_both', 'NN'], 1, 1, 1.0, '1', 2111], [['DT_both', 'NN', 'NNS'], 1, 1, 1.0, '1', 2112], [['DT_both', 'NN', 'VBG'], 1, 1, 1.0, '1', 2113], [['DT_both', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2114], [['VB'], 5, 5, 1.0, '1', 2115], [['VB', 'JJ'], 2, 2, 1.0, '1', 2116], [['VB', 'JJ', 'DT'], 1, 1, 1.0, '1', 2117], [['VB', 'JJ', 'DT', 'NN'], 1, 1, 1.0, '1', 2118], [['VB', 'JJ', 'NN'], 1, 1, 1.0, '1', 2119], [['VB', 'JJ', 'NN_advantag'], 1, 1, 1.0, '1', 2120], [['VB', 'JJ', 'NN_advantag', 'DT'], 1, 1, 1.0, '1', 2121], [['VB', 'JJ', 'NN_advantag', 'DT', 'NN'], 1, 1, 1.0, '1', 2122], [['VB', 'JJ', 'NN_advantag', 'NN'], 1, 1, 1.0, '1', 2123], [['VB', 'JJ', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 2124], [['VB', 'JJ', 'NN_advantag', 'IN', 'DT'], 1, 1, 1.0, '1', 2125], [['VB', 'JJ', 'NN_advantag', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 2126], [['VB', 'JJ', 'NN_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 2127], [['VB', 'JJ', 'IN'], 1, 1, 1.0, '1', 2128], [['VB', 'JJ', 'IN', 'DT'], 1, 1, 1.0, '1', 2129], [['VB', 'JJ', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 2130], [['VB', 'JJ', 'IN', 'NN'], 1, 1, 1.0, '1', 2131], [['VB', 'JJ_advantag'], 1, 1, 1.0, '1', 2132], [['VB', 'NN'], 1, 1, 1.0, '1', 2133], [['VB', 'NN_advantag'], 1, 1, 1.0, '1', 2134], [['VB', 'NN_advantag', 'DT'], 1, 1, 1.0, '1', 2135], [['VB', 'NN_advantag', 'DT', 'NN'], 1, 1, 1.0, '1', 2136], [['VB', 'NN_advantag', 'NN'], 1, 1, 1.0, '1', 2137], [['VB', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 2138], [['VB', 'NN_advantag', 'IN', 'DT'], 1, 1, 1.0, '1', 2139], [['VB', 'NN_advantag', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 2140], [['VB', 'NN_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 2141], [['VB', 'IN'], 2, 2, 1.0, '1', 2142], [['VB', 'IN', 'DT'], 1, 1, 1.0, '1', 2143], [['VB', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 2144], [['VB', 'IN', 'NN'], 1, 1, 1.0, '1', 2145], [['VB', 'DT'], 1, 1, 1.0, '1', 2146], [['VB', 'DT', 'NN'], 1, 1, 1.0, '1', 2147], [['JJ_advantag'], 1, 1, 1.0, '1', 2148], [['CC'], 1, 1, 1.0, '1', 2149], [['CC', 'DT_both'], 1, 1, 1.0, '1', 2150], [['CC', 'DT_both', 'NNS'], 1, 1, 1.0, '1', 2151], [['CC', 'DT_both', 'VBG'], 1, 1, 1.0, '1', 2152], [['CC', 'DT_both', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2153], [['CC', 'DT_both', 'NN'], 1, 1, 1.0, '1', 2154], [['CC', 'DT_both', 'NN', 'NNS'], 1, 1, 1.0, '1', 2155], [['CC', 'DT_both', 'NN', 'VBG'], 1, 1, 1.0, '1', 2156], [['CC', 'DT_both', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2157], [['CC', 'VBG'], 1, 1, 1.0, '1', 2158], [['CC', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2159], [['CC', 'NN'], 1, 1, 1.0, '1', 2160], [['CC', 'NN', 'NNS'], 1, 1, 1.0, '1', 2161], [['CC', 'NN', 'VBG'], 1, 1, 1.0, '1', 2162], [['CC', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2163], [['CC', 'NNS'], 1, 1, 1.0, '1', 2164], [['CD'], 3, 2, 0.6666666666666666, '1', 2165], [['CD', 'VB'], 1, 1, 1.0, '1', 2166], [['CD', 'VB', 'IN'], 1, 1, 1.0, '1', 2167], [['CD', 'JJ_compar'], 1, 1, 1.0, '1', 2168], [['CD', 'JJ_compar', 'TO'], 1, 1, 1.0, '1', 2169], [['CD', 'JJ_compar', 'TO', 'VB'], 1, 1, 1.0, '1', 2170], [['CD', 'JJ_compar', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 2171], [['CD', 'JJ_compar', 'TO', 'IN'], 1, 1, 1.0, '1', 2172], [['CD', 'JJ_compar', 'VB'], 1, 1, 1.0, '1', 2173], [['CD', 'JJ_compar', 'VB', 'IN'], 1, 1, 1.0, '1', 2174], [['CD', 'JJ_compar', 'IN'], 1, 1, 1.0, '1', 2175], [['CD', 'VBD'], 1, 1, 1.0, '1', 2176], [['CD', 'VBD', 'TO'], 1, 1, 1.0, '1', 2177], [['CD', 'VBD', 'TO', 'VB'], 1, 1, 1.0, '1', 2178], [['CD', 'VBD', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 2179], [['CD', 'VBD', 'TO', 'IN'], 1, 1, 1.0, '1', 2180], [['CD', 'VBD', 'VB'], 1, 1, 1.0, '1', 2181], [['CD', 'VBD', 'VB', 'IN'], 1, 1, 1.0, '1', 2182], [['CD', 'VBD', 'JJ_compar'], 1, 1, 1.0, '1', 2183], [['CD', 'VBD', 'JJ_compar', 'TO'], 1, 1, 1.0, '1', 2184], [['CD', 'VBD', 'JJ_compar', 'TO', 'VB'], 1, 1, 1.0, '1', 2185], [['CD', 'VBD', 'JJ_compar', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 2186], [['CD', 'VBD', 'JJ_compar', 'TO', 'IN'], 1, 1, 1.0, '1', 2187], [['CD', 'VBD', 'JJ_compar', 'VB'], 1, 1, 1.0, '1', 2188], [['CD', 'VBD', 'JJ_compar', 'VB', 'IN'], 1, 1, 1.0, '1', 2189], [['CD', 'VBD', 'JJ_compar', 'IN'], 1, 1, 1.0, '1', 2190], [['CD', 'VBD', 'RB'], 1, 1, 1.0, '1', 2191], [['CD', 'VBD', 'RB', 'TO'], 1, 1, 1.0, '1', 2192], [['CD', 'VBD', 'RB', 'TO', 'VB'], 1, 1, 1.0, '1', 2193], [['CD', 'VBD', 'RB', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 2194], [['CD', 'VBD', 'RB', 'TO', 'IN'], 1, 1, 1.0, '1', 2195], [['CD', 'VBD', 'RB', 'VB'], 1, 1, 1.0, '1', 2196], [['CD', 'VBD', 'RB', 'VB', 'IN'], 1, 1, 1.0, '1', 2197], [['CD', 'VBD', 'RB', 'JJ_compar'], 1, 1, 1.0, '1', 2198], [['CD', 'VBD', 'RB', 'JJ_compar', 'TO'], 1, 1, 1.0, '1', 2199], [['CD', 'VBD', 'RB', 'JJ_compar', 'TO', 'VB'], 1, 1, 1.0, '1', 2200], [['CD', 'VBD', 'RB', 'JJ_compar', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 2201], [['CD', 'VBD', 'RB', 'JJ_compar', 'TO', 'IN'], 1, 1, 1.0, '1', 2202], [['CD', 'VBD', 'RB', 'JJ_compar', 'VB'], 1, 1, 1.0, '1', 2203], [['CD', 'VBD', 'RB', 'JJ_compar', 'VB', 'IN'], 1, 1, 1.0, '1', 2204], [['CD', 'VBD', 'RB', 'JJ_compar', 'IN'], 1, 1, 1.0, '1', 2205], [['CD', 'VBD', 'RB', 'IN'], 1, 1, 1.0, '1', 2206], [['CD', 'VBD', 'IN'], 1, 1, 1.0, '1', 2207], [['CD', 'TO'], 1, 1, 1.0, '1', 2208], [['CD', 'TO', 'VB'], 1, 1, 1.0, '1', 2209], [['CD', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 2210], [['CD', 'TO', 'IN'], 1, 1, 1.0, '1', 2211], [['CD', 'RB'], 1, 1, 1.0, '1', 2212], [['CD', 'RB', 'TO'], 1, 1, 1.0, '1', 2213], [['CD', 'RB', 'TO', 'VB'], 1, 1, 1.0, '1', 2214], [['CD', 'RB', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 2215], [['CD', 'RB', 'TO', 'IN'], 1, 1, 1.0, '1', 2216], [['CD', 'RB', 'VB'], 1, 1, 1.0, '1', 2217], [['CD', 'RB', 'VB', 'IN'], 1, 1, 1.0, '1', 2218], [['CD', 'RB', 'JJ_compar'], 1, 1, 1.0, '1', 2219], [['CD', 'RB', 'JJ_compar', 'TO'], 1, 1, 1.0, '1', 2220], [['CD', 'RB', 'JJ_compar', 'TO', 'VB'], 1, 1, 1.0, '1', 2221], [['CD', 'RB', 'JJ_compar', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 2222], [['CD', 'RB', 'JJ_compar', 'TO', 'IN'], 1, 1, 1.0, '1', 2223], [['CD', 'RB', 'JJ_compar', 'VB'], 1, 1, 1.0, '1', 2224], [['CD', 'RB', 'JJ_compar', 'VB', 'IN'], 1, 1, 1.0, '1', 2225], [['CD', 'RB', 'JJ_compar', 'IN'], 1, 1, 1.0, '1', 2226], [['CD', 'RB', 'IN'], 1, 1, 1.0, '1', 2227], [['CD', 'IN'], 1, 1, 1.0, '1', 2228], [['CD', 'NNS'], 1, 1, 1.0, '1', 2229], [['CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 2230], [['JJS_best'], 3, 2, 0.6666666666666666, '0', 2231], [['JJS_best', 'JJ'], 1, 1, 1.0, '1', 2232], [['JJS_best', 'JJ', 'NN'], 1, 1, 1.0, '1', 2233], [['JJS_best', 'VBN'], 2, 2, 1.0, '0', 2234], [['JJS_best', 'VBN', 'IN'], 2, 2, 1.0, '0', 2235], [['JJS_best', 'NN'], 3, 2, 0.6666666666666666, '0', 2236], [['JJS_best', 'NN', 'VBN'], 2, 2, 1.0, '0', 2237], [['JJS_best', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 2238], [['JJS_best', 'NN', 'IN'], 2, 2, 1.0, '0', 2239], [['JJS_best', 'IN'], 2, 2, 1.0, '0', 2240], [['NN_advantag'], 2, 2, 1.0, '1', 2241], [['NN_advantag', 'MD'], 1, 1, 1.0, '1', 2242], [['NN_advantag', 'DT'], 1, 1, 1.0, '1', 2243], [['NN_advantag', 'DT', 'NN'], 1, 1, 1.0, '1', 2244], [['NN_advantag', 'NNS'], 1, 1, 1.0, '1', 2245], [['NN_advantag', 'NNS', 'MD'], 1, 1, 1.0, '1', 2246], [['NN_advantag', 'NN'], 1, 1, 1.0, '1', 2247], [['NN_advantag', 'IN'], 2, 2, 1.0, '1', 2248], [['NN_advantag', 'IN', 'MD'], 1, 1, 1.0, '1', 2249], [['NN_advantag', 'IN', 'DT'], 1, 1, 1.0, '1', 2250], [['NN_advantag', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 2251], [['NN_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 2252], [['NN_advantag', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 2253], [['NN_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 2254], [['IN'], 28, 22, 0.7857142857142857, '1', 2255], [['IN', 'JJ_improv'], 1, 1, 1.0, '1', 2256], [['IN', 'JJ_improv', 'NN'], 1, 1, 1.0, '1', 2257], [['IN', 'JJ_improv', 'NN', 'NN'], 1, 1, 1.0, '1', 2258], [['IN', 'JJ_improv', 'NN', 'IN'], 1, 1, 1.0, '1', 2259], [['IN', 'JJ_improv', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 2260], [['IN', 'JJ_improv', 'IN'], 1, 1, 1.0, '1', 2261], [['IN', 'JJ_improv', 'IN', 'NN'], 1, 1, 1.0, '1', 2262], [['IN', 'JJR_larger'], 1, 1, 1.0, '0', 2263], [['IN', 'JJR_larger', 'NNS'], 1, 1, 1.0, '0', 2264], [['IN', 'JJR_larger', 'NNS', 'NNS'], 1, 1, 1.0, '0', 2265], [['IN', 'JJR_larger', 'NNS', 'NNS', 'CD'], 1, 1, 1.0, '0', 2266], [['IN', 'JJR_larger', 'NNS', 'CD'], 1, 1, 1.0, '0', 2267], [['IN', 'JJR_larger', 'CD'], 1, 1, 1.0, '0', 2268], [['IN', 'VBG_match'], 1, 1, 1.0, '1', 2269], [['IN', 'VBG_match', 'NNS'], 1, 1, 1.0, '1', 2270], [['IN', 'VBG_match', 'NNS', 'RB'], 1, 1, 1.0, '1', 2271], [['IN', 'VBG_match', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 2272], [['IN', 'VBG_match', 'RB'], 1, 1, 1.0, '1', 2273], [['IN', 'VBG_match', 'RB', 'RB'], 1, 1, 1.0, '1', 2274], [['IN', 'VBN'], 2, 2, 1.0, '0', 2275], [['IN', 'VBN', 'NN'], 1, 1, 1.0, '0', 2276], [['IN', 'VBP'], 1, 1, 1.0, '0', 2277], [['IN', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2278], [['IN', 'JJ'], 9, 6, 0.6666666666666666, '1', 2279], [['IN', 'JJ', 'VBG_match'], 1, 1, 1.0, '1', 2280], [['IN', 'JJ', 'VBG_match', 'NNS'], 1, 1, 1.0, '1', 2281], [['IN', 'JJ', 'VBG_match', 'NNS', 'RB'], 1, 1, 1.0, '1', 2282], [['IN', 'JJ', 'VBG_match', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 2283], [['IN', 'JJ', 'VBG_match', 'RB'], 1, 1, 1.0, '1', 2284], [['IN', 'JJ', 'VBG_match', 'RB', 'RB'], 1, 1, 1.0, '1', 2285], [['IN', 'JJ', 'JJ', 'VBN'], 1, 1, 1.0, '0', 2286], [['IN', 'JJ', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 2287], [['IN', 'JJ', 'NN'], 5, 4, 0.8, '1', 2288], [['IN', 'JJ', 'NN', 'VBG_match'], 1, 1, 1.0, '1', 2289], [['IN', 'JJ', 'NN', 'VBG_match', 'NNS'], 1, 1, 1.0, '1', 2290], [['IN', 'JJ', 'NN', 'VBG_match', 'NNS', 'RB'], 1, 1, 1.0, '1', 2291], [['IN', 'JJ', 'NN', 'VBG_match', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 2292], [['IN', 'JJ', 'NN', 'VBG_match', 'RB'], 1, 1, 1.0, '1', 2293], [['IN', 'JJ', 'NN', 'VBG_match', 'RB', 'RB'], 1, 1, 1.0, '1', 2294], [['IN', 'JJ', 'NN', 'RB'], 1, 1, 1.0, '1', 2295], [['IN', 'JJ', 'NN', 'RB', 'RB'], 1, 1, 1.0, '1', 2296], [['IN', 'JJ', 'NN', 'NN'], 1, 1, 1.0, '0', 2297], [['IN', 'JJ', 'NN', 'IN_over'], 1, 1, 1.0, '0', 2298], [['IN', 'JJ', 'NN', 'IN_over', 'NN'], 1, 1, 1.0, '0', 2299], [['IN', 'JJ', 'NN', 'IN_over', 'VBN'], 1, 1, 1.0, '0', 2300], [['IN', 'JJ', 'NN', 'IN_over', 'VBN', 'NN'], 1, 1, 1.0, '0', 2301], [['IN', 'JJ', 'NN', 'IN_over', 'JJ'], 1, 1, 1.0, '0', 2302], [['IN', 'JJ', 'NN', 'IN_over', 'JJ', 'VBN'], 1, 1, 1.0, '0', 2303], [['IN', 'JJ', 'NN', 'IN_over', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 2304], [['IN', 'JJ', 'NN', 'IN_over', 'JJ', 'NN'], 1, 1, 1.0, '0', 2305], [['IN', 'JJ', 'NN', 'VBN'], 1, 1, 1.0, '0', 2306], [['IN', 'JJ', 'NN', 'VBN', 'NN'], 1, 1, 1.0, '0', 2307], [['IN', 'JJ', 'NN', 'JJ'], 1, 1, 1.0, '0', 2308], [['IN', 'JJ', 'NN', 'JJ', 'VBN'], 1, 1, 1.0, '0', 2309], [['IN', 'JJ', 'NN', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 2310], [['IN', 'JJ', 'NN', 'JJ', 'NN'], 1, 1, 1.0, '0', 2311], [['IN', 'JJ', 'NN', 'NNS'], 1, 1, 1.0, '1', 2312], [['IN', 'JJ', 'NN', 'NNS', 'RB'], 1, 1, 1.0, '1', 2313], [['IN', 'JJ', 'NN', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 2314], [['IN', 'JJ', 'JJR_smaller'], 1, 1, 1.0, '0', 2315], [['IN', 'JJ', 'JJR_smaller', 'VBP'], 1, 1, 1.0, '0', 2316], [['IN', 'JJ', 'JJR_smaller', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2317], [['IN', 'JJ', 'JJR_smaller', 'NNS'], 1, 1, 1.0, '0', 2318], [['IN', 'JJ', 'JJR_smaller', 'NNS', 'VBP'], 1, 1, 1.0, '0', 2319], [['IN', 'JJ', 'JJR_smaller', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2320], [['IN', 'JJ', 'JJR_smaller', 'NNS', 'VBN'], 1, 1, 1.0, '0', 2321], [['IN', 'JJ', 'JJR_smaller', 'VBN'], 1, 1, 1.0, '0', 2322], [['IN', 'JJ', 'VBP_domin'], 1, 1, 1.0, '1', 2323], [['IN', 'JJ', 'VBP_domin', 'DT'], 1, 1, 1.0, '1', 2324], [['IN', 'JJ', 'VBP_domin', 'DT', 'NN'], 1, 1, 1.0, '1', 2325], [['IN', 'JJ', 'VBP_domin', 'DT', 'JJ'], 1, 1, 1.0, '1', 2326], [['IN', 'JJ', 'VBP_domin', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2327], [['IN', 'JJ', 'VBP_domin', 'NN'], 1, 1, 1.0, '1', 2328], [['IN', 'JJ', 'VBP_domin', 'JJ'], 1, 1, 1.0, '1', 2329], [['IN', 'JJ', 'VBP_domin', 'JJ', 'NN'], 1, 1, 1.0, '1', 2330], [['IN', 'JJ', 'VBN'], 2, 2, 1.0, '0', 2331], [['IN', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 2332], [['IN', 'JJ', 'VBP'], 1, 1, 1.0, '0', 2333], [['IN', 'JJ', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2334], [['IN', 'JJ', 'RB', 'JJR_smaller'], 1, 1, 1.0, '0', 2335], [['IN', 'JJ', 'RB', 'JJR_smaller', 'VBP'], 1, 1, 1.0, '0', 2336], [['IN', 'JJ', 'RB', 'JJR_smaller', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2337], [['IN', 'JJ', 'RB', 'JJR_smaller', 'NNS'], 1, 1, 1.0, '0', 2338], [['IN', 'JJ', 'RB', 'JJR_smaller', 'NNS', 'VBP'], 1, 1, 1.0, '0', 2339], [['IN', 'JJ', 'RB', 'JJR_smaller', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2340], [['IN', 'JJ', 'RB', 'JJR_smaller', 'NNS', 'VBN'], 1, 1, 1.0, '0', 2341], [['IN', 'JJ', 'RB', 'JJR_smaller', 'VBN'], 1, 1, 1.0, '0', 2342], [['IN', 'JJ', 'RB', 'VBP'], 1, 1, 1.0, '0', 2343], [['IN', 'JJ', 'RB', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2344], [['IN', 'JJ', 'RB', 'NNS'], 1, 1, 1.0, '0', 2345], [['IN', 'JJ', 'RB', 'NNS', 'VBP'], 1, 1, 1.0, '0', 2346], [['IN', 'JJ', 'RB', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2347], [['IN', 'JJ', 'RB', 'NNS', 'VBN'], 1, 1, 1.0, '0', 2348], [['IN', 'JJ', 'RB', 'VBN'], 1, 1, 1.0, '0', 2349], [['IN', 'JJ', 'RB', 'RB'], 1, 1, 1.0, '1', 2350], [['IN', 'JJ', 'IN_over'], 1, 1, 1.0, '0', 2351], [['IN', 'JJ', 'IN_over', 'NN'], 1, 1, 1.0, '0', 2352], [['IN', 'JJ', 'IN_over', 'VBN'], 1, 1, 1.0, '0', 2353], [['IN', 'JJ', 'IN_over', 'VBN', 'NN'], 1, 1, 1.0, '0', 2354], [['IN', 'JJ', 'IN_over', 'JJ'], 1, 1, 1.0, '0', 2355], [['IN', 'JJ', 'IN_over', 'JJ', 'VBN'], 1, 1, 1.0, '0', 2356], [['IN', 'JJ', 'IN_over', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 2357], [['IN', 'JJ', 'IN_over', 'JJ', 'NN'], 1, 1, 1.0, '0', 2358], [['IN', 'JJ', 'DT'], 1, 1, 1.0, '1', 2359], [['IN', 'JJ', 'DT', 'NN'], 1, 1, 1.0, '1', 2360], [['IN', 'JJ', 'DT', 'JJ'], 1, 1, 1.0, '1', 2361], [['IN', 'JJ', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2362], [['IN', 'JJ', 'NNS', 'RB'], 1, 1, 1.0, '1', 2363], [['IN', 'JJ', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 2364], [['IN', 'JJ', 'NNS', 'NN'], 1, 1, 1.0, '1', 2365], [['IN', 'JJ', 'NNS', 'VBP_domin'], 1, 1, 1.0, '1', 2366], [['IN', 'JJ', 'NNS', 'VBP_domin', 'DT'], 1, 1, 1.0, '1', 2367], [['IN', 'JJ', 'NNS', 'VBP_domin', 'DT', 'NN'], 1, 1, 1.0, '1', 2368], [['IN', 'JJ', 'NNS', 'VBP_domin', 'DT', 'JJ'], 1, 1, 1.0, '1', 2369], [['IN', 'JJ', 'NNS', 'VBP_domin', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2370], [['IN', 'JJ', 'NNS', 'VBP_domin', 'NN'], 1, 1, 1.0, '1', 2371], [['IN', 'JJ', 'NNS', 'VBP_domin', 'JJ'], 1, 1, 1.0, '1', 2372], [['IN', 'JJ', 'NNS', 'VBP_domin', 'JJ', 'NN'], 1, 1, 1.0, '1', 2373], [['IN', 'JJ', 'NNS', 'VBN'], 1, 1, 1.0, '0', 2374], [['IN', 'JJ', 'NNS', 'VBP'], 1, 1, 1.0, '0', 2375], [['IN', 'JJ', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2376], [['IN', 'JJ', 'NNS', 'JJ'], 1, 1, 1.0, '1', 2377], [['IN', 'JJ', 'NNS', 'JJ', 'NN'], 1, 1, 1.0, '1', 2378], [['IN', 'JJ', 'NNS', 'DT'], 1, 1, 1.0, '1', 2379], [['IN', 'JJ', 'NNS', 'DT', 'NN'], 1, 1, 1.0, '1', 2380], [['IN', 'JJ', 'NNS', 'DT', 'JJ'], 1, 1, 1.0, '1', 2381], [['IN', 'JJ', 'NNS', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2382], [['IN', 'DT'], 7, 7, 1.0, '1', 2383], [['IN', 'DT', 'JJ_improv'], 1, 1, 1.0, '1', 2384], [['IN', 'DT', 'JJ_improv', 'NN'], 1, 1, 1.0, '1', 2385], [['IN', 'DT', 'JJ_improv', 'NN', 'NN'], 1, 1, 1.0, '1', 2386], [['IN', 'DT', 'JJ_improv', 'NN', 'IN'], 1, 1, 1.0, '1', 2387], [['IN', 'DT', 'JJ_improv', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 2388], [['IN', 'DT', 'JJ_improv', 'IN'], 1, 1, 1.0, '1', 2389], [['IN', 'DT', 'JJ_improv', 'IN', 'NN'], 1, 1, 1.0, '1', 2390], [['IN', 'DT', 'RB'], 1, 1, 1.0, '1', 2391], [['IN', 'DT', 'NN'], 4, 4, 1.0, '1', 2392], [['IN', 'DT', 'NN', 'NN'], 1, 1, 1.0, '1', 2393], [['IN', 'DT', 'NN', 'IN'], 1, 1, 1.0, '1', 2394], [['IN', 'DT', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 2395], [['IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 2396], [['IN', 'DT', 'JJS_best'], 1, 1, 1.0, '1', 2397], [['IN', 'DT', 'JJS_best', 'NN'], 1, 1, 1.0, '1', 2398], [['IN', 'DT', 'JJS_best', 'JJ'], 1, 1, 1.0, '1', 2399], [['IN', 'DT', 'JJS_best', 'JJ', 'NN'], 1, 1, 1.0, '1', 2400], [['IN', 'DT', 'JJ'], 3, 3, 1.0, '1', 2401], [['IN', 'DT', 'JJ', 'NN'], 2, 2, 1.0, '1', 2402], [['IN', 'DT', 'IN'], 1, 1, 1.0, '1', 2403], [['IN', 'DT', 'IN', 'NN'], 1, 1, 1.0, '1', 2404], [['IN', 'NN'], 13, 12, 0.9230769230769231, '1', 2405], [['IN', 'NN', 'VBG_match'], 1, 1, 1.0, '1', 2406], [['IN', 'NN', 'VBG_match', 'NNS'], 1, 1, 1.0, '1', 2407], [['IN', 'NN', 'VBG_match', 'NNS', 'RB'], 1, 1, 1.0, '1', 2408], [['IN', 'NN', 'VBG_match', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 2409], [['IN', 'NN', 'VBG_match', 'RB'], 1, 1, 1.0, '1', 2410], [['IN', 'NN', 'VBG_match', 'RB', 'RB'], 1, 1, 1.0, '1', 2411], [['IN', 'NN', 'JJ'], 1, 1, 1.0, '0', 2412], [['IN', 'NN', 'JJ', 'VBN'], 1, 1, 1.0, '0', 2413], [['IN', 'NN', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 2414], [['IN', 'NN', 'JJ', 'NN'], 1, 1, 1.0, '0', 2415], [['IN', 'NN', 'NN'], 3, 2, 0.6666666666666666, '1', 2416], [['IN', 'NN', 'IN_over', 'JJ'], 1, 1, 1.0, '0', 2417], [['IN', 'NN', 'IN_over', 'JJ', 'VBN'], 1, 1, 1.0, '0', 2418], [['IN', 'NN', 'IN_over', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 2419], [['IN', 'NN', 'IN_over', 'JJ', 'NN'], 1, 1, 1.0, '0', 2420], [['IN', 'NN', 'IN_over', 'VBN'], 1, 1, 1.0, '0', 2421], [['IN', 'NN', 'IN_over', 'VBN', 'NN'], 1, 1, 1.0, '0', 2422], [['IN', 'NN', 'VBN'], 1, 1, 1.0, '0', 2423], [['IN', 'NN', 'VBN', 'NN'], 1, 1, 1.0, '0', 2424], [['IN', 'NN', 'RB'], 1, 1, 1.0, '1', 2425], [['IN', 'NN', 'RB', 'RB'], 1, 1, 1.0, '1', 2426], [['IN', 'NN', 'IN'], 2, 2, 1.0, '1', 2427], [['IN', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 2428], [['IN', 'NN', 'NNS'], 1, 1, 1.0, '1', 2429], [['IN', 'NN', 'NNS', 'RB'], 1, 1, 1.0, '1', 2430], [['IN', 'NN', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 2431], [['IN', 'JJR_smaller'], 1, 1, 1.0, '0', 2432], [['IN', 'JJR_smaller', 'VBP'], 1, 1, 1.0, '0', 2433], [['IN', 'JJR_smaller', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2434], [['IN', 'JJR_smaller', 'NNS'], 1, 1, 1.0, '0', 2435], [['IN', 'JJR_smaller', 'NNS', 'VBP'], 1, 1, 1.0, '0', 2436], [['IN', 'JJR_smaller', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2437], [['IN', 'JJR_smaller', 'NNS', 'VBN'], 1, 1, 1.0, '0', 2438], [['IN', 'JJR_smaller', 'VBN'], 1, 1, 1.0, '0', 2439], [['IN', 'DT_all'], 2, 2, 1.0, '1', 2440], [['IN', 'DT_all', 'DT'], 1, 1, 1.0, '1', 2441], [['IN', 'DT_all', 'DT', 'RB'], 1, 1, 1.0, '1', 2442], [['IN', 'DT_all', 'NNS'], 2, 2, 1.0, '1', 2443], [['IN', 'DT_all', 'NNS', 'DT'], 1, 1, 1.0, '1', 2444], [['IN', 'DT_all', 'NNS', 'DT', 'RB'], 1, 1, 1.0, '1', 2445], [['IN', 'DT_all', 'NNS', 'NNS'], 1, 1, 1.0, '1', 2446], [['IN', 'DT_all', 'NNS', 'RB'], 1, 1, 1.0, '1', 2447], [['IN', 'DT_all', 'RB'], 1, 1, 1.0, '1', 2448], [['IN', 'DT_all', 'CD'], 1, 1, 1.0, '1', 2449], [['IN', 'DT_all', 'CD', 'NNS'], 1, 1, 1.0, '1', 2450], [['IN', 'DT_all', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 2451], [['IN', 'TO'], 1, 1, 1.0, '1', 2452], [['IN', 'TO', 'VB'], 1, 1, 1.0, '1', 2453], [['IN', 'TO', 'VB', 'JJ'], 1, 1, 1.0, '1', 2454], [['IN', 'TO', 'JJ'], 1, 1, 1.0, '1', 2455], [['IN', 'RB'], 4, 3, 0.75, '1', 2456], [['IN', 'RB', 'JJR_better'], 1, 1, 1.0, '1', 2457], [['IN', 'RB', 'JJR_better', 'MD'], 1, 1, 1.0, '1', 2458], [['IN', 'RB', 'JJR_better', 'MD', 'VB'], 1, 1, 1.0, '1', 2459], [['IN', 'RB', 'JJR_better', 'VB'], 1, 1, 1.0, '1', 2460], [['IN', 'RB', 'JJR_better', 'NNS'], 1, 1, 1.0, '1', 2461], [['IN', 'RB', 'JJR_better', 'NNS', 'MD'], 1, 1, 1.0, '1', 2462], [['IN', 'RB', 'JJR_better', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 2463], [['IN', 'RB', 'JJR_better', 'NNS', 'VB'], 1, 1, 1.0, '1', 2464], [['IN', 'RB', 'VB'], 1, 1, 1.0, '1', 2465], [['IN', 'RB', 'MD'], 1, 1, 1.0, '1', 2466], [['IN', 'RB', 'MD', 'VB'], 1, 1, 1.0, '1', 2467], [['IN', 'RB', 'JJR_smaller'], 1, 1, 1.0, '0', 2468], [['IN', 'RB', 'JJR_smaller', 'VBP'], 1, 1, 1.0, '0', 2469], [['IN', 'RB', 'JJR_smaller', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2470], [['IN', 'RB', 'JJR_smaller', 'NNS'], 1, 1, 1.0, '0', 2471], [['IN', 'RB', 'JJR_smaller', 'NNS', 'VBP'], 1, 1, 1.0, '0', 2472], [['IN', 'RB', 'JJR_smaller', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2473], [['IN', 'RB', 'JJR_smaller', 'NNS', 'VBN'], 1, 1, 1.0, '0', 2474], [['IN', 'RB', 'JJR_smaller', 'VBN'], 1, 1, 1.0, '0', 2475], [['IN', 'RB', 'VBN'], 1, 1, 1.0, '0', 2476], [['IN', 'RB', 'VBP'], 1, 1, 1.0, '0', 2477], [['IN', 'RB', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2478], [['IN', 'RB', 'RB'], 1, 1, 1.0, '1', 2479], [['IN', 'RB', 'NNS', 'MD'], 1, 1, 1.0, '1', 2480], [['IN', 'RB', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 2481], [['IN', 'RB', 'NNS', 'VB'], 1, 1, 1.0, '1', 2482], [['IN', 'RB', 'NNS', 'VBP'], 1, 1, 1.0, '0', 2483], [['IN', 'RB', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2484], [['IN', 'RB', 'NNS', 'VBN'], 1, 1, 1.0, '0', 2485], [['IN', 'NNS'], 10, 7, 0.7, '1', 2486], [['IN', 'NNS', 'MD'], 2, 2, 1.0, '1', 2487], [['IN', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 2488], [['IN', 'NNS', 'VB'], 1, 1, 1.0, '1', 2489], [['IN', 'NNS', 'JJ'], 1, 1, 1.0, '1', 2490], [['IN', 'NNS', 'JJ', 'NN'], 1, 1, 1.0, '1', 2491], [['IN', 'NNS', 'NN'], 1, 1, 1.0, '1', 2492], [['IN', 'NNS', 'VBP_domin'], 1, 1, 1.0, '1', 2493], [['IN', 'NNS', 'VBP_domin', 'DT'], 1, 1, 1.0, '1', 2494], [['IN', 'NNS', 'VBP_domin', 'DT', 'NN'], 1, 1, 1.0, '1', 2495], [['IN', 'NNS', 'VBP_domin', 'DT', 'JJ'], 1, 1, 1.0, '1', 2496], [['IN', 'NNS', 'VBP_domin', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2497], [['IN', 'NNS', 'VBP_domin', 'NN'], 1, 1, 1.0, '1', 2498], [['IN', 'NNS', 'VBP_domin', 'JJ'], 1, 1, 1.0, '1', 2499], [['IN', 'NNS', 'VBP_domin', 'JJ', 'NN'], 1, 1, 1.0, '1', 2500], [['IN', 'NNS', 'VBN'], 1, 1, 1.0, '0', 2501], [['IN', 'NNS', 'CD'], 1, 1, 1.0, '0', 2502], [['IN', 'NNS', 'VBP'], 1, 1, 1.0, '0', 2503], [['IN', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2504], [['IN', 'NNS', 'RB'], 2, 2, 1.0, '1', 2505], [['IN', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 2506], [['IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 2507], [['IN', 'NNS', 'DT'], 2, 2, 1.0, '1', 2508], [['IN', 'NNS', 'DT', 'RB'], 1, 1, 1.0, '1', 2509], [['IN', 'NNS', 'DT', 'NN'], 1, 1, 1.0, '1', 2510], [['IN', 'NNS', 'DT', 'JJ'], 1, 1, 1.0, '1', 2511], [['IN', 'NNS', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2512], [['IN', 'NNS', 'NNS', 'CD'], 1, 1, 1.0, '0', 2513], [['IN', 'JJR_better'], 1, 1, 1.0, '1', 2514], [['IN', 'JJR_better', 'MD'], 1, 1, 1.0, '1', 2515], [['IN', 'JJR_better', 'MD', 'VB'], 1, 1, 1.0, '1', 2516], [['IN', 'JJR_better', 'VB'], 1, 1, 1.0, '1', 2517], [['IN', 'JJR_better', 'NNS'], 1, 1, 1.0, '1', 2518], [['IN', 'JJR_better', 'NNS', 'MD'], 1, 1, 1.0, '1', 2519], [['IN', 'JJR_better', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 2520], [['IN', 'JJR_better', 'NNS', 'VB'], 1, 1, 1.0, '1', 2521], [['IN', 'VB'], 2, 2, 1.0, '1', 2522], [['IN', 'VB', 'JJ'], 1, 1, 1.0, '1', 2523], [['IN', 'NN_contrast'], 1, 1, 1.0, '1', 2524], [['IN', 'NN_contrast', 'TO'], 1, 1, 1.0, '1', 2525], [['IN', 'NN_contrast', 'TO', 'VB'], 1, 1, 1.0, '1', 2526], [['IN', 'NN_contrast', 'TO', 'VB', 'JJ'], 1, 1, 1.0, '1', 2527], [['IN', 'NN_contrast', 'TO', 'JJ'], 1, 1, 1.0, '1', 2528], [['IN', 'NN_contrast', 'VB'], 1, 1, 1.0, '1', 2529], [['IN', 'NN_contrast', 'VB', 'JJ'], 1, 1, 1.0, '1', 2530], [['IN', 'NN_contrast', 'JJ'], 1, 1, 1.0, '1', 2531], [['IN', 'CD', 'NNS'], 1, 1, 1.0, '1', 2532], [['IN', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 2533], [['IN', 'JJS_best'], 1, 1, 1.0, '1', 2534], [['IN', 'JJS_best', 'NN'], 1, 1, 1.0, '1', 2535], [['IN', 'JJS_best', 'JJ'], 1, 1, 1.0, '1', 2536], [['IN', 'JJS_best', 'JJ', 'NN'], 1, 1, 1.0, '1', 2537], [['IN', 'IN'], 6, 5, 0.8333333333333334, '1', 2538], [['IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 2539], [['IN', 'IN', 'NN'], 3, 3, 1.0, '1', 2540], [['IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 2541], [['IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2542], [['IN', 'MD'], 2, 2, 1.0, '1', 2543], [['IN', 'MD', 'VB'], 1, 1, 1.0, '1', 2544], [['IN', 'IN_over'], 3, 2, 0.6666666666666666, '1', 2545], [['IN', 'IN_over', 'JJ'], 1, 1, 1.0, '0', 2546], [['IN', 'IN_over', 'JJ', 'VBN'], 1, 1, 1.0, '0', 2547], [['IN', 'IN_over', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 2548], [['IN', 'IN_over', 'JJ', 'NN'], 1, 1, 1.0, '0', 2549], [['IN', 'IN_over', 'NN'], 3, 2, 0.6666666666666666, '1', 2550], [['IN', 'IN_over', 'VBN'], 1, 1, 1.0, '0', 2551], [['IN', 'IN_over', 'VBN', 'NN'], 1, 1, 1.0, '0', 2552], [['IN', 'JJS'], 1, 1, 1.0, '1', 2553], [['IN', 'VBP_domin'], 1, 1, 1.0, '1', 2554], [['IN', 'VBP_domin', 'DT'], 1, 1, 1.0, '1', 2555], [['IN', 'VBP_domin', 'DT', 'NN'], 1, 1, 1.0, '1', 2556], [['IN', 'VBP_domin', 'DT', 'JJ'], 1, 1, 1.0, '1', 2557], [['IN', 'VBP_domin', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2558], [['IN', 'VBP_domin', 'NN'], 1, 1, 1.0, '1', 2559], [['IN', 'VBP_domin', 'JJ'], 1, 1, 1.0, '1', 2560], [['IN', 'VBP_domin', 'JJ', 'NN'], 1, 1, 1.0, '1', 2561], [['VB_fail'], 1, 1, 1.0, '1', 2562], [['VB_fail', 'NN'], 1, 1, 1.0, '1', 2563], [['VB_fail', 'RB'], 1, 1, 1.0, '1', 2564], [['VB_fail', 'RB', 'NN'], 1, 1, 1.0, '1', 2565], [['VB_fail', 'RB', 'IN'], 1, 1, 1.0, '1', 2566], [['VB_fail', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 2567], [['VB_fail', 'IN'], 1, 1, 1.0, '1', 2568], [['VB_fail', 'IN', 'NN'], 1, 1, 1.0, '1', 2569], [['MD'], 3, 3, 1.0, '1', 2570], [['MD', 'VB_fail'], 1, 1, 1.0, '1', 2571], [['MD', 'VB_fail', 'NN'], 1, 1, 1.0, '1', 2572], [['MD', 'VB_fail', 'RB'], 1, 1, 1.0, '1', 2573], [['MD', 'VB_fail', 'RB', 'NN'], 1, 1, 1.0, '1', 2574], [['MD', 'VB_fail', 'RB', 'IN'], 1, 1, 1.0, '1', 2575], [['MD', 'VB_fail', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 2576], [['MD', 'VB_fail', 'IN'], 1, 1, 1.0, '1', 2577], [['MD', 'VB_fail', 'IN', 'NN'], 1, 1, 1.0, '1', 2578], [['MD', 'VB'], 1, 1, 1.0, '1', 2579], [['MD', 'NN'], 1, 1, 1.0, '1', 2580], [['MD', 'RB'], 1, 1, 1.0, '1', 2581], [['MD', 'RB', 'VB_fail'], 1, 1, 1.0, '1', 2582], [['MD', 'RB', 'VB_fail', 'NN'], 1, 1, 1.0, '1', 2583], [['MD', 'RB', 'VB_fail', 'RB'], 1, 1, 1.0, '1', 2584], [['MD', 'RB', 'VB_fail', 'RB', 'NN'], 1, 1, 1.0, '1', 2585], [['MD', 'RB', 'VB_fail', 'RB', 'IN'], 1, 1, 1.0, '1', 2586], [['MD', 'RB', 'VB_fail', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 2587], [['MD', 'RB', 'VB_fail', 'IN'], 1, 1, 1.0, '1', 2588], [['MD', 'RB', 'VB_fail', 'IN', 'NN'], 1, 1, 1.0, '1', 2589], [['MD', 'RB', 'NN'], 1, 1, 1.0, '1', 2590], [['MD', 'RB', 'RB'], 1, 1, 1.0, '1', 2591], [['MD', 'RB', 'RB', 'NN'], 1, 1, 1.0, '1', 2592], [['MD', 'RB', 'RB', 'IN'], 1, 1, 1.0, '1', 2593], [['MD', 'RB', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 2594], [['MD', 'RB', 'IN'], 1, 1, 1.0, '1', 2595], [['MD', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 2596], [['MD', 'IN'], 1, 1, 1.0, '1', 2597], [['MD', 'IN', 'NN'], 1, 1, 1.0, '1', 2598], [['IN_over'], 4, 3, 0.75, '1', 2599], [['IN_over', 'VBG'], 1, 1, 1.0, '1', 2600], [['IN_over', 'NN'], 4, 3, 0.75, '1', 2601], [['IN_over', 'NN', 'VBG'], 1, 1, 1.0, '1', 2602], [['IN_over', 'JJ', 'VBG'], 1, 1, 1.0, '1', 2603], [['IN_over', 'JJ', 'VBN'], 1, 1, 1.0, '0', 2604], [['IN_over', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 2605], [['IN_over', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 2606], [['IN_over', 'VBN'], 1, 1, 1.0, '0', 2607], [['IN_over', 'VBN', 'NN'], 1, 1, 1.0, '0', 2608], [['JJS'], 1, 1, 1.0, '1', 2609], [['JJR'], 1, 1, 1.0, '1', 2610], [['JJR', 'DT'], 1, 1, 1.0, '1', 2611], [['JJR', 'DT', 'JJS_best'], 1, 1, 1.0, '1', 2612], [['JJR', 'DT', 'JJS_best', 'NN'], 1, 1, 1.0, '1', 2613], [['JJR', 'DT', 'JJS_best', 'JJ'], 1, 1, 1.0, '1', 2614], [['JJR', 'DT', 'JJS_best', 'JJ', 'NN'], 1, 1, 1.0, '1', 2615], [['JJR', 'DT', 'NN'], 1, 1, 1.0, '1', 2616], [['JJR', 'DT', 'JJ'], 1, 1, 1.0, '1', 2617], [['JJR', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2618], [['JJR', 'JJS_best'], 1, 1, 1.0, '1', 2619], [['JJR', 'JJS_best', 'NN'], 1, 1, 1.0, '1', 2620], [['JJR', 'JJS_best', 'JJ'], 1, 1, 1.0, '1', 2621], [['JJR', 'JJS_best', 'JJ', 'NN'], 1, 1, 1.0, '1', 2622], [['JJR', 'NN'], 1, 1, 1.0, '1', 2623], [['JJR', 'JJ'], 1, 1, 1.0, '1', 2624], [['JJR', 'JJ', 'NN'], 1, 1, 1.0, '1', 2625], [['JJR', 'IN'], 1, 1, 1.0, '1', 2626], [['JJR', 'IN', 'DT'], 1, 1, 1.0, '1', 2627], [['JJR', 'IN', 'DT', 'JJS_best'], 1, 1, 1.0, '1', 2628], [['JJR', 'IN', 'DT', 'JJS_best', 'NN'], 1, 1, 1.0, '1', 2629], [['JJR', 'IN', 'DT', 'JJS_best', 'JJ'], 1, 1, 1.0, '1', 2630], [['JJR', 'IN', 'DT', 'JJS_best', 'JJ', 'NN'], 1, 1, 1.0, '1', 2631], [['JJR', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 2632], [['JJR', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 2633], [['JJR', 'IN', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2634], [['JJR', 'IN', 'JJS_best'], 1, 1, 1.0, '1', 2635], [['JJR', 'IN', 'JJS_best', 'NN'], 1, 1, 1.0, '1', 2636], [['JJR', 'IN', 'JJS_best', 'JJ'], 1, 1, 1.0, '1', 2637], [['JJR', 'IN', 'JJS_best', 'JJ', 'NN'], 1, 1, 1.0, '1', 2638], [['JJR', 'IN', 'NN'], 1, 1, 1.0, '1', 2639], [['JJR', 'IN', 'JJ'], 1, 1, 1.0, '1', 2640], [['JJR', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 2641], [['VBP_domin'], 1, 1, 1.0, '1', 2642], [['VBP_domin', 'DT'], 1, 1, 1.0, '1', 2643], [['VBP_domin', 'DT', 'NN'], 1, 1, 1.0, '1', 2644], [['VBP_domin', 'DT', 'JJ'], 1, 1, 1.0, '1', 2645], [['VBP_domin', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2646], [['VBP_domin', 'NN'], 1, 1, 1.0, '1', 2647], [['VBP_domin', 'JJ'], 1, 1, 1.0, '1', 2648], [['VBP_domin', 'JJ', 'NN'], 1, 1, 1.0, '1', 2649], [['RB_well'], 3, 2, 0.6666666666666666, '1', 2650], [['RB_well', 'NNS'], 1, 1, 1.0, '0', 2651], [['RB_well', 'NN'], 2, 2, 1.0, '1', 2652], [['RB_well', 'JJ'], 1, 1, 1.0, '0', 2653], [['RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2654], [['RB_well', 'IN'], 3, 2, 0.6666666666666666, '1', 2655], [['RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 2656], [['RB_well', 'IN', 'NN'], 2, 2, 1.0, '1', 2657], [['RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 2658], [['RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2659], [['RB_well', 'IN', 'IN'], 3, 2, 0.6666666666666666, '1', 2660], [['RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 2661], [['RB_well', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 2662], [['RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 2663], [['RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2664], [['VBN_compar'], 1, 1, 1.0, '1', 2665], [['VBN_compar', 'DT'], 1, 1, 1.0, '1', 2666], [['VBN_compar', 'DT', 'JJ'], 1, 1, 1.0, '1', 2667], [['VBN_compar', 'JJ'], 1, 1, 1.0, '1', 2668], [['VBN_compar', 'IN'], 1, 1, 1.0, '1', 2669], [['VBN_compar', 'IN', 'DT'], 1, 1, 1.0, '1', 2670], [['VBN_compar', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 2671], [['VBN_compar', 'IN', 'JJ'], 1, 1, 1.0, '1', 2672]]
MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True)
[[['JJ_improv'], 1, 1, 1.0, '1', 1], [['JJ_improv', 'NN'], 1, 1, 1.0, '1', 2], [['JJ_improv', 'NN', 'NN'], 1, 1, 1.0, '1', 3], [['JJ_improv', 'NN', 'IN'], 1, 1, 1.0, '1', 4], [['JJ_improv', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 5], [['JJ_improv', 'IN'], 1, 1, 1.0, '1', 6], [['JJ_improv', 'IN', 'NN'], 1, 1, 1.0, '1', 7], [['JJR_larger'], 1, 1, 1.0, '0', 8], [['JJR_larger', 'NNS'], 1, 1, 1.0, '0', 9], [['JJR_larger', 'NNS', 'NNS'], 1, 1, 1.0, '0', 10], [['JJR_larger', 'NNS', 'NNS', 'CD'], 1, 1, 1.0, '0', 11], [['JJR_larger', 'NNS', 'CD'], 1, 1, 1.0, '0', 12], [['JJR_larger', 'CD'], 1, 1, 1.0, '0', 13], [['VBG'], 3, 3, 1.0, '1', 14], [['VBG', 'RB_well'], 1, 1, 1.0, '1', 15], [['VBG', 'RB_well', 'NN'], 1, 1, 1.0, '1', 16], [['VBG', 'RB_well', 'IN'], 1, 1, 1.0, '1', 17], [['VBG', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 18], [['VBG', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 19], [['VBG', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 20], [['VBG', 'NNS'], 2, 2, 1.0, '1', 21], [['VBG', 'NNS', 'RB_well'], 1, 1, 1.0, '1', 22], [['VBG', 'NNS', 'RB_well', 'NN'], 1, 1, 1.0, '1', 23], [['VBG', 'NNS', 'RB_well', 'IN'], 1, 1, 1.0, '1', 24], [['VBG', 'NNS', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 25], [['VBG', 'NNS', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 26], [['VBG', 'NNS', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 27], [['VBG', 'NNS', 'NN'], 1, 1, 1.0, '1', 28], [['VBG', 'NNS', 'RB'], 1, 1, 1.0, '1', 29], [['VBG', 'NNS', 'RB', 'RB_well'], 1, 1, 1.0, '1', 30], [['VBG', 'NNS', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 31], [['VBG', 'NNS', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '1', 32], [['VBG', 'NNS', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 33], [['VBG', 'NNS', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 34], [['VBG', 'NNS', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 35], [['VBG', 'NNS', 'RB', 'NN'], 1, 1, 1.0, '1', 36], [['VBG', 'NNS', 'RB', 'IN'], 1, 1, 1.0, '1', 37], [['VBG', 'NNS', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 38], [['VBG', 'NNS', 'RB', 'IN', 'IN'], 1, 1, 1.0, '1', 39], [['VBG', 'NNS', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 40], [['VBG', 'NNS', 'IN'], 1, 1, 1.0, '1', 41], [['VBG', 'NNS', 'IN', 'NN'], 1, 1, 1.0, '1', 42], [['VBG', 'NNS', 'IN', 'IN'], 1, 1, 1.0, '1', 43], [['VBG', 'NNS', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 44], [['VBG', 'NN'], 1, 1, 1.0, '1', 45], [['VBG', 'RB'], 1, 1, 1.0, '1', 46], [['VBG', 'RB', 'RB_well'], 1, 1, 1.0, '1', 47], [['VBG', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 48], [['VBG', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '1', 49], [['VBG', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 50], [['VBG', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 51], [['VBG', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 52], [['VBG', 'RB', 'NN'], 1, 1, 1.0, '1', 53], [['VBG', 'RB', 'IN'], 1, 1, 1.0, '1', 54], [['VBG', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 55], [['VBG', 'RB', 'IN', 'IN'], 1, 1, 1.0, '1', 56], [['VBG', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 57], [['VBG', 'IN'], 1, 1, 1.0, '1', 58], [['VBG', 'IN', 'NN'], 1, 1, 1.0, '1', 59], [['VBG', 'IN', 'IN'], 1, 1, 1.0, '1', 60], [['VBG', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 61], [['JJR_better'], 2, 2, 1.0, '1', 62], [['JJR_better', 'MD'], 1, 1, 1.0, '1', 63], [['JJR_better', 'MD', 'VB'], 1, 1, 1.0, '1', 64], [['JJR_better', 'VB'], 1, 1, 1.0, '1', 65], [['JJR_better', 'JJS'], 1, 1, 1.0, '1', 66], [['JJR_better', 'IN'], 1, 1, 1.0, '1', 67], [['JJR_better', 'IN', 'DT'], 1, 1, 1.0, '1', 68], [['JJR_better', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 69], [['JJR_better', 'IN', 'JJS'], 1, 1, 1.0, '1', 70], [['JJR_better', 'DT'], 1, 1, 1.0, '1', 71], [['JJR_better', 'DT', 'JJS'], 1, 1, 1.0, '1', 72], [['JJR_better', 'NNS'], 1, 1, 1.0, '1', 73], [['JJR_better', 'NNS', 'MD'], 1, 1, 1.0, '1', 74], [['JJR_better', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 75], [['JJR_better', 'NNS', 'VB'], 1, 1, 1.0, '1', 76], [['NNS_gain'], 2, 2, 1.0, '1', 77], [['NNS_gain', 'VBP'], 1, 1, 1.0, '1', 78], [['NNS_gain', 'VBP', 'VBN'], 1, 1, 1.0, '1', 79], [['NNS_gain', 'VBP', 'VBN', 'VBN'], 1, 1, 1.0, '1', 80], [['NNS_gain', 'VBN'], 1, 1, 1.0, '1', 81], [['NNS_gain', 'VBN', 'VBN'], 1, 1, 1.0, '1', 82], [['NNS_gain', 'NN'], 1, 1, 1.0, '1', 83], [['NNS_gain', 'JJ'], 1, 1, 1.0, '1', 84], [['NNS_gain', 'JJ', 'NN'], 1, 1, 1.0, '1', 85], [['NNS_gain', 'IN'], 1, 1, 1.0, '1', 86], [['NNS_gain', 'IN', 'NN'], 1, 1, 1.0, '1', 87], [['NNS_gain', 'IN', 'JJ'], 1, 1, 1.0, '1', 88], [['NNS_gain', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 89], [['VBN'], 11, 7, 0.6363636363636364, '1', 90], [['VBN', 'JJ_improv'], 1, 1, 1.0, '1', 91], [['VBN', 'JJ_improv', 'NN'], 1, 1, 1.0, '1', 92], [['VBN', 'JJ_improv', 'NN', 'NN'], 1, 1, 1.0, '1', 93], [['VBN', 'JJ_improv', 'NN', 'IN'], 1, 1, 1.0, '1', 94], [['VBN', 'JJ_improv', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 95], [['VBN', 'JJ_improv', 'IN'], 1, 1, 1.0, '1', 96], [['VBN', 'JJ_improv', 'IN', 'NN'], 1, 1, 1.0, '1', 97], [['VBN', 'VB'], 1, 1, 1.0, '1', 98], [['VBN', 'VB', 'JJ_advantag'], 1, 1, 1.0, '1', 99], [['VBN', 'JJ'], 1, 1, 1.0, '1', 100], [['VBN', 'JJ_advantag'], 1, 1, 1.0, '1', 101], [['VBN', 'VBD'], 1, 1, 1.0, '1', 102], [['VBN', 'VBD', 'JJR_better'], 1, 1, 1.0, '1', 103], [['VBN', 'VBD', 'JJR_better', 'DT'], 1, 1, 1.0, '1', 104], [['VBN', 'VBD', 'JJR_better', 'DT', 'JJS'], 1, 1, 1.0, '1', 105], [['VBN', 'VBD', 'JJR_better', 'JJS'], 1, 1, 1.0, '1', 106], [['VBN', 'VBD', 'JJR_better', 'IN'], 1, 1, 1.0, '1', 107], [['VBN', 'VBD', 'JJR_better', 'IN', 'DT'], 1, 1, 1.0, '1', 108], [['VBN', 'VBD', 'JJR_better', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 109], [['VBN', 'VBD', 'JJR_better', 'IN', 'JJS'], 1, 1, 1.0, '1', 110], [['VBN', 'VBD', 'DT'], 1, 1, 1.0, '1', 111], [['VBN', 'VBD', 'DT', 'JJS'], 1, 1, 1.0, '1', 112], [['VBN', 'VBD', 'JJS'], 1, 1, 1.0, '1', 113], [['VBN', 'VBD', 'IN'], 1, 1, 1.0, '1', 114], [['VBN', 'VBD', 'IN', 'DT'], 1, 1, 1.0, '1', 115], [['VBN', 'VBD', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 116], [['VBN', 'VBD', 'IN', 'JJS'], 1, 1, 1.0, '1', 117], [['VBN', 'DT_all'], 1, 1, 1.0, '1', 118], [['VBN', 'DT_all', 'NNS'], 1, 1, 1.0, '1', 119], [['VBN', 'DT_all', 'NNS', 'NNS'], 1, 1, 1.0, '1', 120], [['VBN', 'DT_all', 'CD'], 1, 1, 1.0, '1', 121], [['VBN', 'DT_all', 'CD', 'NNS'], 1, 1, 1.0, '1', 122], [['VBN', 'DT_all', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 123], [['VBN', 'JJS'], 1, 1, 1.0, '1', 124], [['VBN', 'VBN'], 2, 2, 1.0, '1', 125], [['VBN', 'VBN', 'DT_all'], 1, 1, 1.0, '1', 126], [['VBN', 'VBN', 'DT_all', 'NNS'], 1, 1, 1.0, '1', 127], [['VBN', 'VBN', 'DT_all', 'NNS', 'NNS'], 1, 1, 1.0, '1', 128], [['VBN', 'VBN', 'DT_all', 'CD'], 1, 1, 1.0, '1', 129], [['VBN', 'VBN', 'DT_all', 'CD', 'NNS'], 1, 1, 1.0, '1', 130], [['VBN', 'VBN', 'DT_all', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 131], [['VBN', 'VBN', 'CD'], 1, 1, 1.0, '1', 132], [['VBN', 'VBN', 'CD', 'NNS'], 1, 1, 1.0, '1', 133], [['VBN', 'VBN', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 134], [['VBN', 'VBN', 'NNS'], 1, 1, 1.0, '1', 135], [['VBN', 'VBN', 'NNS', 'NNS'], 1, 1, 1.0, '1', 136], [['VBN', 'VBN', 'IN'], 1, 1, 1.0, '1', 137], [['VBN', 'VBN', 'IN', 'DT_all'], 1, 1, 1.0, '1', 138], [['VBN', 'VBN', 'IN', 'DT_all', 'NNS'], 1, 1, 1.0, '1', 139], [['VBN', 'VBN', 'IN', 'DT_all', 'NNS', 'NNS'], 1, 1, 1.0, '1', 140], [['VBN', 'VBN', 'IN', 'DT_all', 'CD'], 1, 1, 1.0, '1', 141], [['VBN', 'VBN', 'IN', 'DT_all', 'CD', 'NNS'], 1, 1, 1.0, '1', 142], [['VBN', 'VBN', 'IN', 'DT_all', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 143], [['VBN', 'VBN', 'IN', 'NNS'], 1, 1, 1.0, '1', 144], [['VBN', 'VBN', 'IN', 'NNS', 'NNS'], 1, 1, 1.0, '1', 145], [['VBN', 'VBN', 'IN', 'CD'], 1, 1, 1.0, '1', 146], [['VBN', 'VBN', 'IN', 'CD', 'NNS'], 1, 1, 1.0, '1', 147], [['VBN', 'VBN', 'IN', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 148], [['VBN', 'CD'], 1, 1, 1.0, '1', 149], [['VBN', 'CD', 'NNS'], 1, 1, 1.0, '1', 150], [['VBN', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 151], [['VBN', 'TO'], 1, 1, 1.0, '1', 152], [['VBN', 'TO', 'VB'], 1, 1, 1.0, '1', 153], [['VBN', 'TO', 'VB', 'JJ_advantag'], 1, 1, 1.0, '1', 154], [['VBN', 'TO', 'JJ_advantag'], 1, 1, 1.0, '1', 155], [['VBN', 'NN'], 3, 2, 0.6666666666666666, '1', 156], [['VBN', 'NN', 'JJR_better'], 1, 1, 1.0, '1', 157], [['VBN', 'NN', 'JJR_better', 'DT'], 1, 1, 1.0, '1', 158], [['VBN', 'NN', 'JJR_better', 'DT', 'JJS'], 1, 1, 1.0, '1', 159], [['VBN', 'NN', 'JJR_better', 'JJS'], 1, 1, 1.0, '1', 160], [['VBN', 'NN', 'JJR_better', 'IN'], 1, 1, 1.0, '1', 161], [['VBN', 'NN', 'JJR_better', 'IN', 'DT'], 1, 1, 1.0, '1', 162], [['VBN', 'NN', 'JJR_better', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 163], [['VBN', 'NN', 'JJR_better', 'IN', 'JJS'], 1, 1, 1.0, '1', 164], [['VBN', 'NN', 'NN'], 1, 1, 1.0, '1', 165], [['VBN', 'NN', 'VBD'], 1, 1, 1.0, '1', 166], [['VBN', 'NN', 'VBD', 'JJR_better'], 1, 1, 1.0, '1', 167], [['VBN', 'NN', 'VBD', 'JJR_better', 'DT'], 1, 1, 1.0, '1', 168], [['VBN', 'NN', 'VBD', 'JJR_better', 'DT', 'JJS'], 1, 1, 1.0, '1', 169], [['VBN', 'NN', 'VBD', 'JJR_better', 'JJS'], 1, 1, 1.0, '1', 170], [['VBN', 'NN', 'VBD', 'JJR_better', 'IN'], 1, 1, 1.0, '1', 171], [['VBN', 'NN', 'VBD', 'JJR_better', 'IN', 'DT'], 1, 1, 1.0, '1', 172], [['VBN', 'NN', 'VBD', 'JJR_better', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 173], [['VBN', 'NN', 'VBD', 'JJR_better', 'IN', 'JJS'], 1, 1, 1.0, '1', 174], [['VBN', 'NN', 'VBD', 'DT'], 1, 1, 1.0, '1', 175], [['VBN', 'NN', 'VBD', 'DT', 'JJS'], 1, 1, 1.0, '1', 176], [['VBN', 'NN', 'VBD', 'JJS'], 1, 1, 1.0, '1', 177], [['VBN', 'NN', 'VBD', 'IN'], 1, 1, 1.0, '1', 178], [['VBN', 'NN', 'VBD', 'IN', 'DT'], 1, 1, 1.0, '1', 179], [['VBN', 'NN', 'VBD', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 180], [['VBN', 'NN', 'VBD', 'IN', 'JJS'], 1, 1, 1.0, '1', 181], [['VBN', 'NN', 'JJS'], 1, 1, 1.0, '1', 182], [['VBN', 'NN', 'IN'], 2, 2, 1.0, '1', 183], [['VBN', 'NN', 'IN', 'DT'], 1, 1, 1.0, '1', 184], [['VBN', 'NN', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 185], [['VBN', 'NN', 'IN', 'JJS'], 1, 1, 1.0, '1', 186], [['VBN', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 187], [['VBN', 'NN', 'DT'], 1, 1, 1.0, '1', 188], [['VBN', 'NN', 'DT', 'JJS'], 1, 1, 1.0, '1', 189], [['VBN', 'JJR_better'], 1, 1, 1.0, '1', 190], [['VBN', 'JJR_better', 'DT'], 1, 1, 1.0, '1', 191], [['VBN', 'JJR_better', 'DT', 'JJS'], 1, 1, 1.0, '1', 192], [['VBN', 'JJR_better', 'JJS'], 1, 1, 1.0, '1', 193], [['VBN', 'JJR_better', 'IN'], 1, 1, 1.0, '1', 194], [['VBN', 'JJR_better', 'IN', 'DT'], 1, 1, 1.0, '1', 195], [['VBN', 'JJR_better', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 196], [['VBN', 'JJR_better', 'IN', 'JJS'], 1, 1, 1.0, '1', 197], [['VBN', 'RB'], 1, 1, 1.0, '1', 198], [['VBN', 'RB', 'DT'], 1, 1, 1.0, '1', 199], [['VBN', 'RB', 'DT', 'JJ'], 1, 1, 1.0, '1', 200], [['VBN', 'RB', 'IN'], 1, 1, 1.0, '1', 201], [['VBN', 'RB', 'IN', 'DT'], 1, 1, 1.0, '1', 202], [['VBN', 'RB', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 203], [['VBN', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '1', 204], [['VBN', 'RB', 'JJ'], 1, 1, 1.0, '1', 205], [['VBN', 'RB', 'VBN_compar'], 1, 1, 1.0, '1', 206], [['VBN', 'RB', 'VBN_compar', 'DT'], 1, 1, 1.0, '1', 207], [['VBN', 'RB', 'VBN_compar', 'DT', 'JJ'], 1, 1, 1.0, '1', 208], [['VBN', 'RB', 'VBN_compar', 'JJ'], 1, 1, 1.0, '1', 209], [['VBN', 'RB', 'VBN_compar', 'IN'], 1, 1, 1.0, '1', 210], [['VBN', 'RB', 'VBN_compar', 'IN', 'DT'], 1, 1, 1.0, '1', 211], [['VBN', 'RB', 'VBN_compar', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 212], [['VBN', 'RB', 'VBN_compar', 'IN', 'JJ'], 1, 1, 1.0, '1', 213], [['VBN', 'IN'], 7, 5, 0.7142857142857143, '1', 214], [['VBN', 'IN', 'JJ_improv'], 1, 1, 1.0, '1', 215], [['VBN', 'IN', 'JJ_improv', 'NN'], 1, 1, 1.0, '1', 216], [['VBN', 'IN', 'JJ_improv', 'NN', 'NN'], 1, 1, 1.0, '1', 217], [['VBN', 'IN', 'JJ_improv', 'NN', 'IN'], 1, 1, 1.0, '1', 218], [['VBN', 'IN', 'JJ_improv', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 219], [['VBN', 'IN', 'JJ_improv', 'IN'], 1, 1, 1.0, '1', 220], [['VBN', 'IN', 'JJ_improv', 'IN', 'NN'], 1, 1, 1.0, '1', 221], [['VBN', 'IN', 'NN'], 1, 1, 1.0, '1', 222], [['VBN', 'IN', 'NN', 'NN'], 1, 1, 1.0, '1', 223], [['VBN', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 224], [['VBN', 'IN', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 225], [['VBN', 'IN', 'DT_all'], 1, 1, 1.0, '1', 226], [['VBN', 'IN', 'DT_all', 'NNS'], 1, 1, 1.0, '1', 227], [['VBN', 'IN', 'DT_all', 'NNS', 'NNS'], 1, 1, 1.0, '1', 228], [['VBN', 'IN', 'DT_all', 'CD'], 1, 1, 1.0, '1', 229], [['VBN', 'IN', 'DT_all', 'CD', 'NNS'], 1, 1, 1.0, '1', 230], [['VBN', 'IN', 'DT_all', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 231], [['VBN', 'IN', 'JJS'], 1, 1, 1.0, '1', 232], [['VBN', 'IN', 'CD'], 1, 1, 1.0, '1', 233], [['VBN', 'IN', 'CD', 'NNS'], 1, 1, 1.0, '1', 234], [['VBN', 'IN', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 235], [['VBN', 'IN', 'JJ'], 1, 1, 1.0, '1', 236], [['VBN', 'IN', 'IN'], 1, 1, 1.0, '1', 237], [['VBN', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 238], [['VBN', 'IN', 'DT'], 3, 3, 1.0, '1', 239], [['VBN', 'IN', 'DT', 'JJ_improv'], 1, 1, 1.0, '1', 240], [['VBN', 'IN', 'DT', 'JJ_improv', 'NN'], 1, 1, 1.0, '1', 241], [['VBN', 'IN', 'DT', 'JJ_improv', 'NN', 'NN'], 1, 1, 1.0, '1', 242], [['VBN', 'IN', 'DT', 'JJ_improv', 'NN', 'IN'], 1, 1, 1.0, '1', 243], [['VBN', 'IN', 'DT', 'JJ_improv', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 244], [['VBN', 'IN', 'DT', 'JJ_improv', 'IN'], 1, 1, 1.0, '1', 245], [['VBN', 'IN', 'DT', 'JJ_improv', 'IN', 'NN'], 1, 1, 1.0, '1', 246], [['VBN', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 247], [['VBN', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 248], [['VBN', 'IN', 'DT', 'NN', 'NN'], 1, 1, 1.0, '1', 249], [['VBN', 'IN', 'DT', 'NN', 'IN'], 1, 1, 1.0, '1', 250], [['VBN', 'IN', 'DT', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 251], [['VBN', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 252], [['VBN', 'IN', 'DT', 'IN'], 1, 1, 1.0, '1', 253], [['VBN', 'IN', 'DT', 'IN', 'NN'], 1, 1, 1.0, '1', 254], [['VBN', 'IN', 'NNS'], 1, 1, 1.0, '1', 255], [['VBN', 'IN', 'NNS', 'NNS'], 1, 1, 1.0, '1', 256], [['VBN', 'DT'], 3, 3, 1.0, '1', 257], [['VBN', 'DT', 'JJ_improv'], 1, 1, 1.0, '1', 258], [['VBN', 'DT', 'JJ_improv', 'NN'], 1, 1, 1.0, '1', 259], [['VBN', 'DT', 'JJ_improv', 'NN', 'NN'], 1, 1, 1.0, '1', 260], [['VBN', 'DT', 'JJ_improv', 'NN', 'IN'], 1, 1, 1.0, '1', 261], [['VBN', 'DT', 'JJ_improv', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 262], [['VBN', 'DT', 'JJ_improv', 'IN'], 1, 1, 1.0, '1', 263], [['VBN', 'DT', 'JJ_improv', 'IN', 'NN'], 1, 1, 1.0, '1', 264], [['VBN', 'DT', 'JJS'], 1, 1, 1.0, '1', 265], [['VBN', 'DT', 'NN'], 1, 1, 1.0, '1', 266], [['VBN', 'DT', 'NN', 'NN'], 1, 1, 1.0, '1', 267], [['VBN', 'DT', 'NN', 'IN'], 1, 1, 1.0, '1', 268], [['VBN', 'DT', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 269], [['VBN', 'DT', 'JJ'], 1, 1, 1.0, '1', 270], [['VBN', 'DT', 'IN'], 1, 1, 1.0, '1', 271], [['VBN', 'DT', 'IN', 'NN'], 1, 1, 1.0, '1', 272], [['VBN', 'NNS'], 1, 1, 1.0, '1', 273], [['VBN', 'NNS', 'NNS'], 1, 1, 1.0, '1', 274], [['VBN', 'VBN_compar'], 1, 1, 1.0, '1', 275], [['VBN', 'VBN_compar', 'DT'], 1, 1, 1.0, '1', 276], [['VBN', 'VBN_compar', 'DT', 'JJ'], 1, 1, 1.0, '1', 277], [['VBN', 'VBN_compar', 'JJ'], 1, 1, 1.0, '1', 278], [['VBN', 'VBN_compar', 'IN'], 1, 1, 1.0, '1', 279], [['VBN', 'VBN_compar', 'IN', 'DT'], 1, 1, 1.0, '1', 280], [['VBN', 'VBN_compar', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 281], [['VBN', 'VBN_compar', 'IN', 'JJ'], 1, 1, 1.0, '1', 282], [['VBP'], 9, 6, 0.6666666666666666, '1', 283], [['VBP', 'JJR_better'], 1, 1, 1.0, '1', 284], [['VBP', 'JJR_better', 'MD'], 1, 1, 1.0, '1', 285], [['VBP', 'JJR_better', 'MD', 'VB'], 1, 1, 1.0, '1', 286], [['VBP', 'JJR_better', 'VB'], 1, 1, 1.0, '1', 287], [['VBP', 'JJR_better', 'NNS'], 1, 1, 1.0, '1', 288], [['VBP', 'JJR_better', 'NNS', 'MD'], 1, 1, 1.0, '1', 289], [['VBP', 'JJR_better', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 290], [['VBP', 'JJR_better', 'NNS', 'VB'], 1, 1, 1.0, '1', 291], [['VBP', 'VB'], 1, 1, 1.0, '1', 292], [['VBP', 'JJ'], 1, 1, 1.0, '1', 293], [['VBP', 'JJ', 'NNS_gain'], 1, 1, 1.0, '1', 294], [['VBP', 'JJ', 'NNS_gain', 'NN'], 1, 1, 1.0, '1', 295], [['VBP', 'JJ', 'NNS_gain', 'JJ'], 1, 1, 1.0, '1', 296], [['VBP', 'JJ', 'NNS_gain', 'JJ', 'NN'], 1, 1, 1.0, '1', 297], [['VBP', 'JJ', 'NNS_gain', 'IN'], 1, 1, 1.0, '1', 298], [['VBP', 'JJ', 'NNS_gain', 'IN', 'NN'], 1, 1, 1.0, '1', 299], [['VBP', 'JJ', 'NNS_gain', 'IN', 'JJ'], 1, 1, 1.0, '1', 300], [['VBP', 'JJ', 'NNS_gain', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 301], [['VBP', 'JJ', 'JJ'], 1, 1, 1.0, '1', 302], [['VBP', 'JJ', 'JJ', 'NN'], 1, 1, 1.0, '1', 303], [['VBP', 'JJ', 'NN'], 1, 1, 1.0, '1', 304], [['VBP', 'JJ', 'NN', 'NNS_gain'], 1, 1, 1.0, '1', 305], [['VBP', 'JJ', 'NN', 'NNS_gain', 'NN'], 1, 1, 1.0, '1', 306], [['VBP', 'JJ', 'NN', 'NNS_gain', 'JJ'], 1, 1, 1.0, '1', 307], [['VBP', 'JJ', 'NN', 'NNS_gain', 'JJ', 'NN'], 1, 1, 1.0, '1', 308], [['VBP', 'JJ', 'NN', 'NNS_gain', 'IN'], 1, 1, 1.0, '1', 309], [['VBP', 'JJ', 'NN', 'NNS_gain', 'IN', 'NN'], 1, 1, 1.0, '1', 310], [['VBP', 'JJ', 'NN', 'NNS_gain', 'IN', 'JJ'], 1, 1, 1.0, '1', 311], [['VBP', 'JJ', 'NN', 'NNS_gain', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 312], [['VBP', 'JJ', 'NN', 'NN'], 1, 1, 1.0, '1', 313], [['VBP', 'JJ', 'NN', 'JJ'], 1, 1, 1.0, '1', 314], [['VBP', 'JJ', 'NN', 'JJ', 'NN'], 1, 1, 1.0, '1', 315], [['VBP', 'JJ', 'NN', 'IN'], 1, 1, 1.0, '1', 316], [['VBP', 'JJ', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 317], [['VBP', 'JJ', 'NN', 'IN', 'JJ'], 1, 1, 1.0, '1', 318], [['VBP', 'JJ', 'NN', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 319], [['VBP', 'JJ', 'IN'], 1, 1, 1.0, '1', 320], [['VBP', 'JJ', 'IN', 'NN'], 1, 1, 1.0, '1', 321], [['VBP', 'JJ', 'IN', 'JJ'], 1, 1, 1.0, '1', 322], [['VBP', 'JJ', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 323], [['VBP', 'NN'], 5, 3, 0.6, '1', 324], [['VBP', 'NN', 'JJ'], 1, 1, 1.0, '1', 325], [['VBP', 'NN', 'JJ', 'NN'], 1, 1, 1.0, '1', 326], [['VBP', 'NN', 'NN'], 2, 2, 1.0, '1', 327], [['VBP', 'NN', 'NNS_gain'], 1, 1, 1.0, '1', 328], [['VBP', 'NN', 'NNS_gain', 'NN'], 1, 1, 1.0, '1', 329], [['VBP', 'NN', 'NNS_gain', 'JJ'], 1, 1, 1.0, '1', 330], [['VBP', 'NN', 'NNS_gain', 'JJ', 'NN'], 1, 1, 1.0, '1', 331], [['VBP', 'NN', 'NNS_gain', 'IN'], 1, 1, 1.0, '1', 332], [['VBP', 'NN', 'NNS_gain', 'IN', 'NN'], 1, 1, 1.0, '1', 333], [['VBP', 'NN', 'NNS_gain', 'IN', 'JJ'], 1, 1, 1.0, '1', 334], [['VBP', 'NN', 'NNS_gain', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 335], [['VBP', 'NN', 'VBN'], 2, 2, 1.0, '0', 336], [['VBP', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 337], [['VBP', 'NN', 'RB'], 1, 1, 1.0, '1', 338], [['VBP', 'NN', 'RB', 'RB_well'], 1, 1, 1.0, '1', 339], [['VBP', 'NN', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 340], [['VBP', 'NN', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '1', 341], [['VBP', 'NN', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 342], [['VBP', 'NN', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 343], [['VBP', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 344], [['VBP', 'NN', 'RB', 'NN'], 1, 1, 1.0, '1', 345], [['VBP', 'NN', 'RB', 'IN'], 1, 1, 1.0, '1', 346], [['VBP', 'NN', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 347], [['VBP', 'NN', 'RB', 'IN', 'IN'], 1, 1, 1.0, '1', 348], [['VBP', 'NN', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 349], [['VBP', 'NN', 'IN'], 5, 3, 0.6, '1', 350], [['VBP', 'NN', 'IN', 'NN'], 2, 2, 1.0, '1', 351], [['VBP', 'NN', 'IN', 'JJ'], 1, 1, 1.0, '1', 352], [['VBP', 'NN', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 353], [['VBP', 'NN', 'IN', 'IN'], 1, 1, 1.0, '1', 354], [['VBP', 'NN', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 355], [['VBP', 'NN', 'RB_well'], 1, 1, 1.0, '1', 356], [['VBP', 'NN', 'RB_well', 'NN'], 1, 1, 1.0, '1', 357], [['VBP', 'NN', 'RB_well', 'IN'], 1, 1, 1.0, '1', 358], [['VBP', 'NN', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 359], [['VBP', 'NN', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 360], [['VBP', 'NN', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 361], [['VBP', 'MD'], 1, 1, 1.0, '1', 362], [['VBP', 'MD', 'VB'], 1, 1, 1.0, '1', 363], [['VBP', 'NNS_gain'], 1, 1, 1.0, '1', 364], [['VBP', 'NNS_gain', 'NN'], 1, 1, 1.0, '1', 365], [['VBP', 'NNS_gain', 'JJ'], 1, 1, 1.0, '1', 366], [['VBP', 'NNS_gain', 'JJ', 'NN'], 1, 1, 1.0, '1', 367], [['VBP', 'NNS_gain', 'IN'], 1, 1, 1.0, '1', 368], [['VBP', 'NNS_gain', 'IN', 'NN'], 1, 1, 1.0, '1', 369], [['VBP', 'NNS_gain', 'IN', 'JJ'], 1, 1, 1.0, '1', 370], [['VBP', 'NNS_gain', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 371], [['VBP', 'VBN'], 4, 3, 0.75, '0', 372], [['VBP', 'VBN', 'VBN'], 1, 1, 1.0, '1', 373], [['VBP', 'VBN', 'IN'], 2, 2, 1.0, '0', 374], [['VBP', 'NNS_advantag'], 2, 2, 1.0, '1', 375], [['VBP', 'NNS_advantag', 'NNS'], 1, 1, 1.0, '1', 376], [['VBP', 'NNS_advantag', 'NNS', 'IN'], 1, 1, 1.0, '1', 377], [['VBP', 'NNS_advantag', 'NN'], 1, 1, 1.0, '1', 378], [['VBP', 'NNS_advantag', 'NN', 'IN'], 1, 1, 1.0, '1', 379], [['VBP', 'NNS_advantag', 'IN'], 2, 2, 1.0, '1', 380], [['VBP', 'NNS_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 381], [['VBP', 'NNS_advantag', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 382], [['VBP', 'NNS_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 383], [['VBP', 'NNS_advantag', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 384], [['VBP', 'NNS_advantag', 'IN', 'IN'], 2, 2, 1.0, '1', 385], [['VBP', 'JJS_best'], 2, 2, 1.0, '0', 386], [['VBP', 'JJS_best', 'VBN'], 2, 2, 1.0, '0', 387], [['VBP', 'JJS_best', 'VBN', 'IN'], 2, 2, 1.0, '0', 388], [['VBP', 'JJS_best', 'NN'], 2, 2, 1.0, '0', 389], [['VBP', 'JJS_best', 'NN', 'VBN'], 2, 2, 1.0, '0', 390], [['VBP', 'JJS_best', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 391], [['VBP', 'JJS_best', 'NN', 'IN'], 2, 2, 1.0, '0', 392], [['VBP', 'JJS_best', 'IN'], 2, 2, 1.0, '0', 393], [['VBP', 'RB'], 2, 2, 1.0, '1', 394], [['VBP', 'RB', 'JJR_better'], 1, 1, 1.0, '1', 395], [['VBP', 'RB', 'JJR_better', 'MD'], 1, 1, 1.0, '1', 396], [['VBP', 'RB', 'JJR_better', 'MD', 'VB'], 1, 1, 1.0, '1', 397], [['VBP', 'RB', 'JJR_better', 'VB'], 1, 1, 1.0, '1', 398], [['VBP', 'RB', 'JJR_better', 'NNS'], 1, 1, 1.0, '1', 399], [['VBP', 'RB', 'JJR_better', 'NNS', 'MD'], 1, 1, 1.0, '1', 400], [['VBP', 'RB', 'JJR_better', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 401], [['VBP', 'RB', 'JJR_better', 'NNS', 'VB'], 1, 1, 1.0, '1', 402], [['VBP', 'RB', 'VB'], 1, 1, 1.0, '1', 403], [['VBP', 'RB', 'NN'], 1, 1, 1.0, '1', 404], [['VBP', 'RB', 'MD'], 1, 1, 1.0, '1', 405], [['VBP', 'RB', 'MD', 'VB'], 1, 1, 1.0, '1', 406], [['VBP', 'RB', 'IN'], 1, 1, 1.0, '1', 407], [['VBP', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 408], [['VBP', 'RB', 'IN', 'IN'], 1, 1, 1.0, '1', 409], [['VBP', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 410], [['VBP', 'RB', 'RB_well'], 1, 1, 1.0, '1', 411], [['VBP', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 412], [['VBP', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '1', 413], [['VBP', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 414], [['VBP', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 415], [['VBP', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 416], [['VBP', 'RB', 'NNS'], 1, 1, 1.0, '1', 417], [['VBP', 'RB', 'NNS', 'MD'], 1, 1, 1.0, '1', 418], [['VBP', 'RB', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 419], [['VBP', 'RB', 'NNS', 'VB'], 1, 1, 1.0, '1', 420], [['VBP', 'IN'], 7, 5, 0.7142857142857143, '1', 421], [['VBP', 'IN', 'JJR_better'], 1, 1, 1.0, '1', 422], [['VBP', 'IN', 'JJR_better', 'MD'], 1, 1, 1.0, '1', 423], [['VBP', 'IN', 'JJR_better', 'MD', 'VB'], 1, 1, 1.0, '1', 424], [['VBP', 'IN', 'JJR_better', 'VB'], 1, 1, 1.0, '1', 425], [['VBP', 'IN', 'JJR_better', 'NNS'], 1, 1, 1.0, '1', 426], [['VBP', 'IN', 'JJR_better', 'NNS', 'MD'], 1, 1, 1.0, '1', 427], [['VBP', 'IN', 'JJR_better', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 428], [['VBP', 'IN', 'JJR_better', 'NNS', 'VB'], 1, 1, 1.0, '1', 429], [['VBP', 'IN', 'VB'], 1, 1, 1.0, '1', 430], [['VBP', 'IN', 'JJ'], 1, 1, 1.0, '1', 431], [['VBP', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 432], [['VBP', 'IN', 'NN'], 3, 3, 1.0, '1', 433], [['VBP', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 434], [['VBP', 'IN', 'MD'], 1, 1, 1.0, '1', 435], [['VBP', 'IN', 'MD', 'VB'], 1, 1, 1.0, '1', 436], [['VBP', 'IN', 'RB'], 1, 1, 1.0, '1', 437], [['VBP', 'IN', 'RB', 'JJR_better'], 1, 1, 1.0, '1', 438], [['VBP', 'IN', 'RB', 'JJR_better', 'MD'], 1, 1, 1.0, '1', 439], [['VBP', 'IN', 'RB', 'JJR_better', 'MD', 'VB'], 1, 1, 1.0, '1', 440], [['VBP', 'IN', 'RB', 'JJR_better', 'VB'], 1, 1, 1.0, '1', 441], [['VBP', 'IN', 'RB', 'JJR_better', 'NNS'], 1, 1, 1.0, '1', 442], [['VBP', 'IN', 'RB', 'JJR_better', 'NNS', 'MD'], 1, 1, 1.0, '1', 443], [['VBP', 'IN', 'RB', 'JJR_better', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 444], [['VBP', 'IN', 'RB', 'JJR_better', 'NNS', 'VB'], 1, 1, 1.0, '1', 445], [['VBP', 'IN', 'RB', 'VB'], 1, 1, 1.0, '1', 446], [['VBP', 'IN', 'RB', 'NNS'], 1, 1, 1.0, '1', 447], [['VBP', 'IN', 'RB', 'NNS', 'MD'], 1, 1, 1.0, '1', 448], [['VBP', 'IN', 'RB', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 449], [['VBP', 'IN', 'RB', 'NNS', 'VB'], 1, 1, 1.0, '1', 450], [['VBP', 'IN', 'RB', 'MD'], 1, 1, 1.0, '1', 451], [['VBP', 'IN', 'RB', 'MD', 'VB'], 1, 1, 1.0, '1', 452], [['VBP', 'IN', 'IN'], 3, 3, 1.0, '1', 453], [['VBP', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 454], [['VBP', 'IN', 'NNS'], 2, 2, 1.0, '1', 455], [['VBP', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 456], [['VBP', 'IN', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 457], [['VBP', 'IN', 'NNS', 'VB'], 1, 1, 1.0, '1', 458], [['VBP', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 459], [['VBP', 'RB_well'], 1, 1, 1.0, '1', 460], [['VBP', 'RB_well', 'NN'], 1, 1, 1.0, '1', 461], [['VBP', 'RB_well', 'IN'], 1, 1, 1.0, '1', 462], [['VBP', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 463], [['VBP', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 464], [['VBP', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 465], [['VBP', 'DT'], 3, 2, 0.6666666666666666, '0', 466], [['VBP', 'DT', 'NNS_advantag'], 1, 1, 1.0, '1', 467], [['VBP', 'DT', 'NNS_advantag', 'NN'], 1, 1, 1.0, '1', 468], [['VBP', 'DT', 'NNS_advantag', 'NN', 'IN'], 1, 1, 1.0, '1', 469], [['VBP', 'DT', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 470], [['VBP', 'DT', 'NNS_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 471], [['VBP', 'DT', 'NNS_advantag', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 472], [['VBP', 'DT', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 473], [['VBP', 'DT', 'JJS_best'], 2, 2, 1.0, '0', 474], [['VBP', 'DT', 'JJS_best', 'VBN'], 2, 2, 1.0, '0', 475], [['VBP', 'DT', 'JJS_best', 'VBN', 'IN'], 2, 2, 1.0, '0', 476], [['VBP', 'DT', 'JJS_best', 'NN'], 2, 2, 1.0, '0', 477], [['VBP', 'DT', 'JJS_best', 'NN', 'VBN'], 2, 2, 1.0, '0', 478], [['VBP', 'DT', 'JJS_best', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 479], [['VBP', 'DT', 'JJS_best', 'NN', 'IN'], 2, 2, 1.0, '0', 480], [['VBP', 'DT', 'JJS_best', 'IN'], 2, 2, 1.0, '0', 481], [['VBP', 'DT', 'VBN'], 2, 2, 1.0, '0', 482], [['VBP', 'DT', 'VBN', 'IN'], 2, 2, 1.0, '0', 483], [['VBP', 'DT', 'NN'], 3, 2, 0.6666666666666666, '0', 484], [['VBP', 'DT', 'NN', 'VBN'], 2, 2, 1.0, '0', 485], [['VBP', 'DT', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 486], [['VBP', 'DT', 'NN', 'IN'], 3, 2, 0.6666666666666666, '0', 487], [['VBP', 'DT', 'IN'], 3, 2, 0.6666666666666666, '0', 488], [['VBP', 'DT', 'IN', 'NN'], 1, 1, 1.0, '1', 489], [['VBP', 'DT', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 490], [['VBP', 'DT', 'IN', 'IN'], 1, 1, 1.0, '1', 491], [['VBP', 'NNS'], 2, 2, 1.0, '1', 492], [['VBP', 'NNS', 'NNS_advantag'], 1, 1, 1.0, '1', 493], [['VBP', 'NNS', 'NNS_advantag', 'NNS'], 1, 1, 1.0, '1', 494], [['VBP', 'NNS', 'NNS_advantag', 'NNS', 'IN'], 1, 1, 1.0, '1', 495], [['VBP', 'NNS', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 496], [['VBP', 'NNS', 'NNS_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 497], [['VBP', 'NNS', 'NNS_advantag', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 498], [['VBP', 'NNS', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 499], [['VBP', 'NNS', 'MD'], 1, 1, 1.0, '1', 500], [['VBP', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 501], [['VBP', 'NNS', 'VB'], 1, 1, 1.0, '1', 502], [['VBP', 'NNS', 'NNS'], 1, 1, 1.0, '1', 503], [['VBP', 'NNS', 'NNS', 'IN'], 1, 1, 1.0, '1', 504], [['VBP', 'NNS', 'IN'], 1, 1, 1.0, '1', 505], [['VBP', 'NNS', 'IN', 'NNS'], 1, 1, 1.0, '1', 506], [['VBP', 'NNS', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 507], [['VBP', 'NNS', 'IN', 'IN'], 1, 1, 1.0, '1', 508], [['WDT'], 1, 1, 1.0, '1', 509], [['WDT', 'NNS_advantag'], 1, 1, 1.0, '1', 510], [['WDT', 'NNS_advantag', 'NNS'], 1, 1, 1.0, '1', 511], [['WDT', 'NNS_advantag', 'NNS', 'IN'], 1, 1, 1.0, '1', 512], [['WDT', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 513], [['WDT', 'NNS_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 514], [['WDT', 'NNS_advantag', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 515], [['WDT', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 516], [['WDT', 'VBP'], 1, 1, 1.0, '1', 517], [['WDT', 'VBP', 'NNS_advantag'], 1, 1, 1.0, '1', 518], [['WDT', 'VBP', 'NNS_advantag', 'NNS'], 1, 1, 1.0, '1', 519], [['WDT', 'VBP', 'NNS_advantag', 'NNS', 'IN'], 1, 1, 1.0, '1', 520], [['WDT', 'VBP', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 521], [['WDT', 'VBP', 'NNS_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 522], [['WDT', 'VBP', 'NNS_advantag', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 523], [['WDT', 'VBP', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 524], [['WDT', 'VBP', 'NNS'], 1, 1, 1.0, '1', 525], [['WDT', 'VBP', 'NNS', 'NNS_advantag'], 1, 1, 1.0, '1', 526], [['WDT', 'VBP', 'NNS', 'NNS_advantag', 'NNS'], 1, 1, 1.0, '1', 527], [['WDT', 'VBP', 'NNS', 'NNS_advantag', 'NNS', 'IN'], 1, 1, 1.0, '1', 528], [['WDT', 'VBP', 'NNS', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 529], [['WDT', 'VBP', 'NNS', 'NNS_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 530], [['WDT', 'VBP', 'NNS', 'NNS_advantag', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 531], [['WDT', 'VBP', 'NNS', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 532], [['WDT', 'VBP', 'NNS', 'NNS'], 1, 1, 1.0, '1', 533], [['WDT', 'VBP', 'NNS', 'NNS', 'IN'], 1, 1, 1.0, '1', 534], [['WDT', 'VBP', 'NNS', 'IN'], 1, 1, 1.0, '1', 535], [['WDT', 'VBP', 'NNS', 'IN', 'NNS'], 1, 1, 1.0, '1', 536], [['WDT', 'VBP', 'NNS', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 537], [['WDT', 'VBP', 'NNS', 'IN', 'IN'], 1, 1, 1.0, '1', 538], [['WDT', 'VBP', 'IN'], 1, 1, 1.0, '1', 539], [['WDT', 'VBP', 'IN', 'NNS'], 1, 1, 1.0, '1', 540], [['WDT', 'VBP', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 541], [['WDT', 'VBP', 'IN', 'IN'], 1, 1, 1.0, '1', 542], [['WDT', 'NNS'], 1, 1, 1.0, '1', 543], [['WDT', 'NNS', 'NNS_advantag'], 1, 1, 1.0, '1', 544], [['WDT', 'NNS', 'NNS_advantag', 'NNS'], 1, 1, 1.0, '1', 545], [['WDT', 'NNS', 'NNS_advantag', 'NNS', 'IN'], 1, 1, 1.0, '1', 546], [['WDT', 'NNS', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 547], [['WDT', 'NNS', 'NNS_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 548], [['WDT', 'NNS', 'NNS_advantag', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 549], [['WDT', 'NNS', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 550], [['WDT', 'NNS', 'NNS'], 1, 1, 1.0, '1', 551], [['WDT', 'NNS', 'NNS', 'IN'], 1, 1, 1.0, '1', 552], [['WDT', 'NNS', 'IN'], 1, 1, 1.0, '1', 553], [['WDT', 'NNS', 'IN', 'NNS'], 1, 1, 1.0, '1', 554], [['WDT', 'NNS', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 555], [['WDT', 'NNS', 'IN', 'IN'], 1, 1, 1.0, '1', 556], [['WDT', 'IN'], 1, 1, 1.0, '1', 557], [['WDT', 'IN', 'NNS'], 1, 1, 1.0, '1', 558], [['WDT', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 559], [['WDT', 'IN', 'IN'], 1, 1, 1.0, '1', 560], [['JJ'], 13, 10, 0.7692307692307693, '1', 561], [['JJ', 'VBG'], 1, 1, 1.0, '1', 562], [['JJ', 'RB'], 3, 2, 0.6666666666666666, '0', 563], [['JJ', 'RB', 'JJ'], 1, 1, 1.0, '0', 564], [['JJ', 'RB', 'JJ', 'NNS'], 1, 1, 1.0, '0', 565], [['JJ', 'RB', 'JJR_smaller'], 1, 1, 1.0, '0', 566], [['JJ', 'RB', 'JJR_smaller', 'VBP'], 1, 1, 1.0, '0', 567], [['JJ', 'RB', 'JJR_smaller', 'VBP', 'VBN'], 1, 1, 1.0, '0', 568], [['JJ', 'RB', 'JJR_smaller', 'NNS'], 1, 1, 1.0, '0', 569], [['JJ', 'RB', 'JJR_smaller', 'NNS', 'VBP'], 1, 1, 1.0, '0', 570], [['JJ', 'RB', 'JJR_smaller', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 571], [['JJ', 'RB', 'JJR_smaller', 'NNS', 'VBN'], 1, 1, 1.0, '0', 572], [['JJ', 'RB', 'JJR_smaller', 'VBN'], 1, 1, 1.0, '0', 573], [['JJ', 'RB', 'VBN'], 1, 1, 1.0, '0', 574], [['JJ', 'RB', 'VBP'], 1, 1, 1.0, '0', 575], [['JJ', 'RB', 'VBP', 'VBN'], 1, 1, 1.0, '0', 576], [['JJ', 'RB', 'RB'], 1, 1, 1.0, '1', 577], [['JJ', 'RB', 'IN'], 1, 1, 1.0, '0', 578], [['JJ', 'RB', 'IN', 'NNS'], 1, 1, 1.0, '0', 579], [['JJ', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '0', 580], [['JJ', 'RB', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 581], [['JJ', 'RB', 'IN', 'IN'], 1, 1, 1.0, '0', 582], [['JJ', 'RB', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 583], [['JJ', 'RB', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 584], [['JJ', 'RB', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 585], [['JJ', 'RB', 'RB_well'], 1, 1, 1.0, '0', 586], [['JJ', 'RB', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 587], [['JJ', 'RB', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 588], [['JJ', 'RB', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 589], [['JJ', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '0', 590], [['JJ', 'RB', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 591], [['JJ', 'RB', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 592], [['JJ', 'RB', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 593], [['JJ', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '0', 594], [['JJ', 'RB', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 595], [['JJ', 'RB', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 596], [['JJ', 'RB', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 597], [['JJ', 'RB', 'NNS'], 2, 2, 1.0, '0', 598], [['JJ', 'RB', 'NNS', 'VBP'], 1, 1, 1.0, '0', 599], [['JJ', 'RB', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 600], [['JJ', 'RB', 'NNS', 'VBN'], 1, 1, 1.0, '0', 601], [['JJ', 'NN'], 10, 8, 0.8, '1', 602], [['JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 603], [['JJ', 'NN', 'RB', 'RB_well'], 1, 1, 1.0, '0', 604], [['JJ', 'NN', 'RB', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 605], [['JJ', 'NN', 'RB', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 606], [['JJ', 'NN', 'RB', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 607], [['JJ', 'NN', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '0', 608], [['JJ', 'NN', 'RB', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 609], [['JJ', 'NN', 'RB', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 610], [['JJ', 'NN', 'RB', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 611], [['JJ', 'NN', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '0', 612], [['JJ', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 613], [['JJ', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 614], [['JJ', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 615], [['JJ', 'NN', 'RB', 'NNS'], 1, 1, 1.0, '0', 616], [['JJ', 'NN', 'RB', 'RB'], 1, 1, 1.0, '1', 617], [['JJ', 'NN', 'RB', 'JJ'], 1, 1, 1.0, '0', 618], [['JJ', 'NN', 'RB', 'JJ', 'NNS'], 1, 1, 1.0, '0', 619], [['JJ', 'NN', 'RB', 'IN'], 1, 1, 1.0, '0', 620], [['JJ', 'NN', 'RB', 'IN', 'NNS'], 1, 1, 1.0, '0', 621], [['JJ', 'NN', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '0', 622], [['JJ', 'NN', 'RB', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 623], [['JJ', 'NN', 'RB', 'IN', 'IN'], 1, 1, 1.0, '0', 624], [['JJ', 'NN', 'RB', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 625], [['JJ', 'NN', 'RB', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 626], [['JJ', 'NN', 'RB', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 627], [['JJ', 'NN', 'NN'], 3, 2, 0.6666666666666666, '1', 628], [['JJ', 'NN', 'NN', 'VBG'], 1, 1, 1.0, '1', 629], [['JJ', 'NN', 'IN_over', 'VBG'], 1, 1, 1.0, '1', 630], [['JJ', 'NN', 'IN_over', 'NN', 'VBG'], 1, 1, 1.0, '1', 631], [['JJ', 'NN', 'IN_over', 'JJ', 'VBG'], 1, 1, 1.0, '1', 632], [['JJ', 'NN', 'IN_over', 'JJ', 'VBN'], 1, 1, 1.0, '0', 633], [['JJ', 'NN', 'IN_over', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 634], [['JJ', 'NN', 'IN_over', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 635], [['JJ', 'NN', 'IN_over', 'VBN'], 1, 1, 1.0, '0', 636], [['JJ', 'NN', 'IN_over', 'VBN', 'NN'], 1, 1, 1.0, '0', 637], [['JJ', 'NN', 'NNS_gain'], 2, 2, 1.0, '1', 638], [['JJ', 'NN', 'NNS_gain', 'VBP'], 1, 1, 1.0, '1', 639], [['JJ', 'NN', 'NNS_gain', 'VBP', 'VBN'], 1, 1, 1.0, '1', 640], [['JJ', 'NN', 'NNS_gain', 'VBP', 'VBN', 'VBN'], 1, 1, 1.0, '1', 641], [['JJ', 'NN', 'NNS_gain', 'VBN'], 1, 1, 1.0, '1', 642], [['JJ', 'NN', 'NNS_gain', 'VBN', 'VBN'], 1, 1, 1.0, '1', 643], [['JJ', 'NN', 'NNS_gain', 'NN'], 1, 1, 1.0, '1', 644], [['JJ', 'NN', 'NNS_gain', 'JJ'], 1, 1, 1.0, '1', 645], [['JJ', 'NN', 'NNS_gain', 'JJ', 'NN'], 1, 1, 1.0, '1', 646], [['JJ', 'NN', 'NNS_gain', 'IN'], 1, 1, 1.0, '1', 647], [['JJ', 'NN', 'NNS_gain', 'IN', 'NN'], 1, 1, 1.0, '1', 648], [['JJ', 'NN', 'NNS_gain', 'IN', 'JJ'], 1, 1, 1.0, '1', 649], [['JJ', 'NN', 'NNS_gain', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 650], [['JJ', 'NN', 'VBN'], 3, 2, 0.6666666666666666, '1', 651], [['JJ', 'NN', 'VBN', 'VBN'], 1, 1, 1.0, '1', 652], [['JJ', 'NN', 'VBN', 'NN'], 1, 1, 1.0, '0', 653], [['JJ', 'NN', 'VBN', 'IN'], 1, 1, 1.0, '1', 654], [['JJ', 'NN', 'VBP'], 1, 1, 1.0, '1', 655], [['JJ', 'NN', 'VBP', 'VBN'], 1, 1, 1.0, '1', 656], [['JJ', 'NN', 'VBP', 'VBN', 'VBN'], 1, 1, 1.0, '1', 657], [['JJ', 'NN', 'JJ', 'VBG'], 1, 1, 1.0, '1', 658], [['JJ', 'NN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 659], [['JJ', 'NN', 'JJ', 'VBN'], 1, 1, 1.0, '0', 660], [['JJ', 'NN', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 661], [['JJ', 'NN', 'JJ', 'NN'], 3, 2, 0.6666666666666666, '1', 662], [['JJ', 'NN', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 663], [['JJ', 'NN', 'IN'], 3, 2, 0.6666666666666666, '1', 664], [['JJ', 'NN', 'IN', 'NNS'], 1, 1, 1.0, '0', 665], [['JJ', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 666], [['JJ', 'NN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 667], [['JJ', 'NN', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 668], [['JJ', 'NN', 'IN', 'IN'], 1, 1, 1.0, '0', 669], [['JJ', 'NN', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 670], [['JJ', 'NN', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 671], [['JJ', 'NN', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 672], [['JJ', 'NN', 'RB_well'], 1, 1, 1.0, '0', 673], [['JJ', 'NN', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 674], [['JJ', 'NN', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 675], [['JJ', 'NN', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 676], [['JJ', 'NN', 'RB_well', 'IN'], 1, 1, 1.0, '0', 677], [['JJ', 'NN', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 678], [['JJ', 'NN', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 679], [['JJ', 'NN', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 680], [['JJ', 'NN', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '0', 681], [['JJ', 'NN', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 682], [['JJ', 'NN', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 683], [['JJ', 'NN', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 684], [['JJ', 'NN', 'VBG_match'], 2, 2, 1.0, '1', 685], [['JJ', 'NN', 'VBG_match', 'NNS'], 2, 2, 1.0, '1', 686], [['JJ', 'NN', 'VBG_match', 'NNS', 'VBN'], 1, 1, 1.0, '1', 687], [['JJ', 'NN', 'VBG_match', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 688], [['JJ', 'NN', 'VBG_match', 'NNS', 'RB'], 1, 1, 1.0, '1', 689], [['JJ', 'NN', 'VBG_match', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 690], [['JJ', 'NN', 'VBG_match', 'NNS', 'IN'], 1, 1, 1.0, '1', 691], [['JJ', 'NN', 'VBG_match', 'VBN'], 1, 1, 1.0, '1', 692], [['JJ', 'NN', 'VBG_match', 'VBN', 'IN'], 1, 1, 1.0, '1', 693], [['JJ', 'NN', 'VBG_match', 'RB'], 1, 1, 1.0, '1', 694], [['JJ', 'NN', 'VBG_match', 'RB', 'RB'], 1, 1, 1.0, '1', 695], [['JJ', 'NN', 'VBG_match', 'IN'], 1, 1, 1.0, '1', 696], [['JJ', 'NN', 'NNS'], 4, 3, 0.75, '1', 697], [['JJ', 'NN', 'NNS', 'VBG'], 1, 1, 1.0, '1', 698], [['JJ', 'NN', 'NNS', 'JJ'], 1, 1, 1.0, '1', 699], [['JJ', 'NN', 'NNS', 'JJ', 'VBG'], 1, 1, 1.0, '1', 700], [['JJ', 'NN', 'NNS', 'JJ', 'NN'], 1, 1, 1.0, '1', 701], [['JJ', 'NN', 'NNS', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 702], [['JJ', 'NN', 'NNS', 'NN'], 1, 1, 1.0, '1', 703], [['JJ', 'NN', 'NNS', 'NN', 'VBG'], 1, 1, 1.0, '1', 704], [['JJ', 'NN', 'NNS', 'IN_over'], 1, 1, 1.0, '1', 705], [['JJ', 'NN', 'NNS', 'IN_over', 'VBG'], 1, 1, 1.0, '1', 706], [['JJ', 'NN', 'NNS', 'IN_over', 'NN'], 1, 1, 1.0, '1', 707], [['JJ', 'NN', 'NNS', 'IN_over', 'NN', 'VBG'], 1, 1, 1.0, '1', 708], [['JJ', 'NN', 'NNS', 'IN_over', 'JJ'], 1, 1, 1.0, '1', 709], [['JJ', 'NN', 'NNS', 'IN_over', 'JJ', 'VBG'], 1, 1, 1.0, '1', 710], [['JJ', 'NN', 'NNS', 'IN_over', 'JJ', 'NN'], 1, 1, 1.0, '1', 711], [['JJ', 'NN', 'NNS', 'IN_over', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 712], [['JJ', 'NN', 'NNS', 'VBN'], 1, 1, 1.0, '1', 713], [['JJ', 'NN', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 714], [['JJ', 'NN', 'NNS', 'RB'], 1, 1, 1.0, '1', 715], [['JJ', 'NN', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 716], [['JJ', 'NN', 'NNS', 'IN'], 1, 1, 1.0, '1', 717], [['JJ', 'NN_advantag'], 1, 1, 1.0, '1', 718], [['JJ', 'NN_advantag', 'DT'], 1, 1, 1.0, '1', 719], [['JJ', 'NN_advantag', 'DT', 'NN'], 1, 1, 1.0, '1', 720], [['JJ', 'NN_advantag', 'NN'], 1, 1, 1.0, '1', 721], [['JJ', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 722], [['JJ', 'NN_advantag', 'IN', 'DT'], 1, 1, 1.0, '1', 723], [['JJ', 'NN_advantag', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 724], [['JJ', 'NN_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 725], [['JJ', 'JJR_smaller'], 1, 1, 1.0, '0', 726], [['JJ', 'JJR_smaller', 'VBP'], 1, 1, 1.0, '0', 727], [['JJ', 'JJR_smaller', 'VBP', 'VBN'], 1, 1, 1.0, '0', 728], [['JJ', 'JJR_smaller', 'NNS'], 1, 1, 1.0, '0', 729], [['JJ', 'JJR_smaller', 'NNS', 'VBP'], 1, 1, 1.0, '0', 730], [['JJ', 'JJR_smaller', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 731], [['JJ', 'JJR_smaller', 'NNS', 'VBN'], 1, 1, 1.0, '0', 732], [['JJ', 'JJR_smaller', 'VBN'], 1, 1, 1.0, '0', 733], [['JJ', 'IN_over', 'VBG'], 1, 1, 1.0, '1', 734], [['JJ', 'IN_over', 'NN', 'VBG'], 1, 1, 1.0, '1', 735], [['JJ', 'IN_over', 'JJ', 'VBG'], 1, 1, 1.0, '1', 736], [['JJ', 'IN_over', 'JJ', 'VBN'], 1, 1, 1.0, '0', 737], [['JJ', 'IN_over', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 738], [['JJ', 'IN_over', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 739], [['JJ', 'IN_over', 'VBN'], 1, 1, 1.0, '0', 740], [['JJ', 'IN_over', 'VBN', 'NN'], 1, 1, 1.0, '0', 741], [['JJ', 'NNS_gain'], 2, 2, 1.0, '1', 742], [['JJ', 'NNS_gain', 'VBP'], 1, 1, 1.0, '1', 743], [['JJ', 'NNS_gain', 'VBP', 'VBN'], 1, 1, 1.0, '1', 744], [['JJ', 'NNS_gain', 'VBP', 'VBN', 'VBN'], 1, 1, 1.0, '1', 745], [['JJ', 'NNS_gain', 'VBN'], 1, 1, 1.0, '1', 746], [['JJ', 'NNS_gain', 'VBN', 'VBN'], 1, 1, 1.0, '1', 747], [['JJ', 'NNS_gain', 'NN'], 1, 1, 1.0, '1', 748], [['JJ', 'NNS_gain', 'JJ'], 1, 1, 1.0, '1', 749], [['JJ', 'NNS_gain', 'JJ', 'NN'], 1, 1, 1.0, '1', 750], [['JJ', 'NNS_gain', 'IN'], 1, 1, 1.0, '1', 751], [['JJ', 'NNS_gain', 'IN', 'NN'], 1, 1, 1.0, '1', 752], [['JJ', 'NNS_gain', 'IN', 'JJ'], 1, 1, 1.0, '1', 753], [['JJ', 'NNS_gain', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 754], [['JJ', 'VBN', 'VBN'], 1, 1, 1.0, '1', 755], [['JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 756], [['JJ', 'VBN', 'IN'], 1, 1, 1.0, '1', 757], [['JJ', 'VBP', 'VBN', 'VBN'], 1, 1, 1.0, '1', 758], [['JJ', 'JJ'], 5, 3, 0.6, '1', 759], [['JJ', 'JJ', 'VBG'], 1, 1, 1.0, '1', 760], [['JJ', 'JJ', 'NNS'], 1, 1, 1.0, '0', 761], [['JJ', 'JJ', 'VBN'], 1, 1, 1.0, '0', 762], [['JJ', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 763], [['JJ', 'JJ', 'NN'], 4, 3, 0.75, '1', 764], [['JJ', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 765], [['JJ', 'IN'], 4, 3, 0.75, '1', 766], [['JJ', 'IN', 'DT'], 1, 1, 1.0, '1', 767], [['JJ', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 768], [['JJ', 'IN', 'NNS'], 1, 1, 1.0, '0', 769], [['JJ', 'IN', 'NN'], 2, 2, 1.0, '1', 770], [['JJ', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 771], [['JJ', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 772], [['JJ', 'IN', 'IN'], 1, 1, 1.0, '0', 773], [['JJ', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 774], [['JJ', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 775], [['JJ', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 776], [['JJ', 'RB_well'], 1, 1, 1.0, '0', 777], [['JJ', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 778], [['JJ', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 779], [['JJ', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 780], [['JJ', 'RB_well', 'IN'], 1, 1, 1.0, '0', 781], [['JJ', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 782], [['JJ', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 783], [['JJ', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 784], [['JJ', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '0', 785], [['JJ', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 786], [['JJ', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 787], [['JJ', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 788], [['JJ', 'VBG_match'], 2, 2, 1.0, '1', 789], [['JJ', 'VBG_match', 'NNS'], 2, 2, 1.0, '1', 790], [['JJ', 'VBG_match', 'NNS', 'VBN'], 1, 1, 1.0, '1', 791], [['JJ', 'VBG_match', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 792], [['JJ', 'VBG_match', 'NNS', 'RB'], 1, 1, 1.0, '1', 793], [['JJ', 'VBG_match', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 794], [['JJ', 'VBG_match', 'NNS', 'IN'], 1, 1, 1.0, '1', 795], [['JJ', 'VBG_match', 'VBN'], 1, 1, 1.0, '1', 796], [['JJ', 'VBG_match', 'VBN', 'IN'], 1, 1, 1.0, '1', 797], [['JJ', 'VBG_match', 'RB'], 1, 1, 1.0, '1', 798], [['JJ', 'VBG_match', 'RB', 'RB'], 1, 1, 1.0, '1', 799], [['JJ', 'VBG_match', 'IN'], 1, 1, 1.0, '1', 800], [['JJ', 'DT'], 2, 2, 1.0, '1', 801], [['JJ', 'DT', 'NN'], 2, 2, 1.0, '1', 802], [['JJ', 'DT', 'JJ'], 1, 1, 1.0, '1', 803], [['JJ', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 804], [['JJ', 'VBP_domin'], 1, 1, 1.0, '1', 805], [['JJ', 'VBP_domin', 'DT'], 1, 1, 1.0, '1', 806], [['JJ', 'VBP_domin', 'DT', 'NN'], 1, 1, 1.0, '1', 807], [['JJ', 'VBP_domin', 'DT', 'JJ'], 1, 1, 1.0, '1', 808], [['JJ', 'VBP_domin', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 809], [['JJ', 'VBP_domin', 'NN'], 1, 1, 1.0, '1', 810], [['JJ', 'VBP_domin', 'JJ'], 1, 1, 1.0, '1', 811], [['JJ', 'VBP_domin', 'JJ', 'NN'], 1, 1, 1.0, '1', 812], [['JJ', 'NNS'], 6, 4, 0.6666666666666666, '1', 813], [['JJ', 'NNS', 'VBG'], 1, 1, 1.0, '1', 814], [['JJ', 'NNS', 'RB', 'RB_well'], 1, 1, 1.0, '0', 815], [['JJ', 'NNS', 'RB', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 816], [['JJ', 'NNS', 'RB', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 817], [['JJ', 'NNS', 'RB', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 818], [['JJ', 'NNS', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '0', 819], [['JJ', 'NNS', 'RB', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 820], [['JJ', 'NNS', 'RB', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 821], [['JJ', 'NNS', 'RB', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 822], [['JJ', 'NNS', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '0', 823], [['JJ', 'NNS', 'RB', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 824], [['JJ', 'NNS', 'RB', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 825], [['JJ', 'NNS', 'RB', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 826], [['JJ', 'NNS', 'RB', 'NNS'], 1, 1, 1.0, '0', 827], [['JJ', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 828], [['JJ', 'NNS', 'RB', 'JJ'], 1, 1, 1.0, '0', 829], [['JJ', 'NNS', 'RB', 'JJ', 'NNS'], 1, 1, 1.0, '0', 830], [['JJ', 'NNS', 'RB', 'IN'], 1, 1, 1.0, '0', 831], [['JJ', 'NNS', 'RB', 'IN', 'NNS'], 1, 1, 1.0, '0', 832], [['JJ', 'NNS', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '0', 833], [['JJ', 'NNS', 'RB', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 834], [['JJ', 'NNS', 'RB', 'IN', 'IN'], 1, 1, 1.0, '0', 835], [['JJ', 'NNS', 'RB', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 836], [['JJ', 'NNS', 'RB', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 837], [['JJ', 'NNS', 'RB', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 838], [['JJ', 'NNS', 'NN'], 3, 2, 0.6666666666666666, '1', 839], [['JJ', 'NNS', 'NN', 'VBG'], 1, 1, 1.0, '1', 840], [['JJ', 'NNS', 'NN', 'RB'], 1, 1, 1.0, '0', 841], [['JJ', 'NNS', 'NN', 'RB', 'RB_well'], 1, 1, 1.0, '0', 842], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 843], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 844], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 845], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '0', 846], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 847], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 848], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 849], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '0', 850], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 851], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 852], [['JJ', 'NNS', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 853], [['JJ', 'NNS', 'NN', 'RB', 'NNS'], 1, 1, 1.0, '0', 854], [['JJ', 'NNS', 'NN', 'RB', 'JJ'], 1, 1, 1.0, '0', 855], [['JJ', 'NNS', 'NN', 'RB', 'JJ', 'NNS'], 1, 1, 1.0, '0', 856], [['JJ', 'NNS', 'NN', 'RB', 'IN'], 1, 1, 1.0, '0', 857], [['JJ', 'NNS', 'NN', 'RB', 'IN', 'NNS'], 1, 1, 1.0, '0', 858], [['JJ', 'NNS', 'NN', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '0', 859], [['JJ', 'NNS', 'NN', 'RB', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 860], [['JJ', 'NNS', 'NN', 'RB', 'IN', 'IN'], 1, 1, 1.0, '0', 861], [['JJ', 'NNS', 'NN', 'RB', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 862], [['JJ', 'NNS', 'NN', 'RB', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 863], [['JJ', 'NNS', 'NN', 'RB', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 864], [['JJ', 'NNS', 'NN', 'JJ'], 1, 1, 1.0, '0', 865], [['JJ', 'NNS', 'NN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 866], [['JJ', 'NNS', 'NN', 'IN'], 1, 1, 1.0, '0', 867], [['JJ', 'NNS', 'NN', 'IN', 'NNS'], 1, 1, 1.0, '0', 868], [['JJ', 'NNS', 'NN', 'IN', 'JJ'], 1, 1, 1.0, '0', 869], [['JJ', 'NNS', 'NN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 870], [['JJ', 'NNS', 'NN', 'IN', 'IN'], 1, 1, 1.0, '0', 871], [['JJ', 'NNS', 'NN', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 872], [['JJ', 'NNS', 'NN', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 873], [['JJ', 'NNS', 'NN', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 874], [['JJ', 'NNS', 'NN', 'RB_well'], 1, 1, 1.0, '0', 875], [['JJ', 'NNS', 'NN', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 876], [['JJ', 'NNS', 'NN', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 877], [['JJ', 'NNS', 'NN', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 878], [['JJ', 'NNS', 'NN', 'RB_well', 'IN'], 1, 1, 1.0, '0', 879], [['JJ', 'NNS', 'NN', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 880], [['JJ', 'NNS', 'NN', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 881], [['JJ', 'NNS', 'NN', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 882], [['JJ', 'NNS', 'NN', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '0', 883], [['JJ', 'NNS', 'NN', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 884], [['JJ', 'NNS', 'NN', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 885], [['JJ', 'NNS', 'NN', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 886], [['JJ', 'NNS', 'NN', 'NNS'], 1, 1, 1.0, '0', 887], [['JJ', 'NNS', 'IN_over'], 1, 1, 1.0, '1', 888], [['JJ', 'NNS', 'IN_over', 'VBG'], 1, 1, 1.0, '1', 889], [['JJ', 'NNS', 'IN_over', 'NN'], 1, 1, 1.0, '1', 890], [['JJ', 'NNS', 'IN_over', 'NN', 'VBG'], 1, 1, 1.0, '1', 891], [['JJ', 'NNS', 'IN_over', 'JJ'], 1, 1, 1.0, '1', 892], [['JJ', 'NNS', 'IN_over', 'JJ', 'VBG'], 1, 1, 1.0, '1', 893], [['JJ', 'NNS', 'IN_over', 'JJ', 'NN'], 1, 1, 1.0, '1', 894], [['JJ', 'NNS', 'IN_over', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 895], [['JJ', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 896], [['JJ', 'NNS', 'VBP'], 1, 1, 1.0, '0', 897], [['JJ', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 898], [['JJ', 'NNS', 'JJ'], 3, 2, 0.6666666666666666, '1', 899], [['JJ', 'NNS', 'JJ', 'VBG'], 1, 1, 1.0, '1', 900], [['JJ', 'NNS', 'JJ', 'NNS'], 1, 1, 1.0, '0', 901], [['JJ', 'NNS', 'JJ', 'NN'], 2, 2, 1.0, '1', 902], [['JJ', 'NNS', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 903], [['JJ', 'NNS', 'IN', 'NNS'], 1, 1, 1.0, '0', 904], [['JJ', 'NNS', 'IN', 'JJ'], 1, 1, 1.0, '0', 905], [['JJ', 'NNS', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 906], [['JJ', 'NNS', 'IN', 'IN'], 1, 1, 1.0, '0', 907], [['JJ', 'NNS', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 908], [['JJ', 'NNS', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 909], [['JJ', 'NNS', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 910], [['JJ', 'NNS', 'RB_well'], 1, 1, 1.0, '0', 911], [['JJ', 'NNS', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 912], [['JJ', 'NNS', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 913], [['JJ', 'NNS', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 914], [['JJ', 'NNS', 'RB_well', 'IN'], 1, 1, 1.0, '0', 915], [['JJ', 'NNS', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 916], [['JJ', 'NNS', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 917], [['JJ', 'NNS', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 918], [['JJ', 'NNS', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '0', 919], [['JJ', 'NNS', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 920], [['JJ', 'NNS', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 921], [['JJ', 'NNS', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 922], [['JJ', 'NNS', 'DT'], 1, 1, 1.0, '1', 923], [['JJ', 'NNS', 'DT', 'NN'], 1, 1, 1.0, '1', 924], [['JJ', 'NNS', 'DT', 'JJ'], 1, 1, 1.0, '1', 925], [['JJ', 'NNS', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 926], [['JJ', 'NNS', 'VBP_domin'], 1, 1, 1.0, '1', 927], [['JJ', 'NNS', 'VBP_domin', 'DT'], 1, 1, 1.0, '1', 928], [['JJ', 'NNS', 'VBP_domin', 'DT', 'NN'], 1, 1, 1.0, '1', 929], [['JJ', 'NNS', 'VBP_domin', 'DT', 'JJ'], 1, 1, 1.0, '1', 930], [['JJ', 'NNS', 'VBP_domin', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 931], [['JJ', 'NNS', 'VBP_domin', 'NN'], 1, 1, 1.0, '1', 932], [['JJ', 'NNS', 'VBP_domin', 'JJ'], 1, 1, 1.0, '1', 933], [['JJ', 'NNS', 'VBP_domin', 'JJ', 'NN'], 1, 1, 1.0, '1', 934], [['JJ', 'NNS', 'NNS'], 1, 1, 1.0, '0', 935], [['VBZ'], 2, 2, 1.0, '1', 936], [['VBZ', 'MD'], 1, 1, 1.0, '1', 937], [['VBZ', 'RB'], 1, 1, 1.0, '1', 938], [['VBZ', 'RB', 'DT'], 1, 1, 1.0, '1', 939], [['VBZ', 'RB', 'DT', 'JJ'], 1, 1, 1.0, '1', 940], [['VBZ', 'RB', 'IN'], 1, 1, 1.0, '1', 941], [['VBZ', 'RB', 'IN', 'DT'], 1, 1, 1.0, '1', 942], [['VBZ', 'RB', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 943], [['VBZ', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '1', 944], [['VBZ', 'RB', 'JJ'], 1, 1, 1.0, '1', 945], [['VBZ', 'RB', 'VBN_compar'], 1, 1, 1.0, '1', 946], [['VBZ', 'RB', 'VBN_compar', 'DT'], 1, 1, 1.0, '1', 947], [['VBZ', 'RB', 'VBN_compar', 'DT', 'JJ'], 1, 1, 1.0, '1', 948], [['VBZ', 'RB', 'VBN_compar', 'JJ'], 1, 1, 1.0, '1', 949], [['VBZ', 'RB', 'VBN_compar', 'IN'], 1, 1, 1.0, '1', 950], [['VBZ', 'RB', 'VBN_compar', 'IN', 'DT'], 1, 1, 1.0, '1', 951], [['VBZ', 'RB', 'VBN_compar', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 952], [['VBZ', 'RB', 'VBN_compar', 'IN', 'JJ'], 1, 1, 1.0, '1', 953], [['VBZ', 'NN_advantag'], 1, 1, 1.0, '1', 954], [['VBZ', 'NN_advantag', 'MD'], 1, 1, 1.0, '1', 955], [['VBZ', 'NN_advantag', 'NNS'], 1, 1, 1.0, '1', 956], [['VBZ', 'NN_advantag', 'NNS', 'MD'], 1, 1, 1.0, '1', 957], [['VBZ', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 958], [['VBZ', 'NN_advantag', 'IN', 'MD'], 1, 1, 1.0, '1', 959], [['VBZ', 'NN_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 960], [['VBZ', 'NN_advantag', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 961], [['VBZ', 'VBN'], 1, 1, 1.0, '1', 962], [['VBZ', 'VBN', 'DT'], 1, 1, 1.0, '1', 963], [['VBZ', 'VBN', 'DT', 'JJ'], 1, 1, 1.0, '1', 964], [['VBZ', 'VBN', 'IN'], 1, 1, 1.0, '1', 965], [['VBZ', 'VBN', 'IN', 'DT'], 1, 1, 1.0, '1', 966], [['VBZ', 'VBN', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 967], [['VBZ', 'VBN', 'IN', 'JJ'], 1, 1, 1.0, '1', 968], [['VBZ', 'VBN', 'JJ'], 1, 1, 1.0, '1', 969], [['VBZ', 'VBN', 'RB'], 1, 1, 1.0, '1', 970], [['VBZ', 'VBN', 'RB', 'DT'], 1, 1, 1.0, '1', 971], [['VBZ', 'VBN', 'RB', 'DT', 'JJ'], 1, 1, 1.0, '1', 972], [['VBZ', 'VBN', 'RB', 'IN'], 1, 1, 1.0, '1', 973], [['VBZ', 'VBN', 'RB', 'IN', 'DT'], 1, 1, 1.0, '1', 974], [['VBZ', 'VBN', 'RB', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 975], [['VBZ', 'VBN', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '1', 976], [['VBZ', 'VBN', 'RB', 'JJ'], 1, 1, 1.0, '1', 977], [['VBZ', 'VBN', 'RB', 'VBN_compar'], 1, 1, 1.0, '1', 978], [['VBZ', 'VBN', 'RB', 'VBN_compar', 'DT'], 1, 1, 1.0, '1', 979], [['VBZ', 'VBN', 'RB', 'VBN_compar', 'DT', 'JJ'], 1, 1, 1.0, '1', 980], [['VBZ', 'VBN', 'RB', 'VBN_compar', 'JJ'], 1, 1, 1.0, '1', 981], [['VBZ', 'VBN', 'RB', 'VBN_compar', 'IN'], 1, 1, 1.0, '1', 982], [['VBZ', 'VBN', 'RB', 'VBN_compar', 'IN', 'DT'], 1, 1, 1.0, '1', 983], [['VBZ', 'VBN', 'RB', 'VBN_compar', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 984], [['VBZ', 'VBN', 'RB', 'VBN_compar', 'IN', 'JJ'], 1, 1, 1.0, '1', 985], [['VBZ', 'VBN', 'VBN_compar'], 1, 1, 1.0, '1', 986], [['VBZ', 'VBN', 'VBN_compar', 'DT'], 1, 1, 1.0, '1', 987], [['VBZ', 'VBN', 'VBN_compar', 'DT', 'JJ'], 1, 1, 1.0, '1', 988], [['VBZ', 'VBN', 'VBN_compar', 'JJ'], 1, 1, 1.0, '1', 989], [['VBZ', 'VBN', 'VBN_compar', 'IN'], 1, 1, 1.0, '1', 990], [['VBZ', 'VBN', 'VBN_compar', 'IN', 'DT'], 1, 1, 1.0, '1', 991], [['VBZ', 'VBN', 'VBN_compar', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 992], [['VBZ', 'VBN', 'VBN_compar', 'IN', 'JJ'], 1, 1, 1.0, '1', 993], [['VBZ', 'JJ'], 1, 1, 1.0, '1', 994], [['VBZ', 'IN'], 2, 2, 1.0, '1', 995], [['VBZ', 'IN', 'MD'], 1, 1, 1.0, '1', 996], [['VBZ', 'IN', 'DT'], 1, 1, 1.0, '1', 997], [['VBZ', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 998], [['VBZ', 'IN', 'NNS'], 1, 1, 1.0, '1', 999], [['VBZ', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1000], [['VBZ', 'IN', 'JJ'], 1, 1, 1.0, '1', 1001], [['VBZ', 'DT'], 2, 2, 1.0, '1', 1002], [['VBZ', 'DT', 'MD'], 1, 1, 1.0, '1', 1003], [['VBZ', 'DT', 'NNS'], 1, 1, 1.0, '1', 1004], [['VBZ', 'DT', 'NNS', 'MD'], 1, 1, 1.0, '1', 1005], [['VBZ', 'DT', 'NN_advantag'], 1, 1, 1.0, '1', 1006], [['VBZ', 'DT', 'NN_advantag', 'MD'], 1, 1, 1.0, '1', 1007], [['VBZ', 'DT', 'NN_advantag', 'NNS'], 1, 1, 1.0, '1', 1008], [['VBZ', 'DT', 'NN_advantag', 'NNS', 'MD'], 1, 1, 1.0, '1', 1009], [['VBZ', 'DT', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1010], [['VBZ', 'DT', 'NN_advantag', 'IN', 'MD'], 1, 1, 1.0, '1', 1011], [['VBZ', 'DT', 'NN_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 1012], [['VBZ', 'DT', 'NN_advantag', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1013], [['VBZ', 'DT', 'JJ'], 1, 1, 1.0, '1', 1014], [['VBZ', 'DT', 'IN'], 1, 1, 1.0, '1', 1015], [['VBZ', 'DT', 'IN', 'MD'], 1, 1, 1.0, '1', 1016], [['VBZ', 'DT', 'IN', 'NNS'], 1, 1, 1.0, '1', 1017], [['VBZ', 'DT', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1018], [['VBZ', 'NNS'], 1, 1, 1.0, '1', 1019], [['VBZ', 'NNS', 'MD'], 1, 1, 1.0, '1', 1020], [['VBZ', 'VBN_compar'], 1, 1, 1.0, '1', 1021], [['VBZ', 'VBN_compar', 'DT'], 1, 1, 1.0, '1', 1022], [['VBZ', 'VBN_compar', 'DT', 'JJ'], 1, 1, 1.0, '1', 1023], [['VBZ', 'VBN_compar', 'JJ'], 1, 1, 1.0, '1', 1024], [['VBZ', 'VBN_compar', 'IN'], 1, 1, 1.0, '1', 1025], [['VBZ', 'VBN_compar', 'IN', 'DT'], 1, 1, 1.0, '1', 1026], [['VBZ', 'VBN_compar', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 1027], [['VBZ', 'VBN_compar', 'IN', 'JJ'], 1, 1, 1.0, '1', 1028], [['JJ_compar'], 1, 1, 1.0, '1', 1029], [['JJ_compar', 'TO'], 1, 1, 1.0, '1', 1030], [['JJ_compar', 'TO', 'VB'], 1, 1, 1.0, '1', 1031], [['JJ_compar', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 1032], [['JJ_compar', 'TO', 'IN'], 1, 1, 1.0, '1', 1033], [['JJ_compar', 'VB'], 1, 1, 1.0, '1', 1034], [['JJ_compar', 'VB', 'IN'], 1, 1, 1.0, '1', 1035], [['JJ_compar', 'IN'], 1, 1, 1.0, '1', 1036], [['VBG_match'], 2, 2, 1.0, '1', 1037], [['VBG_match', 'NNS'], 2, 2, 1.0, '1', 1038], [['VBG_match', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1039], [['VBG_match', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1040], [['VBG_match', 'NNS', 'RB'], 1, 1, 1.0, '1', 1041], [['VBG_match', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 1042], [['VBG_match', 'NNS', 'IN'], 1, 1, 1.0, '1', 1043], [['VBG_match', 'VBN'], 1, 1, 1.0, '1', 1044], [['VBG_match', 'VBN', 'IN'], 1, 1, 1.0, '1', 1045], [['VBG_match', 'RB'], 1, 1, 1.0, '1', 1046], [['VBG_match', 'RB', 'RB'], 1, 1, 1.0, '1', 1047], [['VBG_match', 'IN'], 1, 1, 1.0, '1', 1048], [['DT'], 12, 10, 0.8333333333333334, '1', 1049], [['DT', 'JJ_improv'], 1, 1, 1.0, '1', 1050], [['DT', 'JJ_improv', 'NN'], 1, 1, 1.0, '1', 1051], [['DT', 'JJ_improv', 'NN', 'NN'], 1, 1, 1.0, '1', 1052], [['DT', 'JJ_improv', 'NN', 'IN'], 1, 1, 1.0, '1', 1053], [['DT', 'JJ_improv', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 1054], [['DT', 'JJ_improv', 'IN'], 1, 1, 1.0, '1', 1055], [['DT', 'JJ_improv', 'IN', 'NN'], 1, 1, 1.0, '1', 1056], [['DT', 'VBG_match'], 1, 1, 1.0, '1', 1057], [['DT', 'VBG_match', 'NNS'], 1, 1, 1.0, '1', 1058], [['DT', 'VBG_match', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1059], [['DT', 'VBG_match', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1060], [['DT', 'VBG_match', 'NNS', 'IN'], 1, 1, 1.0, '1', 1061], [['DT', 'VBG_match', 'VBN'], 1, 1, 1.0, '1', 1062], [['DT', 'VBG_match', 'VBN', 'IN'], 1, 1, 1.0, '1', 1063], [['DT', 'VBG_match', 'IN'], 1, 1, 1.0, '1', 1064], [['DT', 'RB'], 1, 1, 1.0, '1', 1065], [['DT', 'NN'], 8, 6, 0.75, '1', 1066], [['DT', 'NN', 'NNS'], 1, 1, 1.0, '1', 1067], [['DT', 'NN', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1068], [['DT', 'NN', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1069], [['DT', 'NN', 'NNS', 'IN'], 1, 1, 1.0, '1', 1070], [['DT', 'NN', 'VBG_match'], 1, 1, 1.0, '1', 1071], [['DT', 'NN', 'VBG_match', 'NNS'], 1, 1, 1.0, '1', 1072], [['DT', 'NN', 'VBG_match', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1073], [['DT', 'NN', 'VBG_match', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1074], [['DT', 'NN', 'VBG_match', 'NNS', 'IN'], 1, 1, 1.0, '1', 1075], [['DT', 'NN', 'VBG_match', 'VBN'], 1, 1, 1.0, '1', 1076], [['DT', 'NN', 'VBG_match', 'VBN', 'IN'], 1, 1, 1.0, '1', 1077], [['DT', 'NN', 'VBG_match', 'IN'], 1, 1, 1.0, '1', 1078], [['DT', 'NN', 'VBN'], 3, 2, 0.6666666666666666, '0', 1079], [['DT', 'NN', 'VBN', 'IN'], 3, 2, 0.6666666666666666, '0', 1080], [['DT', 'NN', 'NN'], 1, 1, 1.0, '1', 1081], [['DT', 'NN', 'IN'], 5, 3, 0.6, '1', 1082], [['DT', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 1083], [['DT', 'MD'], 1, 1, 1.0, '1', 1084], [['DT', 'NN_advantag'], 1, 1, 1.0, '1', 1085], [['DT', 'NN_advantag', 'MD'], 1, 1, 1.0, '1', 1086], [['DT', 'NN_advantag', 'NNS'], 1, 1, 1.0, '1', 1087], [['DT', 'NN_advantag', 'NNS', 'MD'], 1, 1, 1.0, '1', 1088], [['DT', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1089], [['DT', 'NN_advantag', 'IN', 'MD'], 1, 1, 1.0, '1', 1090], [['DT', 'NN_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 1091], [['DT', 'NN_advantag', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1092], [['DT', 'JJS'], 1, 1, 1.0, '1', 1093], [['DT', 'VBN'], 3, 2, 0.6666666666666666, '0', 1094], [['DT', 'VBN', 'IN'], 3, 2, 0.6666666666666666, '0', 1095], [['DT', 'NNS_advantag'], 1, 1, 1.0, '1', 1096], [['DT', 'NNS_advantag', 'NN'], 1, 1, 1.0, '1', 1097], [['DT', 'NNS_advantag', 'NN', 'IN'], 1, 1, 1.0, '1', 1098], [['DT', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 1099], [['DT', 'NNS_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1100], [['DT', 'NNS_advantag', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1101], [['DT', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 1102], [['DT', 'JJS_best'], 3, 2, 0.6666666666666666, '0', 1103], [['DT', 'JJS_best', 'JJ'], 1, 1, 1.0, '1', 1104], [['DT', 'JJS_best', 'JJ', 'NN'], 1, 1, 1.0, '1', 1105], [['DT', 'JJS_best', 'VBN'], 2, 2, 1.0, '0', 1106], [['DT', 'JJS_best', 'VBN', 'IN'], 2, 2, 1.0, '0', 1107], [['DT', 'JJS_best', 'NN'], 3, 2, 0.6666666666666666, '0', 1108], [['DT', 'JJS_best', 'NN', 'VBN'], 2, 2, 1.0, '0', 1109], [['DT', 'JJS_best', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 1110], [['DT', 'JJS_best', 'NN', 'IN'], 2, 2, 1.0, '0', 1111], [['DT', 'JJS_best', 'IN'], 2, 2, 1.0, '0', 1112], [['DT', 'JJ'], 4, 4, 1.0, '1', 1113], [['DT', 'JJ', 'NNS'], 1, 1, 1.0, '1', 1114], [['DT', 'JJ', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1115], [['DT', 'JJ', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1116], [['DT', 'JJ', 'NNS', 'IN'], 1, 1, 1.0, '1', 1117], [['DT', 'JJ', 'VBG_match'], 1, 1, 1.0, '1', 1118], [['DT', 'JJ', 'VBG_match', 'NNS'], 1, 1, 1.0, '1', 1119], [['DT', 'JJ', 'VBG_match', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1120], [['DT', 'JJ', 'VBG_match', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1121], [['DT', 'JJ', 'VBG_match', 'NNS', 'IN'], 1, 1, 1.0, '1', 1122], [['DT', 'JJ', 'VBG_match', 'VBN'], 1, 1, 1.0, '1', 1123], [['DT', 'JJ', 'VBG_match', 'VBN', 'IN'], 1, 1, 1.0, '1', 1124], [['DT', 'JJ', 'VBG_match', 'IN'], 1, 1, 1.0, '1', 1125], [['DT', 'JJ', 'VBN'], 1, 1, 1.0, '1', 1126], [['DT', 'JJ', 'VBN', 'IN'], 1, 1, 1.0, '1', 1127], [['DT', 'JJ', 'NN'], 3, 3, 1.0, '1', 1128], [['DT', 'JJ', 'NN', 'NNS'], 1, 1, 1.0, '1', 1129], [['DT', 'JJ', 'NN', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1130], [['DT', 'JJ', 'NN', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1131], [['DT', 'JJ', 'NN', 'NNS', 'IN'], 1, 1, 1.0, '1', 1132], [['DT', 'JJ', 'NN', 'VBG_match'], 1, 1, 1.0, '1', 1133], [['DT', 'JJ', 'NN', 'VBG_match', 'NNS'], 1, 1, 1.0, '1', 1134], [['DT', 'JJ', 'NN', 'VBG_match', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1135], [['DT', 'JJ', 'NN', 'VBG_match', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1136], [['DT', 'JJ', 'NN', 'VBG_match', 'NNS', 'IN'], 1, 1, 1.0, '1', 1137], [['DT', 'JJ', 'NN', 'VBG_match', 'VBN'], 1, 1, 1.0, '1', 1138], [['DT', 'JJ', 'NN', 'VBG_match', 'VBN', 'IN'], 1, 1, 1.0, '1', 1139], [['DT', 'JJ', 'NN', 'VBG_match', 'IN'], 1, 1, 1.0, '1', 1140], [['DT', 'JJ', 'NN', 'VBN'], 1, 1, 1.0, '1', 1141], [['DT', 'JJ', 'NN', 'VBN', 'IN'], 1, 1, 1.0, '1', 1142], [['DT', 'JJ', 'NN', 'IN'], 1, 1, 1.0, '1', 1143], [['DT', 'JJ', 'IN'], 1, 1, 1.0, '1', 1144], [['DT', 'IN'], 6, 4, 0.6666666666666666, '1', 1145], [['DT', 'IN', 'MD'], 1, 1, 1.0, '1', 1146], [['DT', 'IN', 'NNS'], 1, 1, 1.0, '1', 1147], [['DT', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1148], [['DT', 'IN', 'NN'], 2, 2, 1.0, '1', 1149], [['DT', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1150], [['DT', 'IN', 'IN'], 1, 1, 1.0, '1', 1151], [['DT', 'NNS'], 2, 2, 1.0, '1', 1152], [['DT', 'NNS', 'MD'], 1, 1, 1.0, '1', 1153], [['DT', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1154], [['DT', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1155], [['DT', 'NNS', 'IN'], 1, 1, 1.0, '1', 1156], [['NN_contrast'], 1, 1, 1.0, '1', 1157], [['NN_contrast', 'TO'], 1, 1, 1.0, '1', 1158], [['NN_contrast', 'TO', 'VB'], 1, 1, 1.0, '1', 1159], [['NN_contrast', 'TO', 'VB', 'JJ'], 1, 1, 1.0, '1', 1160], [['NN_contrast', 'TO', 'JJ'], 1, 1, 1.0, '1', 1161], [['NN_contrast', 'VB'], 1, 1, 1.0, '1', 1162], [['NN_contrast', 'VB', 'JJ'], 1, 1, 1.0, '1', 1163], [['NN_contrast', 'JJ'], 1, 1, 1.0, '1', 1164], [['NN'], 22, 18, 0.8181818181818182, '1', 1165], [['NN', 'VB_fail'], 1, 1, 1.0, '1', 1166], [['NN', 'VB_fail', 'NN'], 1, 1, 1.0, '1', 1167], [['NN', 'VB_fail', 'RB'], 1, 1, 1.0, '1', 1168], [['NN', 'VB_fail', 'RB', 'NN'], 1, 1, 1.0, '1', 1169], [['NN', 'VB_fail', 'RB', 'IN'], 1, 1, 1.0, '1', 1170], [['NN', 'VB_fail', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1171], [['NN', 'VB_fail', 'IN'], 1, 1, 1.0, '1', 1172], [['NN', 'VB_fail', 'IN', 'NN'], 1, 1, 1.0, '1', 1173], [['NN', 'MD'], 2, 2, 1.0, '1', 1174], [['NN', 'MD', 'VB_fail'], 1, 1, 1.0, '1', 1175], [['NN', 'MD', 'VB_fail', 'NN'], 1, 1, 1.0, '1', 1176], [['NN', 'MD', 'VB_fail', 'RB'], 1, 1, 1.0, '1', 1177], [['NN', 'MD', 'VB_fail', 'RB', 'NN'], 1, 1, 1.0, '1', 1178], [['NN', 'MD', 'VB_fail', 'RB', 'IN'], 1, 1, 1.0, '1', 1179], [['NN', 'MD', 'VB_fail', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1180], [['NN', 'MD', 'VB_fail', 'IN'], 1, 1, 1.0, '1', 1181], [['NN', 'MD', 'VB_fail', 'IN', 'NN'], 1, 1, 1.0, '1', 1182], [['NN', 'MD', 'NN'], 1, 1, 1.0, '1', 1183], [['NN', 'MD', 'RB'], 1, 1, 1.0, '1', 1184], [['NN', 'MD', 'RB', 'VB_fail'], 1, 1, 1.0, '1', 1185], [['NN', 'MD', 'RB', 'VB_fail', 'NN'], 1, 1, 1.0, '1', 1186], [['NN', 'MD', 'RB', 'VB_fail', 'RB'], 1, 1, 1.0, '1', 1187], [['NN', 'MD', 'RB', 'VB_fail', 'RB', 'NN'], 1, 1, 1.0, '1', 1188], [['NN', 'MD', 'RB', 'VB_fail', 'RB', 'IN'], 1, 1, 1.0, '1', 1189], [['NN', 'MD', 'RB', 'VB_fail', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1190], [['NN', 'MD', 'RB', 'VB_fail', 'IN'], 1, 1, 1.0, '1', 1191], [['NN', 'MD', 'RB', 'VB_fail', 'IN', 'NN'], 1, 1, 1.0, '1', 1192], [['NN', 'MD', 'RB', 'NN'], 1, 1, 1.0, '1', 1193], [['NN', 'MD', 'RB', 'RB'], 1, 1, 1.0, '1', 1194], [['NN', 'MD', 'RB', 'RB', 'NN'], 1, 1, 1.0, '1', 1195], [['NN', 'MD', 'RB', 'RB', 'IN'], 1, 1, 1.0, '1', 1196], [['NN', 'MD', 'RB', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1197], [['NN', 'MD', 'RB', 'IN'], 1, 1, 1.0, '1', 1198], [['NN', 'MD', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1199], [['NN', 'MD', 'IN'], 1, 1, 1.0, '1', 1200], [['NN', 'MD', 'IN', 'NN'], 1, 1, 1.0, '1', 1201], [['NN', 'VBG'], 3, 3, 1.0, '1', 1202], [['NN', 'VBG', 'RB_well'], 1, 1, 1.0, '1', 1203], [['NN', 'VBG', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1204], [['NN', 'VBG', 'RB_well', 'IN'], 1, 1, 1.0, '1', 1205], [['NN', 'VBG', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1206], [['NN', 'VBG', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 1207], [['NN', 'VBG', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1208], [['NN', 'VBG', 'NNS'], 2, 2, 1.0, '1', 1209], [['NN', 'VBG', 'NNS', 'RB_well'], 1, 1, 1.0, '1', 1210], [['NN', 'VBG', 'NNS', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1211], [['NN', 'VBG', 'NNS', 'RB_well', 'IN'], 1, 1, 1.0, '1', 1212], [['NN', 'VBG', 'NNS', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1213], [['NN', 'VBG', 'NNS', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 1214], [['NN', 'VBG', 'NNS', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1215], [['NN', 'VBG', 'NNS', 'NN'], 1, 1, 1.0, '1', 1216], [['NN', 'VBG', 'NNS', 'RB'], 1, 1, 1.0, '1', 1217], [['NN', 'VBG', 'NNS', 'RB', 'RB_well'], 1, 1, 1.0, '1', 1218], [['NN', 'VBG', 'NNS', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1219], [['NN', 'VBG', 'NNS', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '1', 1220], [['NN', 'VBG', 'NNS', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1221], [['NN', 'VBG', 'NNS', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 1222], [['NN', 'VBG', 'NNS', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1223], [['NN', 'VBG', 'NNS', 'RB', 'NN'], 1, 1, 1.0, '1', 1224], [['NN', 'VBG', 'NNS', 'RB', 'IN'], 1, 1, 1.0, '1', 1225], [['NN', 'VBG', 'NNS', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1226], [['NN', 'VBG', 'NNS', 'RB', 'IN', 'IN'], 1, 1, 1.0, '1', 1227], [['NN', 'VBG', 'NNS', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1228], [['NN', 'VBG', 'NNS', 'IN'], 1, 1, 1.0, '1', 1229], [['NN', 'VBG', 'NNS', 'IN', 'NN'], 1, 1, 1.0, '1', 1230], [['NN', 'VBG', 'NNS', 'IN', 'IN'], 1, 1, 1.0, '1', 1231], [['NN', 'VBG', 'NNS', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1232], [['NN', 'VBG', 'NN'], 1, 1, 1.0, '1', 1233], [['NN', 'VBG', 'RB'], 1, 1, 1.0, '1', 1234], [['NN', 'VBG', 'RB', 'RB_well'], 1, 1, 1.0, '1', 1235], [['NN', 'VBG', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1236], [['NN', 'VBG', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '1', 1237], [['NN', 'VBG', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1238], [['NN', 'VBG', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 1239], [['NN', 'VBG', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1240], [['NN', 'VBG', 'RB', 'NN'], 1, 1, 1.0, '1', 1241], [['NN', 'VBG', 'RB', 'IN'], 1, 1, 1.0, '1', 1242], [['NN', 'VBG', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1243], [['NN', 'VBG', 'RB', 'IN', 'IN'], 1, 1, 1.0, '1', 1244], [['NN', 'VBG', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1245], [['NN', 'VBG', 'IN'], 1, 1, 1.0, '1', 1246], [['NN', 'VBG', 'IN', 'NN'], 1, 1, 1.0, '1', 1247], [['NN', 'VBG', 'IN', 'IN'], 1, 1, 1.0, '1', 1248], [['NN', 'VBG', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1249], [['NN', 'RB'], 5, 4, 0.8, '1', 1250], [['NN', 'RB', 'VB_fail'], 1, 1, 1.0, '1', 1251], [['NN', 'RB', 'VB_fail', 'NN'], 1, 1, 1.0, '1', 1252], [['NN', 'RB', 'VB_fail', 'RB'], 1, 1, 1.0, '1', 1253], [['NN', 'RB', 'VB_fail', 'RB', 'NN'], 1, 1, 1.0, '1', 1254], [['NN', 'RB', 'VB_fail', 'RB', 'IN'], 1, 1, 1.0, '1', 1255], [['NN', 'RB', 'VB_fail', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1256], [['NN', 'RB', 'VB_fail', 'IN'], 1, 1, 1.0, '1', 1257], [['NN', 'RB', 'VB_fail', 'IN', 'NN'], 1, 1, 1.0, '1', 1258], [['NN', 'RB', 'JJ'], 1, 1, 1.0, '0', 1259], [['NN', 'RB', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1260], [['NN', 'RB', 'NN'], 3, 3, 1.0, '1', 1261], [['NN', 'RB', 'RB'], 2, 2, 1.0, '1', 1262], [['NN', 'RB', 'RB', 'NN'], 1, 1, 1.0, '1', 1263], [['NN', 'RB', 'RB', 'IN'], 1, 1, 1.0, '1', 1264], [['NN', 'RB', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1265], [['NN', 'RB', 'IN'], 4, 3, 0.75, '1', 1266], [['NN', 'RB', 'IN', 'NNS'], 1, 1, 1.0, '0', 1267], [['NN', 'RB', 'IN', 'NN'], 3, 3, 1.0, '1', 1268], [['NN', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '0', 1269], [['NN', 'RB', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1270], [['NN', 'RB', 'IN', 'IN'], 3, 2, 0.6666666666666666, '1', 1271], [['NN', 'RB', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1272], [['NN', 'RB', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 1273], [['NN', 'RB', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1274], [['NN', 'RB', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1275], [['NN', 'RB', 'RB_well'], 3, 2, 0.6666666666666666, '1', 1276], [['NN', 'RB', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 1277], [['NN', 'RB', 'RB_well', 'NN'], 2, 2, 1.0, '1', 1278], [['NN', 'RB', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 1279], [['NN', 'RB', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1280], [['NN', 'RB', 'RB_well', 'IN'], 3, 2, 0.6666666666666666, '1', 1281], [['NN', 'RB', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 1282], [['NN', 'RB', 'RB_well', 'IN', 'NN'], 2, 2, 1.0, '1', 1283], [['NN', 'RB', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 1284], [['NN', 'RB', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1285], [['NN', 'RB', 'RB_well', 'IN', 'IN'], 3, 2, 0.6666666666666666, '1', 1286], [['NN', 'RB', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1287], [['NN', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 1288], [['NN', 'RB', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1289], [['NN', 'RB', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1290], [['NN', 'RB', 'NNS'], 1, 1, 1.0, '0', 1291], [['NN', 'NN'], 8, 7, 0.875, '1', 1292], [['NN', 'NN', 'VBG'], 1, 1, 1.0, '1', 1293], [['NN', 'VBD'], 1, 1, 1.0, '1', 1294], [['NN', 'VBD', 'JJR_better'], 1, 1, 1.0, '1', 1295], [['NN', 'VBD', 'JJR_better', 'DT'], 1, 1, 1.0, '1', 1296], [['NN', 'VBD', 'JJR_better', 'DT', 'JJS'], 1, 1, 1.0, '1', 1297], [['NN', 'VBD', 'JJR_better', 'JJS'], 1, 1, 1.0, '1', 1298], [['NN', 'VBD', 'JJR_better', 'IN'], 1, 1, 1.0, '1', 1299], [['NN', 'VBD', 'JJR_better', 'IN', 'DT'], 1, 1, 1.0, '1', 1300], [['NN', 'VBD', 'JJR_better', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 1301], [['NN', 'VBD', 'JJR_better', 'IN', 'JJS'], 1, 1, 1.0, '1', 1302], [['NN', 'VBD', 'DT'], 1, 1, 1.0, '1', 1303], [['NN', 'VBD', 'DT', 'JJS'], 1, 1, 1.0, '1', 1304], [['NN', 'VBD', 'JJS'], 1, 1, 1.0, '1', 1305], [['NN', 'VBD', 'IN'], 1, 1, 1.0, '1', 1306], [['NN', 'VBD', 'IN', 'DT'], 1, 1, 1.0, '1', 1307], [['NN', 'VBD', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 1308], [['NN', 'VBD', 'IN', 'JJS'], 1, 1, 1.0, '1', 1309], [['NN', 'NN_advantag'], 1, 1, 1.0, '1', 1310], [['NN', 'NN_advantag', 'MD'], 1, 1, 1.0, '1', 1311], [['NN', 'NN_advantag', 'NNS'], 1, 1, 1.0, '1', 1312], [['NN', 'NN_advantag', 'NNS', 'MD'], 1, 1, 1.0, '1', 1313], [['NN', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1314], [['NN', 'NN_advantag', 'IN', 'MD'], 1, 1, 1.0, '1', 1315], [['NN', 'NN_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 1316], [['NN', 'NN_advantag', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1317], [['NN', 'IN_over'], 3, 2, 0.6666666666666666, '1', 1318], [['NN', 'IN_over', 'VBG'], 1, 1, 1.0, '1', 1319], [['NN', 'IN_over', 'NN'], 3, 2, 0.6666666666666666, '1', 1320], [['NN', 'IN_over', 'NN', 'VBG'], 1, 1, 1.0, '1', 1321], [['NN', 'IN_over', 'JJ', 'VBG'], 1, 1, 1.0, '1', 1322], [['NN', 'IN_over', 'JJ', 'VBN'], 1, 1, 1.0, '0', 1323], [['NN', 'IN_over', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 1324], [['NN', 'IN_over', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 1325], [['NN', 'IN_over', 'VBN'], 1, 1, 1.0, '0', 1326], [['NN', 'IN_over', 'VBN', 'NN'], 1, 1, 1.0, '0', 1327], [['NN', 'NNS_gain'], 2, 2, 1.0, '1', 1328], [['NN', 'NNS_gain', 'VBP'], 1, 1, 1.0, '1', 1329], [['NN', 'NNS_gain', 'VBP', 'VBN'], 1, 1, 1.0, '1', 1330], [['NN', 'NNS_gain', 'VBP', 'VBN', 'VBN'], 1, 1, 1.0, '1', 1331], [['NN', 'NNS_gain', 'VBN'], 1, 1, 1.0, '1', 1332], [['NN', 'NNS_gain', 'VBN', 'VBN'], 1, 1, 1.0, '1', 1333], [['NN', 'NNS_gain', 'NN'], 1, 1, 1.0, '1', 1334], [['NN', 'NNS_gain', 'JJ'], 1, 1, 1.0, '1', 1335], [['NN', 'NNS_gain', 'JJ', 'NN'], 1, 1, 1.0, '1', 1336], [['NN', 'NNS_gain', 'IN'], 1, 1, 1.0, '1', 1337], [['NN', 'NNS_gain', 'IN', 'NN'], 1, 1, 1.0, '1', 1338], [['NN', 'NNS_gain', 'IN', 'JJ'], 1, 1, 1.0, '1', 1339], [['NN', 'NNS_gain', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 1340], [['NN', 'JJS'], 1, 1, 1.0, '1', 1341], [['NN', 'VBN'], 5, 3, 0.6, '0', 1342], [['NN', 'VBN', 'VBN'], 1, 1, 1.0, '1', 1343], [['NN', 'VBN', 'NN'], 1, 1, 1.0, '0', 1344], [['NN', 'VBN', 'IN'], 3, 2, 0.6666666666666666, '0', 1345], [['NN', 'VBZ'], 1, 1, 1.0, '1', 1346], [['NN', 'VBZ', 'MD'], 1, 1, 1.0, '1', 1347], [['NN', 'VBZ', 'DT'], 1, 1, 1.0, '1', 1348], [['NN', 'VBZ', 'DT', 'MD'], 1, 1, 1.0, '1', 1349], [['NN', 'VBZ', 'DT', 'NNS'], 1, 1, 1.0, '1', 1350], [['NN', 'VBZ', 'DT', 'NNS', 'MD'], 1, 1, 1.0, '1', 1351], [['NN', 'VBZ', 'DT', 'NN_advantag'], 1, 1, 1.0, '1', 1352], [['NN', 'VBZ', 'DT', 'NN_advantag', 'MD'], 1, 1, 1.0, '1', 1353], [['NN', 'VBZ', 'DT', 'NN_advantag', 'NNS'], 1, 1, 1.0, '1', 1354], [['NN', 'VBZ', 'DT', 'NN_advantag', 'NNS', 'MD'], 1, 1, 1.0, '1', 1355], [['NN', 'VBZ', 'DT', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1356], [['NN', 'VBZ', 'DT', 'NN_advantag', 'IN', 'MD'], 1, 1, 1.0, '1', 1357], [['NN', 'VBZ', 'DT', 'NN_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 1358], [['NN', 'VBZ', 'DT', 'NN_advantag', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1359], [['NN', 'VBZ', 'DT', 'IN'], 1, 1, 1.0, '1', 1360], [['NN', 'VBZ', 'DT', 'IN', 'MD'], 1, 1, 1.0, '1', 1361], [['NN', 'VBZ', 'DT', 'IN', 'NNS'], 1, 1, 1.0, '1', 1362], [['NN', 'VBZ', 'DT', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1363], [['NN', 'VBZ', 'NNS'], 1, 1, 1.0, '1', 1364], [['NN', 'VBZ', 'NNS', 'MD'], 1, 1, 1.0, '1', 1365], [['NN', 'VBZ', 'NN_advantag'], 1, 1, 1.0, '1', 1366], [['NN', 'VBZ', 'NN_advantag', 'MD'], 1, 1, 1.0, '1', 1367], [['NN', 'VBZ', 'NN_advantag', 'NNS'], 1, 1, 1.0, '1', 1368], [['NN', 'VBZ', 'NN_advantag', 'NNS', 'MD'], 1, 1, 1.0, '1', 1369], [['NN', 'VBZ', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1370], [['NN', 'VBZ', 'NN_advantag', 'IN', 'MD'], 1, 1, 1.0, '1', 1371], [['NN', 'VBZ', 'NN_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 1372], [['NN', 'VBZ', 'NN_advantag', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1373], [['NN', 'VBZ', 'IN'], 1, 1, 1.0, '1', 1374], [['NN', 'VBZ', 'IN', 'MD'], 1, 1, 1.0, '1', 1375], [['NN', 'VBZ', 'IN', 'NNS'], 1, 1, 1.0, '1', 1376], [['NN', 'VBZ', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1377], [['NN', 'VBP'], 1, 1, 1.0, '1', 1378], [['NN', 'VBP', 'VBN'], 1, 1, 1.0, '1', 1379], [['NN', 'VBP', 'VBN', 'VBN'], 1, 1, 1.0, '1', 1380], [['NN', 'JJ', 'VBG'], 1, 1, 1.0, '1', 1381], [['NN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1382], [['NN', 'JJ', 'VBN'], 1, 1, 1.0, '0', 1383], [['NN', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 1384], [['NN', 'JJ', 'NN'], 3, 2, 0.6666666666666666, '1', 1385], [['NN', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 1386], [['NN', 'IN'], 12, 9, 0.75, '1', 1387], [['NN', 'IN', 'MD'], 1, 1, 1.0, '1', 1388], [['NN', 'IN', 'NN'], 5, 5, 1.0, '1', 1389], [['NN', 'IN', 'JJS'], 1, 1, 1.0, '1', 1390], [['NN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1391], [['NN', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 1392], [['NN', 'IN', 'IN'], 3, 2, 0.6666666666666666, '1', 1393], [['NN', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1394], [['NN', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 1395], [['NN', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1396], [['NN', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1397], [['NN', 'IN', 'DT'], 1, 1, 1.0, '1', 1398], [['NN', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 1399], [['NN', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1400], [['NN', 'RB_well'], 3, 2, 0.6666666666666666, '1', 1401], [['NN', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 1402], [['NN', 'RB_well', 'NN'], 2, 2, 1.0, '1', 1403], [['NN', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 1404], [['NN', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1405], [['NN', 'RB_well', 'IN'], 3, 2, 0.6666666666666666, '1', 1406], [['NN', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 1407], [['NN', 'RB_well', 'IN', 'NN'], 2, 2, 1.0, '1', 1408], [['NN', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 1409], [['NN', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1410], [['NN', 'RB_well', 'IN', 'IN'], 3, 2, 0.6666666666666666, '1', 1411], [['NN', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1412], [['NN', 'RB_well', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 1413], [['NN', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1414], [['NN', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1415], [['NN', 'VBG_match'], 2, 2, 1.0, '1', 1416], [['NN', 'VBG_match', 'NNS'], 2, 2, 1.0, '1', 1417], [['NN', 'VBG_match', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1418], [['NN', 'VBG_match', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1419], [['NN', 'VBG_match', 'NNS', 'RB'], 1, 1, 1.0, '1', 1420], [['NN', 'VBG_match', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 1421], [['NN', 'VBG_match', 'NNS', 'IN'], 1, 1, 1.0, '1', 1422], [['NN', 'VBG_match', 'VBN'], 1, 1, 1.0, '1', 1423], [['NN', 'VBG_match', 'VBN', 'IN'], 1, 1, 1.0, '1', 1424], [['NN', 'VBG_match', 'RB'], 1, 1, 1.0, '1', 1425], [['NN', 'VBG_match', 'RB', 'RB'], 1, 1, 1.0, '1', 1426], [['NN', 'VBG_match', 'IN'], 1, 1, 1.0, '1', 1427], [['NN', 'JJR_better'], 1, 1, 1.0, '1', 1428], [['NN', 'JJR_better', 'DT'], 1, 1, 1.0, '1', 1429], [['NN', 'JJR_better', 'DT', 'JJS'], 1, 1, 1.0, '1', 1430], [['NN', 'JJR_better', 'JJS'], 1, 1, 1.0, '1', 1431], [['NN', 'JJR_better', 'IN'], 1, 1, 1.0, '1', 1432], [['NN', 'JJR_better', 'IN', 'DT'], 1, 1, 1.0, '1', 1433], [['NN', 'JJR_better', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 1434], [['NN', 'JJR_better', 'IN', 'JJS'], 1, 1, 1.0, '1', 1435], [['NN', 'NNS'], 7, 6, 0.8571428571428571, '1', 1436], [['NN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1437], [['NN', 'NNS', 'VBG'], 1, 1, 1.0, '1', 1438], [['NN', 'NNS', 'RB'], 2, 2, 1.0, '1', 1439], [['NN', 'NNS', 'RB', 'RB_well'], 1, 1, 1.0, '1', 1440], [['NN', 'NNS', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1441], [['NN', 'NNS', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '1', 1442], [['NN', 'NNS', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1443], [['NN', 'NNS', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 1444], [['NN', 'NNS', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1445], [['NN', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 1446], [['NN', 'NNS', 'RB', 'NN'], 1, 1, 1.0, '1', 1447], [['NN', 'NNS', 'RB', 'IN'], 1, 1, 1.0, '1', 1448], [['NN', 'NNS', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1449], [['NN', 'NNS', 'RB', 'IN', 'IN'], 1, 1, 1.0, '1', 1450], [['NN', 'NNS', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1451], [['NN', 'NNS', 'NN'], 2, 2, 1.0, '1', 1452], [['NN', 'NNS', 'NN', 'VBG'], 1, 1, 1.0, '1', 1453], [['NN', 'NNS', 'IN_over'], 1, 1, 1.0, '1', 1454], [['NN', 'NNS', 'IN_over', 'VBG'], 1, 1, 1.0, '1', 1455], [['NN', 'NNS', 'IN_over', 'NN'], 1, 1, 1.0, '1', 1456], [['NN', 'NNS', 'IN_over', 'NN', 'VBG'], 1, 1, 1.0, '1', 1457], [['NN', 'NNS', 'IN_over', 'JJ'], 1, 1, 1.0, '1', 1458], [['NN', 'NNS', 'IN_over', 'JJ', 'VBG'], 1, 1, 1.0, '1', 1459], [['NN', 'NNS', 'IN_over', 'JJ', 'NN'], 1, 1, 1.0, '1', 1460], [['NN', 'NNS', 'IN_over', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 1461], [['NN', 'NNS', 'VBN'], 1, 1, 1.0, '1', 1462], [['NN', 'NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1463], [['NN', 'NNS', 'JJ'], 1, 1, 1.0, '1', 1464], [['NN', 'NNS', 'JJ', 'VBG'], 1, 1, 1.0, '1', 1465], [['NN', 'NNS', 'JJ', 'NN'], 1, 1, 1.0, '1', 1466], [['NN', 'NNS', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 1467], [['NN', 'NNS', 'IN'], 2, 2, 1.0, '1', 1468], [['NN', 'NNS', 'IN', 'NN'], 1, 1, 1.0, '1', 1469], [['NN', 'NNS', 'IN', 'IN'], 1, 1, 1.0, '1', 1470], [['NN', 'NNS', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1471], [['NN', 'NNS', 'RB_well'], 1, 1, 1.0, '1', 1472], [['NN', 'NNS', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1473], [['NN', 'NNS', 'RB_well', 'IN'], 1, 1, 1.0, '1', 1474], [['NN', 'NNS', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1475], [['NN', 'NNS', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 1476], [['NN', 'NNS', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1477], [['NN', 'DT'], 2, 2, 1.0, '1', 1478], [['NN', 'DT', 'NNS'], 1, 1, 1.0, '1', 1479], [['NN', 'DT', 'NNS', 'MD'], 1, 1, 1.0, '1', 1480], [['NN', 'DT', 'MD'], 1, 1, 1.0, '1', 1481], [['NN', 'DT', 'JJS'], 1, 1, 1.0, '1', 1482], [['NN', 'DT', 'NN_advantag'], 1, 1, 1.0, '1', 1483], [['NN', 'DT', 'NN_advantag', 'MD'], 1, 1, 1.0, '1', 1484], [['NN', 'DT', 'NN_advantag', 'NNS'], 1, 1, 1.0, '1', 1485], [['NN', 'DT', 'NN_advantag', 'NNS', 'MD'], 1, 1, 1.0, '1', 1486], [['NN', 'DT', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1487], [['NN', 'DT', 'NN_advantag', 'IN', 'MD'], 1, 1, 1.0, '1', 1488], [['NN', 'DT', 'NN_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 1489], [['NN', 'DT', 'NN_advantag', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1490], [['NN', 'DT', 'IN'], 1, 1, 1.0, '1', 1491], [['NN', 'DT', 'IN', 'MD'], 1, 1, 1.0, '1', 1492], [['NN', 'DT', 'IN', 'NNS'], 1, 1, 1.0, '1', 1493], [['NN', 'DT', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 1494], [['JJR_smaller'], 1, 1, 1.0, '0', 1495], [['JJR_smaller', 'VBP'], 1, 1, 1.0, '0', 1496], [['JJR_smaller', 'VBP', 'VBN'], 1, 1, 1.0, '0', 1497], [['JJR_smaller', 'NNS'], 1, 1, 1.0, '0', 1498], [['JJR_smaller', 'NNS', 'VBP'], 1, 1, 1.0, '0', 1499], [['JJR_smaller', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 1500], [['JJR_smaller', 'NNS', 'VBN'], 1, 1, 1.0, '0', 1501], [['JJR_smaller', 'VBN'], 1, 1, 1.0, '0', 1502], [['DT_all'], 2, 2, 1.0, '1', 1503], [['DT_all', 'DT'], 1, 1, 1.0, '1', 1504], [['DT_all', 'DT', 'RB'], 1, 1, 1.0, '1', 1505], [['DT_all', 'NNS'], 2, 2, 1.0, '1', 1506], [['DT_all', 'NNS', 'DT'], 1, 1, 1.0, '1', 1507], [['DT_all', 'NNS', 'DT', 'RB'], 1, 1, 1.0, '1', 1508], [['DT_all', 'NNS', 'NNS'], 1, 1, 1.0, '1', 1509], [['DT_all', 'NNS', 'RB'], 1, 1, 1.0, '1', 1510], [['DT_all', 'RB'], 1, 1, 1.0, '1', 1511], [['DT_all', 'CD'], 1, 1, 1.0, '1', 1512], [['DT_all', 'CD', 'NNS'], 1, 1, 1.0, '1', 1513], [['DT_all', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 1514], [['VBD'], 2, 2, 1.0, '1', 1515], [['VBD', 'JJR_better'], 1, 1, 1.0, '1', 1516], [['VBD', 'JJR_better', 'DT'], 1, 1, 1.0, '1', 1517], [['VBD', 'JJR_better', 'DT', 'JJS'], 1, 1, 1.0, '1', 1518], [['VBD', 'JJR_better', 'JJS'], 1, 1, 1.0, '1', 1519], [['VBD', 'JJR_better', 'IN'], 1, 1, 1.0, '1', 1520], [['VBD', 'JJR_better', 'IN', 'DT'], 1, 1, 1.0, '1', 1521], [['VBD', 'JJR_better', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 1522], [['VBD', 'JJR_better', 'IN', 'JJS'], 1, 1, 1.0, '1', 1523], [['VBD', 'VB'], 1, 1, 1.0, '1', 1524], [['VBD', 'VB', 'IN'], 1, 1, 1.0, '1', 1525], [['VBD', 'JJ_compar'], 1, 1, 1.0, '1', 1526], [['VBD', 'JJ_compar', 'TO'], 1, 1, 1.0, '1', 1527], [['VBD', 'JJ_compar', 'TO', 'VB'], 1, 1, 1.0, '1', 1528], [['VBD', 'JJ_compar', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 1529], [['VBD', 'JJ_compar', 'TO', 'IN'], 1, 1, 1.0, '1', 1530], [['VBD', 'JJ_compar', 'VB'], 1, 1, 1.0, '1', 1531], [['VBD', 'JJ_compar', 'VB', 'IN'], 1, 1, 1.0, '1', 1532], [['VBD', 'JJ_compar', 'IN'], 1, 1, 1.0, '1', 1533], [['VBD', 'JJS'], 1, 1, 1.0, '1', 1534], [['VBD', 'TO'], 1, 1, 1.0, '1', 1535], [['VBD', 'TO', 'VB'], 1, 1, 1.0, '1', 1536], [['VBD', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 1537], [['VBD', 'TO', 'IN'], 1, 1, 1.0, '1', 1538], [['VBD', 'RB'], 1, 1, 1.0, '1', 1539], [['VBD', 'RB', 'TO'], 1, 1, 1.0, '1', 1540], [['VBD', 'RB', 'TO', 'VB'], 1, 1, 1.0, '1', 1541], [['VBD', 'RB', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 1542], [['VBD', 'RB', 'TO', 'IN'], 1, 1, 1.0, '1', 1543], [['VBD', 'RB', 'VB'], 1, 1, 1.0, '1', 1544], [['VBD', 'RB', 'VB', 'IN'], 1, 1, 1.0, '1', 1545], [['VBD', 'RB', 'JJ_compar'], 1, 1, 1.0, '1', 1546], [['VBD', 'RB', 'JJ_compar', 'TO'], 1, 1, 1.0, '1', 1547], [['VBD', 'RB', 'JJ_compar', 'TO', 'VB'], 1, 1, 1.0, '1', 1548], [['VBD', 'RB', 'JJ_compar', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 1549], [['VBD', 'RB', 'JJ_compar', 'TO', 'IN'], 1, 1, 1.0, '1', 1550], [['VBD', 'RB', 'JJ_compar', 'VB'], 1, 1, 1.0, '1', 1551], [['VBD', 'RB', 'JJ_compar', 'VB', 'IN'], 1, 1, 1.0, '1', 1552], [['VBD', 'RB', 'JJ_compar', 'IN'], 1, 1, 1.0, '1', 1553], [['VBD', 'RB', 'IN'], 1, 1, 1.0, '1', 1554], [['VBD', 'IN'], 2, 2, 1.0, '1', 1555], [['VBD', 'IN', 'DT'], 1, 1, 1.0, '1', 1556], [['VBD', 'IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 1557], [['VBD', 'IN', 'JJS'], 1, 1, 1.0, '1', 1558], [['VBD', 'DT'], 1, 1, 1.0, '1', 1559], [['VBD', 'DT', 'JJS'], 1, 1, 1.0, '1', 1560], [['NNS_advantag'], 2, 2, 1.0, '1', 1561], [['NNS_advantag', 'NNS'], 1, 1, 1.0, '1', 1562], [['NNS_advantag', 'NNS', 'IN'], 1, 1, 1.0, '1', 1563], [['NNS_advantag', 'NN'], 1, 1, 1.0, '1', 1564], [['NNS_advantag', 'NN', 'IN'], 1, 1, 1.0, '1', 1565], [['NNS_advantag', 'IN'], 2, 2, 1.0, '1', 1566], [['NNS_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 1567], [['NNS_advantag', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 1568], [['NNS_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1569], [['NNS_advantag', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1570], [['NNS_advantag', 'IN', 'IN'], 2, 2, 1.0, '1', 1571], [['TO'], 3, 3, 1.0, '1', 1572], [['TO', 'VB'], 3, 3, 1.0, '1', 1573], [['TO', 'VB', 'JJ_advantag'], 1, 1, 1.0, '1', 1574], [['TO', 'VB', 'JJ'], 1, 1, 1.0, '1', 1575], [['TO', 'VB', 'IN'], 1, 1, 1.0, '1', 1576], [['TO', 'JJ_advantag'], 1, 1, 1.0, '1', 1577], [['TO', 'JJ'], 1, 1, 1.0, '1', 1578], [['TO', 'IN'], 1, 1, 1.0, '1', 1579], [['PRP'], 2, 2, 1.0, '0', 1580], [['PRP', 'NN'], 2, 2, 1.0, '0', 1581], [['PRP', 'NN', 'VBN'], 2, 2, 1.0, '0', 1582], [['PRP', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 1583], [['PRP', 'NN', 'IN'], 2, 2, 1.0, '0', 1584], [['PRP', 'VBN'], 2, 2, 1.0, '0', 1585], [['PRP', 'VBN', 'IN'], 2, 2, 1.0, '0', 1586], [['PRP', 'VBP'], 2, 2, 1.0, '0', 1587], [['PRP', 'VBP', 'DT'], 2, 2, 1.0, '0', 1588], [['PRP', 'VBP', 'DT', 'JJS_best'], 2, 2, 1.0, '0', 1589], [['PRP', 'VBP', 'DT', 'JJS_best', 'VBN'], 2, 2, 1.0, '0', 1590], [['PRP', 'VBP', 'DT', 'JJS_best', 'VBN', 'IN'], 2, 2, 1.0, '0', 1591], [['PRP', 'VBP', 'DT', 'JJS_best', 'NN'], 2, 2, 1.0, '0', 1592], [['PRP', 'VBP', 'DT', 'JJS_best', 'NN', 'VBN'], 2, 2, 1.0, '0', 1593], [['PRP', 'VBP', 'DT', 'JJS_best', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 1594], [['PRP', 'VBP', 'DT', 'JJS_best', 'NN', 'IN'], 2, 2, 1.0, '0', 1595], [['PRP', 'VBP', 'DT', 'JJS_best', 'IN'], 2, 2, 1.0, '0', 1596], [['PRP', 'VBP', 'DT', 'VBN'], 2, 2, 1.0, '0', 1597], [['PRP', 'VBP', 'DT', 'VBN', 'IN'], 2, 2, 1.0, '0', 1598], [['PRP', 'VBP', 'DT', 'NN'], 2, 2, 1.0, '0', 1599], [['PRP', 'VBP', 'DT', 'NN', 'VBN'], 2, 2, 1.0, '0', 1600], [['PRP', 'VBP', 'DT', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 1601], [['PRP', 'VBP', 'DT', 'NN', 'IN'], 2, 2, 1.0, '0', 1602], [['PRP', 'VBP', 'DT', 'IN'], 2, 2, 1.0, '0', 1603], [['PRP', 'VBP', 'JJS_best'], 2, 2, 1.0, '0', 1604], [['PRP', 'VBP', 'JJS_best', 'VBN'], 2, 2, 1.0, '0', 1605], [['PRP', 'VBP', 'JJS_best', 'VBN', 'IN'], 2, 2, 1.0, '0', 1606], [['PRP', 'VBP', 'JJS_best', 'NN'], 2, 2, 1.0, '0', 1607], [['PRP', 'VBP', 'JJS_best', 'NN', 'VBN'], 2, 2, 1.0, '0', 1608], [['PRP', 'VBP', 'JJS_best', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 1609], [['PRP', 'VBP', 'JJS_best', 'NN', 'IN'], 2, 2, 1.0, '0', 1610], [['PRP', 'VBP', 'JJS_best', 'IN'], 2, 2, 1.0, '0', 1611], [['PRP', 'VBP', 'VBN'], 2, 2, 1.0, '0', 1612], [['PRP', 'VBP', 'VBN', 'IN'], 2, 2, 1.0, '0', 1613], [['PRP', 'VBP', 'NN'], 2, 2, 1.0, '0', 1614], [['PRP', 'VBP', 'NN', 'VBN'], 2, 2, 1.0, '0', 1615], [['PRP', 'VBP', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 1616], [['PRP', 'VBP', 'NN', 'IN'], 2, 2, 1.0, '0', 1617], [['PRP', 'VBP', 'IN'], 2, 2, 1.0, '0', 1618], [['PRP', 'JJS_best'], 2, 2, 1.0, '0', 1619], [['PRP', 'JJS_best', 'VBN'], 2, 2, 1.0, '0', 1620], [['PRP', 'JJS_best', 'VBN', 'IN'], 2, 2, 1.0, '0', 1621], [['PRP', 'JJS_best', 'NN'], 2, 2, 1.0, '0', 1622], [['PRP', 'JJS_best', 'NN', 'VBN'], 2, 2, 1.0, '0', 1623], [['PRP', 'JJS_best', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 1624], [['PRP', 'JJS_best', 'NN', 'IN'], 2, 2, 1.0, '0', 1625], [['PRP', 'JJS_best', 'IN'], 2, 2, 1.0, '0', 1626], [['PRP', 'IN'], 2, 2, 1.0, '0', 1627], [['PRP', 'DT'], 2, 2, 1.0, '0', 1628], [['PRP', 'DT', 'JJS_best'], 2, 2, 1.0, '0', 1629], [['PRP', 'DT', 'JJS_best', 'VBN'], 2, 2, 1.0, '0', 1630], [['PRP', 'DT', 'JJS_best', 'VBN', 'IN'], 2, 2, 1.0, '0', 1631], [['PRP', 'DT', 'JJS_best', 'NN'], 2, 2, 1.0, '0', 1632], [['PRP', 'DT', 'JJS_best', 'NN', 'VBN'], 2, 2, 1.0, '0', 1633], [['PRP', 'DT', 'JJS_best', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 1634], [['PRP', 'DT', 'JJS_best', 'NN', 'IN'], 2, 2, 1.0, '0', 1635], [['PRP', 'DT', 'JJS_best', 'IN'], 2, 2, 1.0, '0', 1636], [['PRP', 'DT', 'VBN'], 2, 2, 1.0, '0', 1637], [['PRP', 'DT', 'VBN', 'IN'], 2, 2, 1.0, '0', 1638], [['PRP', 'DT', 'NN'], 2, 2, 1.0, '0', 1639], [['PRP', 'DT', 'NN', 'VBN'], 2, 2, 1.0, '0', 1640], [['PRP', 'DT', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 1641], [['PRP', 'DT', 'NN', 'IN'], 2, 2, 1.0, '0', 1642], [['PRP', 'DT', 'IN'], 2, 2, 1.0, '0', 1643], [['RB'], 13, 11, 0.8461538461538461, '1', 1644], [['RB', 'VB_fail'], 1, 1, 1.0, '1', 1645], [['RB', 'VB_fail', 'NN'], 1, 1, 1.0, '1', 1646], [['RB', 'VB_fail', 'RB'], 1, 1, 1.0, '1', 1647], [['RB', 'VB_fail', 'RB', 'NN'], 1, 1, 1.0, '1', 1648], [['RB', 'VB_fail', 'RB', 'IN'], 1, 1, 1.0, '1', 1649], [['RB', 'VB_fail', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1650], [['RB', 'VB_fail', 'IN'], 1, 1, 1.0, '1', 1651], [['RB', 'VB_fail', 'IN', 'NN'], 1, 1, 1.0, '1', 1652], [['RB', 'JJR_better'], 1, 1, 1.0, '1', 1653], [['RB', 'JJR_better', 'MD'], 1, 1, 1.0, '1', 1654], [['RB', 'JJR_better', 'MD', 'VB'], 1, 1, 1.0, '1', 1655], [['RB', 'JJR_better', 'VB'], 1, 1, 1.0, '1', 1656], [['RB', 'JJR_better', 'NNS'], 1, 1, 1.0, '1', 1657], [['RB', 'JJR_better', 'NNS', 'MD'], 1, 1, 1.0, '1', 1658], [['RB', 'JJR_better', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 1659], [['RB', 'JJR_better', 'NNS', 'VB'], 1, 1, 1.0, '1', 1660], [['RB', 'VB'], 3, 3, 1.0, '1', 1661], [['RB', 'VB', 'DT'], 1, 1, 1.0, '1', 1662], [['RB', 'VB', 'DT', 'NN'], 1, 1, 1.0, '1', 1663], [['RB', 'VB', 'NN'], 1, 1, 1.0, '1', 1664], [['RB', 'VB', 'NN_advantag'], 1, 1, 1.0, '1', 1665], [['RB', 'VB', 'NN_advantag', 'DT'], 1, 1, 1.0, '1', 1666], [['RB', 'VB', 'NN_advantag', 'DT', 'NN'], 1, 1, 1.0, '1', 1667], [['RB', 'VB', 'NN_advantag', 'NN'], 1, 1, 1.0, '1', 1668], [['RB', 'VB', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1669], [['RB', 'VB', 'NN_advantag', 'IN', 'DT'], 1, 1, 1.0, '1', 1670], [['RB', 'VB', 'NN_advantag', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 1671], [['RB', 'VB', 'NN_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1672], [['RB', 'VB', 'JJ'], 1, 1, 1.0, '1', 1673], [['RB', 'VB', 'JJ', 'DT'], 1, 1, 1.0, '1', 1674], [['RB', 'VB', 'JJ', 'DT', 'NN'], 1, 1, 1.0, '1', 1675], [['RB', 'VB', 'JJ', 'NN'], 1, 1, 1.0, '1', 1676], [['RB', 'VB', 'JJ', 'NN_advantag'], 1, 1, 1.0, '1', 1677], [['RB', 'VB', 'JJ', 'NN_advantag', 'DT'], 1, 1, 1.0, '1', 1678], [['RB', 'VB', 'JJ', 'NN_advantag', 'DT', 'NN'], 1, 1, 1.0, '1', 1679], [['RB', 'VB', 'JJ', 'NN_advantag', 'NN'], 1, 1, 1.0, '1', 1680], [['RB', 'VB', 'JJ', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1681], [['RB', 'VB', 'JJ', 'NN_advantag', 'IN', 'DT'], 1, 1, 1.0, '1', 1682], [['RB', 'VB', 'JJ', 'NN_advantag', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 1683], [['RB', 'VB', 'JJ', 'NN_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1684], [['RB', 'VB', 'JJ', 'IN'], 1, 1, 1.0, '1', 1685], [['RB', 'VB', 'JJ', 'IN', 'DT'], 1, 1, 1.0, '1', 1686], [['RB', 'VB', 'JJ', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 1687], [['RB', 'VB', 'JJ', 'IN', 'NN'], 1, 1, 1.0, '1', 1688], [['RB', 'VB', 'IN'], 2, 2, 1.0, '1', 1689], [['RB', 'VB', 'IN', 'DT'], 1, 1, 1.0, '1', 1690], [['RB', 'VB', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 1691], [['RB', 'VB', 'IN', 'NN'], 1, 1, 1.0, '1', 1692], [['RB', 'JJ'], 3, 2, 0.6666666666666666, '1', 1693], [['RB', 'JJ', 'DT'], 1, 1, 1.0, '1', 1694], [['RB', 'JJ', 'DT', 'NN'], 1, 1, 1.0, '1', 1695], [['RB', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1696], [['RB', 'JJ', 'NN'], 1, 1, 1.0, '1', 1697], [['RB', 'JJ', 'NN_advantag'], 1, 1, 1.0, '1', 1698], [['RB', 'JJ', 'NN_advantag', 'DT'], 1, 1, 1.0, '1', 1699], [['RB', 'JJ', 'NN_advantag', 'DT', 'NN'], 1, 1, 1.0, '1', 1700], [['RB', 'JJ', 'NN_advantag', 'NN'], 1, 1, 1.0, '1', 1701], [['RB', 'JJ', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1702], [['RB', 'JJ', 'NN_advantag', 'IN', 'DT'], 1, 1, 1.0, '1', 1703], [['RB', 'JJ', 'NN_advantag', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 1704], [['RB', 'JJ', 'NN_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1705], [['RB', 'JJ', 'IN'], 1, 1, 1.0, '1', 1706], [['RB', 'JJ', 'IN', 'DT'], 1, 1, 1.0, '1', 1707], [['RB', 'JJ', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 1708], [['RB', 'JJ', 'IN', 'NN'], 1, 1, 1.0, '1', 1709], [['RB', 'NN'], 6, 6, 1.0, '1', 1710], [['RB', 'NN', 'IN'], 1, 1, 1.0, '1', 1711], [['RB', 'NN_advantag'], 1, 1, 1.0, '1', 1712], [['RB', 'NN_advantag', 'DT'], 1, 1, 1.0, '1', 1713], [['RB', 'NN_advantag', 'DT', 'NN'], 1, 1, 1.0, '1', 1714], [['RB', 'NN_advantag', 'NN'], 1, 1, 1.0, '1', 1715], [['RB', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 1716], [['RB', 'NN_advantag', 'IN', 'DT'], 1, 1, 1.0, '1', 1717], [['RB', 'NN_advantag', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 1718], [['RB', 'NN_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1719], [['RB', 'JJR_smaller'], 1, 1, 1.0, '0', 1720], [['RB', 'JJR_smaller', 'VBP'], 1, 1, 1.0, '0', 1721], [['RB', 'JJR_smaller', 'VBP', 'VBN'], 1, 1, 1.0, '0', 1722], [['RB', 'JJR_smaller', 'NNS'], 1, 1, 1.0, '0', 1723], [['RB', 'JJR_smaller', 'NNS', 'VBP'], 1, 1, 1.0, '0', 1724], [['RB', 'JJR_smaller', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 1725], [['RB', 'JJR_smaller', 'NNS', 'VBN'], 1, 1, 1.0, '0', 1726], [['RB', 'JJR_smaller', 'VBN'], 1, 1, 1.0, '0', 1727], [['RB', 'IN_over'], 1, 1, 1.0, '1', 1728], [['RB', 'IN_over', 'NN'], 1, 1, 1.0, '1', 1729], [['RB', 'MD'], 1, 1, 1.0, '1', 1730], [['RB', 'MD', 'VB'], 1, 1, 1.0, '1', 1731], [['RB', 'VBN'], 1, 1, 1.0, '0', 1732], [['RB', 'JJ_compar'], 1, 1, 1.0, '1', 1733], [['RB', 'JJ_compar', 'TO'], 1, 1, 1.0, '1', 1734], [['RB', 'JJ_compar', 'TO', 'VB'], 1, 1, 1.0, '1', 1735], [['RB', 'JJ_compar', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 1736], [['RB', 'JJ_compar', 'TO', 'IN'], 1, 1, 1.0, '1', 1737], [['RB', 'JJ_compar', 'VB'], 1, 1, 1.0, '1', 1738], [['RB', 'JJ_compar', 'VB', 'IN'], 1, 1, 1.0, '1', 1739], [['RB', 'JJ_compar', 'IN'], 1, 1, 1.0, '1', 1740], [['RB', 'NNS_advantag'], 1, 1, 1.0, '1', 1741], [['RB', 'NNS_advantag', 'NN'], 1, 1, 1.0, '1', 1742], [['RB', 'NNS_advantag', 'NN', 'IN'], 1, 1, 1.0, '1', 1743], [['RB', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 1744], [['RB', 'NNS_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1745], [['RB', 'NNS_advantag', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1746], [['RB', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 1747], [['RB', 'TO'], 1, 1, 1.0, '1', 1748], [['RB', 'TO', 'VB'], 1, 1, 1.0, '1', 1749], [['RB', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 1750], [['RB', 'TO', 'IN'], 1, 1, 1.0, '1', 1751], [['RB', 'VBP', 'NNS_advantag'], 1, 1, 1.0, '1', 1752], [['RB', 'VBP', 'NNS_advantag', 'NN'], 1, 1, 1.0, '1', 1753], [['RB', 'VBP', 'NNS_advantag', 'NN', 'IN'], 1, 1, 1.0, '1', 1754], [['RB', 'VBP', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 1755], [['RB', 'VBP', 'NNS_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1756], [['RB', 'VBP', 'NNS_advantag', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1757], [['RB', 'VBP', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 1758], [['RB', 'VBP', 'DT'], 1, 1, 1.0, '1', 1759], [['RB', 'VBP', 'DT', 'NNS_advantag'], 1, 1, 1.0, '1', 1760], [['RB', 'VBP', 'DT', 'NNS_advantag', 'NN'], 1, 1, 1.0, '1', 1761], [['RB', 'VBP', 'DT', 'NNS_advantag', 'NN', 'IN'], 1, 1, 1.0, '1', 1762], [['RB', 'VBP', 'DT', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 1763], [['RB', 'VBP', 'DT', 'NNS_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1764], [['RB', 'VBP', 'DT', 'NNS_advantag', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1765], [['RB', 'VBP', 'DT', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 1766], [['RB', 'VBP', 'DT', 'NN'], 1, 1, 1.0, '1', 1767], [['RB', 'VBP', 'DT', 'NN', 'IN'], 1, 1, 1.0, '1', 1768], [['RB', 'VBP', 'DT', 'IN'], 1, 1, 1.0, '1', 1769], [['RB', 'VBP', 'DT', 'IN', 'NN'], 1, 1, 1.0, '1', 1770], [['RB', 'VBP', 'DT', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1771], [['RB', 'VBP', 'DT', 'IN', 'IN'], 1, 1, 1.0, '1', 1772], [['RB', 'VBP', 'VBN'], 1, 1, 1.0, '0', 1773], [['RB', 'VBP', 'NN'], 1, 1, 1.0, '1', 1774], [['RB', 'VBP', 'NN', 'IN'], 1, 1, 1.0, '1', 1775], [['RB', 'VBP', 'IN'], 1, 1, 1.0, '1', 1776], [['RB', 'VBP', 'IN', 'NN'], 1, 1, 1.0, '1', 1777], [['RB', 'VBP', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1778], [['RB', 'VBP', 'IN', 'IN'], 1, 1, 1.0, '1', 1779], [['RB', 'RB'], 3, 3, 1.0, '1', 1780], [['RB', 'RB', 'IN_over'], 1, 1, 1.0, '1', 1781], [['RB', 'RB', 'IN_over', 'NN'], 1, 1, 1.0, '1', 1782], [['RB', 'RB', 'NN'], 2, 2, 1.0, '1', 1783], [['RB', 'RB', 'IN'], 2, 2, 1.0, '1', 1784], [['RB', 'RB', 'IN', 'IN_over'], 1, 1, 1.0, '1', 1785], [['RB', 'RB', 'IN', 'IN_over', 'NN'], 1, 1, 1.0, '1', 1786], [['RB', 'RB', 'IN', 'NN'], 2, 2, 1.0, '1', 1787], [['RB', 'IN'], 9, 8, 0.8888888888888888, '1', 1788], [['RB', 'IN', 'NN'], 6, 6, 1.0, '1', 1789], [['RB', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1790], [['RB', 'IN', 'IN_over'], 1, 1, 1.0, '1', 1791], [['RB', 'IN', 'IN_over', 'NN'], 1, 1, 1.0, '1', 1792], [['RB', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1793], [['RB', 'IN', 'IN'], 4, 3, 0.75, '1', 1794], [['RB', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1795], [['RB', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 1796], [['RB', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1797], [['RB', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1798], [['RB', 'IN', 'DT'], 2, 2, 1.0, '1', 1799], [['RB', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 1800], [['RB', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 1801], [['RB', 'IN', 'NNS'], 1, 1, 1.0, '0', 1802], [['RB', 'RB_well'], 3, 2, 0.6666666666666666, '1', 1803], [['RB', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 1804], [['RB', 'RB_well', 'NN'], 2, 2, 1.0, '1', 1805], [['RB', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 1806], [['RB', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1807], [['RB', 'RB_well', 'IN'], 3, 2, 0.6666666666666666, '1', 1808], [['RB', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 1809], [['RB', 'RB_well', 'IN', 'NN'], 2, 2, 1.0, '1', 1810], [['RB', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 1811], [['RB', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1812], [['RB', 'RB_well', 'IN', 'IN'], 3, 2, 0.6666666666666666, '1', 1813], [['RB', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1814], [['RB', 'RB_well', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 1815], [['RB', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1816], [['RB', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1817], [['RB', 'DT'], 3, 3, 1.0, '1', 1818], [['RB', 'DT', 'NNS_advantag'], 1, 1, 1.0, '1', 1819], [['RB', 'DT', 'NNS_advantag', 'NN'], 1, 1, 1.0, '1', 1820], [['RB', 'DT', 'NNS_advantag', 'NN', 'IN'], 1, 1, 1.0, '1', 1821], [['RB', 'DT', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 1822], [['RB', 'DT', 'NNS_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 1823], [['RB', 'DT', 'NNS_advantag', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1824], [['RB', 'DT', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 1825], [['RB', 'DT', 'NN'], 2, 2, 1.0, '1', 1826], [['RB', 'DT', 'NN', 'IN'], 1, 1, 1.0, '1', 1827], [['RB', 'DT', 'JJ'], 1, 1, 1.0, '1', 1828], [['RB', 'DT', 'IN'], 1, 1, 1.0, '1', 1829], [['RB', 'DT', 'IN', 'NN'], 1, 1, 1.0, '1', 1830], [['RB', 'DT', 'IN', 'NN', 'IN'], 1, 1, 1.0, '1', 1831], [['RB', 'DT', 'IN', 'IN'], 1, 1, 1.0, '1', 1832], [['RB', 'NNS'], 3, 2, 0.6666666666666666, '0', 1833], [['RB', 'NNS', 'MD'], 1, 1, 1.0, '1', 1834], [['RB', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 1835], [['RB', 'NNS', 'VB'], 1, 1, 1.0, '1', 1836], [['RB', 'NNS', 'VBP'], 1, 1, 1.0, '0', 1837], [['RB', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 1838], [['RB', 'NNS', 'VBN'], 1, 1, 1.0, '0', 1839], [['RB', 'VBN_compar'], 1, 1, 1.0, '1', 1840], [['RB', 'VBN_compar', 'DT'], 1, 1, 1.0, '1', 1841], [['RB', 'VBN_compar', 'DT', 'JJ'], 1, 1, 1.0, '1', 1842], [['RB', 'VBN_compar', 'JJ'], 1, 1, 1.0, '1', 1843], [['RB', 'VBN_compar', 'IN'], 1, 1, 1.0, '1', 1844], [['RB', 'VBN_compar', 'IN', 'DT'], 1, 1, 1.0, '1', 1845], [['RB', 'VBN_compar', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 1846], [['RB', 'VBN_compar', 'IN', 'JJ'], 1, 1, 1.0, '1', 1847], [['NNS'], 16, 13, 0.8125, '1', 1848], [['NNS', 'DT_both'], 1, 1, 1.0, '1', 1849], [['NNS', 'DT_both', 'NNS'], 1, 1, 1.0, '1', 1850], [['NNS', 'DT_both', 'VBG'], 1, 1, 1.0, '1', 1851], [['NNS', 'DT_both', 'VBG', 'NNS'], 1, 1, 1.0, '1', 1852], [['NNS', 'DT_both', 'NN'], 1, 1, 1.0, '1', 1853], [['NNS', 'DT_both', 'NN', 'NNS'], 1, 1, 1.0, '1', 1854], [['NNS', 'DT_both', 'NN', 'VBG'], 1, 1, 1.0, '1', 1855], [['NNS', 'DT_both', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 1856], [['NNS', 'VB'], 1, 1, 1.0, '1', 1857], [['NNS', 'VBG'], 2, 2, 1.0, '1', 1858], [['NNS', 'VBG', 'NNS'], 1, 1, 1.0, '1', 1859], [['NNS', 'RB'], 5, 4, 0.8, '1', 1860], [['NNS', 'RB', 'JJ'], 1, 1, 1.0, '0', 1861], [['NNS', 'RB', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1862], [['NNS', 'RB', 'NN'], 2, 2, 1.0, '1', 1863], [['NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 1864], [['NNS', 'RB', 'IN'], 3, 2, 0.6666666666666666, '1', 1865], [['NNS', 'RB', 'IN', 'NNS'], 1, 1, 1.0, '0', 1866], [['NNS', 'RB', 'IN', 'NN'], 2, 2, 1.0, '1', 1867], [['NNS', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '0', 1868], [['NNS', 'RB', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1869], [['NNS', 'RB', 'IN', 'IN'], 3, 2, 0.6666666666666666, '1', 1870], [['NNS', 'RB', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1871], [['NNS', 'RB', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 1872], [['NNS', 'RB', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1873], [['NNS', 'RB', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1874], [['NNS', 'RB', 'RB_well'], 3, 2, 0.6666666666666666, '1', 1875], [['NNS', 'RB', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 1876], [['NNS', 'RB', 'RB_well', 'NN'], 2, 2, 1.0, '1', 1877], [['NNS', 'RB', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 1878], [['NNS', 'RB', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1879], [['NNS', 'RB', 'RB_well', 'IN'], 3, 2, 0.6666666666666666, '1', 1880], [['NNS', 'RB', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 1881], [['NNS', 'RB', 'RB_well', 'IN', 'NN'], 2, 2, 1.0, '1', 1882], [['NNS', 'RB', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 1883], [['NNS', 'RB', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1884], [['NNS', 'RB', 'RB_well', 'IN', 'IN'], 3, 2, 0.6666666666666666, '1', 1885], [['NNS', 'RB', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1886], [['NNS', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 1887], [['NNS', 'RB', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1888], [['NNS', 'RB', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1889], [['NNS', 'RB', 'NNS'], 1, 1, 1.0, '0', 1890], [['NNS', 'NN'], 7, 6, 0.8571428571428571, '1', 1891], [['NNS', 'NN', 'VBG'], 2, 2, 1.0, '1', 1892], [['NNS', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 1893], [['NNS', 'NN', 'RB', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 1894], [['NNS', 'NN', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1895], [['NNS', 'NN', 'RB', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 1896], [['NNS', 'NN', 'RB', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1897], [['NNS', 'NN', 'RB', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 1898], [['NNS', 'NN', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1899], [['NNS', 'NN', 'RB', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 1900], [['NNS', 'NN', 'RB', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1901], [['NNS', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1902], [['NNS', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1903], [['NNS', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1904], [['NNS', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1905], [['NNS', 'NN', 'RB', 'NNS'], 1, 1, 1.0, '0', 1906], [['NNS', 'NN', 'RB', 'NN'], 1, 1, 1.0, '1', 1907], [['NNS', 'NN', 'RB', 'JJ'], 1, 1, 1.0, '0', 1908], [['NNS', 'NN', 'RB', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1909], [['NNS', 'NN', 'RB', 'IN', 'NNS'], 1, 1, 1.0, '0', 1910], [['NNS', 'NN', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1911], [['NNS', 'NN', 'RB', 'IN', 'JJ'], 1, 1, 1.0, '0', 1912], [['NNS', 'NN', 'RB', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1913], [['NNS', 'NN', 'RB', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1914], [['NNS', 'NN', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1915], [['NNS', 'NN', 'RB', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1916], [['NNS', 'NN', 'RB', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1917], [['NNS', 'NN', 'NN'], 2, 2, 1.0, '1', 1918], [['NNS', 'NN', 'IN_over'], 1, 1, 1.0, '1', 1919], [['NNS', 'NN', 'IN_over', 'NN'], 1, 1, 1.0, '1', 1920], [['NNS', 'NN', 'JJ'], 1, 1, 1.0, '0', 1921], [['NNS', 'NN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1922], [['NNS', 'NN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1923], [['NNS', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 1924], [['NNS', 'NN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1925], [['NNS', 'NN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1926], [['NNS', 'NN', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1927], [['NNS', 'NN', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1928], [['NNS', 'NN', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1929], [['NNS', 'NN', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1930], [['NNS', 'NN', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 1931], [['NNS', 'NN', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1932], [['NNS', 'NN', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 1933], [['NNS', 'NN', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1934], [['NNS', 'NN', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 1935], [['NNS', 'NN', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1936], [['NNS', 'NN', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 1937], [['NNS', 'NN', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1938], [['NNS', 'NN', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 1939], [['NNS', 'NN', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1940], [['NNS', 'NN', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 1941], [['NNS', 'NN', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 1942], [['NNS', 'MD'], 2, 2, 1.0, '1', 1943], [['NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 1944], [['NNS', 'CC'], 1, 1, 1.0, '1', 1945], [['NNS', 'CC', 'DT_both'], 1, 1, 1.0, '1', 1946], [['NNS', 'CC', 'DT_both', 'NNS'], 1, 1, 1.0, '1', 1947], [['NNS', 'CC', 'DT_both', 'VBG'], 1, 1, 1.0, '1', 1948], [['NNS', 'CC', 'DT_both', 'VBG', 'NNS'], 1, 1, 1.0, '1', 1949], [['NNS', 'CC', 'DT_both', 'NN'], 1, 1, 1.0, '1', 1950], [['NNS', 'CC', 'DT_both', 'NN', 'NNS'], 1, 1, 1.0, '1', 1951], [['NNS', 'CC', 'DT_both', 'NN', 'VBG'], 1, 1, 1.0, '1', 1952], [['NNS', 'CC', 'DT_both', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 1953], [['NNS', 'CC', 'VBG'], 1, 1, 1.0, '1', 1954], [['NNS', 'CC', 'VBG', 'NNS'], 1, 1, 1.0, '1', 1955], [['NNS', 'CC', 'NN'], 1, 1, 1.0, '1', 1956], [['NNS', 'CC', 'NN', 'NNS'], 1, 1, 1.0, '1', 1957], [['NNS', 'CC', 'NN', 'VBG'], 1, 1, 1.0, '1', 1958], [['NNS', 'CC', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 1959], [['NNS', 'CC', 'NNS'], 1, 1, 1.0, '1', 1960], [['NNS', 'IN_over'], 2, 2, 1.0, '1', 1961], [['NNS', 'IN_over', 'VBG'], 1, 1, 1.0, '1', 1962], [['NNS', 'IN_over', 'NN'], 2, 2, 1.0, '1', 1963], [['NNS', 'IN_over', 'NN', 'VBG'], 1, 1, 1.0, '1', 1964], [['NNS', 'IN_over', 'JJ'], 1, 1, 1.0, '1', 1965], [['NNS', 'IN_over', 'JJ', 'VBG'], 1, 1, 1.0, '1', 1966], [['NNS', 'IN_over', 'JJ', 'NN'], 1, 1, 1.0, '1', 1967], [['NNS', 'IN_over', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 1968], [['NNS', 'VBN', 'IN'], 1, 1, 1.0, '1', 1969], [['NNS', 'CD'], 1, 1, 1.0, '0', 1970], [['NNS', 'NNS_advantag'], 1, 1, 1.0, '1', 1971], [['NNS', 'NNS_advantag', 'NNS'], 1, 1, 1.0, '1', 1972], [['NNS', 'NNS_advantag', 'NNS', 'IN'], 1, 1, 1.0, '1', 1973], [['NNS', 'NNS_advantag', 'IN'], 1, 1, 1.0, '1', 1974], [['NNS', 'NNS_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 1975], [['NNS', 'NNS_advantag', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 1976], [['NNS', 'NNS_advantag', 'IN', 'IN'], 1, 1, 1.0, '1', 1977], [['NNS', 'VBP', 'RB_well'], 1, 1, 1.0, '1', 1978], [['NNS', 'VBP', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1979], [['NNS', 'VBP', 'RB_well', 'IN'], 1, 1, 1.0, '1', 1980], [['NNS', 'VBP', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1981], [['NNS', 'VBP', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 1982], [['NNS', 'VBP', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1983], [['NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 1984], [['NNS', 'VBP', 'RB'], 1, 1, 1.0, '1', 1985], [['NNS', 'VBP', 'RB', 'RB_well'], 1, 1, 1.0, '1', 1986], [['NNS', 'VBP', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1987], [['NNS', 'VBP', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '1', 1988], [['NNS', 'VBP', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 1989], [['NNS', 'VBP', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 1990], [['NNS', 'VBP', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1991], [['NNS', 'VBP', 'RB', 'NN'], 1, 1, 1.0, '1', 1992], [['NNS', 'VBP', 'RB', 'IN'], 1, 1, 1.0, '1', 1993], [['NNS', 'VBP', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 1994], [['NNS', 'VBP', 'RB', 'IN', 'IN'], 1, 1, 1.0, '1', 1995], [['NNS', 'VBP', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 1996], [['NNS', 'VBP', 'NN'], 1, 1, 1.0, '1', 1997], [['NNS', 'VBP', 'NN', 'RB_well'], 1, 1, 1.0, '1', 1998], [['NNS', 'VBP', 'NN', 'RB_well', 'NN'], 1, 1, 1.0, '1', 1999], [['NNS', 'VBP', 'NN', 'RB_well', 'IN'], 1, 1, 1.0, '1', 2000], [['NNS', 'VBP', 'NN', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 2001], [['NNS', 'VBP', 'NN', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 2002], [['NNS', 'VBP', 'NN', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 2003], [['NNS', 'VBP', 'NN', 'NN'], 1, 1, 1.0, '1', 2004], [['NNS', 'VBP', 'NN', 'RB'], 1, 1, 1.0, '1', 2005], [['NNS', 'VBP', 'NN', 'RB', 'RB_well'], 1, 1, 1.0, '1', 2006], [['NNS', 'VBP', 'NN', 'RB', 'RB_well', 'NN'], 1, 1, 1.0, '1', 2007], [['NNS', 'VBP', 'NN', 'RB', 'RB_well', 'IN'], 1, 1, 1.0, '1', 2008], [['NNS', 'VBP', 'NN', 'RB', 'RB_well', 'IN', 'NN'], 1, 1, 1.0, '1', 2009], [['NNS', 'VBP', 'NN', 'RB', 'RB_well', 'IN', 'IN'], 1, 1, 1.0, '1', 2010], [['NNS', 'VBP', 'NN', 'RB', 'RB_well', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 2011], [['NNS', 'VBP', 'NN', 'RB', 'NN'], 1, 1, 1.0, '1', 2012], [['NNS', 'VBP', 'NN', 'RB', 'IN'], 1, 1, 1.0, '1', 2013], [['NNS', 'VBP', 'NN', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 2014], [['NNS', 'VBP', 'NN', 'RB', 'IN', 'IN'], 1, 1, 1.0, '1', 2015], [['NNS', 'VBP', 'NN', 'RB', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 2016], [['NNS', 'VBP', 'NN', 'IN'], 1, 1, 1.0, '1', 2017], [['NNS', 'VBP', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 2018], [['NNS', 'VBP', 'NN', 'IN', 'IN'], 1, 1, 1.0, '1', 2019], [['NNS', 'VBP', 'NN', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 2020], [['NNS', 'VBP', 'IN'], 1, 1, 1.0, '1', 2021], [['NNS', 'VBP', 'IN', 'NN'], 1, 1, 1.0, '1', 2022], [['NNS', 'VBP', 'IN', 'IN'], 1, 1, 1.0, '1', 2023], [['NNS', 'VBP', 'IN', 'IN', 'NN'], 1, 1, 1.0, '1', 2024], [['NNS', 'JJ'], 3, 2, 0.6666666666666666, '1', 2025], [['NNS', 'JJ', 'VBG'], 1, 1, 1.0, '1', 2026], [['NNS', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2027], [['NNS', 'JJ', 'NN'], 2, 2, 1.0, '1', 2028], [['NNS', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 2029], [['NNS', 'IN'], 6, 5, 0.8333333333333334, '1', 2030], [['NNS', 'IN', 'IN_over'], 1, 1, 1.0, '1', 2031], [['NNS', 'IN', 'IN_over', 'NN'], 1, 1, 1.0, '1', 2032], [['NNS', 'IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 2033], [['NNS', 'IN', 'NN'], 3, 3, 1.0, '1', 2034], [['NNS', 'IN', 'NN', 'IN_over'], 1, 1, 1.0, '1', 2035], [['NNS', 'IN', 'NN', 'IN_over', 'NN'], 1, 1, 1.0, '1', 2036], [['NNS', 'IN', 'NN', 'NN'], 1, 1, 1.0, '1', 2037], [['NNS', 'IN', 'JJ'], 1, 1, 1.0, '0', 2038], [['NNS', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2039], [['NNS', 'IN', 'IN'], 4, 3, 0.75, '1', 2040], [['NNS', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 2041], [['NNS', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 2042], [['NNS', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 2043], [['NNS', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2044], [['NNS', 'RB_well'], 3, 2, 0.6666666666666666, '1', 2045], [['NNS', 'RB_well', 'NNS'], 1, 1, 1.0, '0', 2046], [['NNS', 'RB_well', 'NN'], 2, 2, 1.0, '1', 2047], [['NNS', 'RB_well', 'JJ'], 1, 1, 1.0, '0', 2048], [['NNS', 'RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2049], [['NNS', 'RB_well', 'IN'], 3, 2, 0.6666666666666666, '1', 2050], [['NNS', 'RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 2051], [['NNS', 'RB_well', 'IN', 'NN'], 2, 2, 1.0, '1', 2052], [['NNS', 'RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 2053], [['NNS', 'RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2054], [['NNS', 'RB_well', 'IN', 'IN'], 3, 2, 0.6666666666666666, '1', 2055], [['NNS', 'RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 2056], [['NNS', 'RB_well', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 2057], [['NNS', 'RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 2058], [['NNS', 'RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2059], [['NNS', 'DT'], 2, 2, 1.0, '1', 2060], [['NNS', 'DT', 'RB'], 1, 1, 1.0, '1', 2061], [['NNS', 'DT', 'NN'], 1, 1, 1.0, '1', 2062], [['NNS', 'DT', 'JJ'], 1, 1, 1.0, '1', 2063], [['NNS', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2064], [['NNS', 'VBP_domin'], 1, 1, 1.0, '1', 2065], [['NNS', 'VBP_domin', 'DT'], 1, 1, 1.0, '1', 2066], [['NNS', 'VBP_domin', 'DT', 'NN'], 1, 1, 1.0, '1', 2067], [['NNS', 'VBP_domin', 'DT', 'JJ'], 1, 1, 1.0, '1', 2068], [['NNS', 'VBP_domin', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2069], [['NNS', 'VBP_domin', 'NN'], 1, 1, 1.0, '1', 2070], [['NNS', 'VBP_domin', 'JJ'], 1, 1, 1.0, '1', 2071], [['NNS', 'VBP_domin', 'JJ', 'NN'], 1, 1, 1.0, '1', 2072], [['NNS', 'NNS'], 5, 3, 0.6, '1', 2073], [['NNS', 'NNS', 'DT_both'], 1, 1, 1.0, '1', 2074], [['NNS', 'NNS', 'DT_both', 'NNS'], 1, 1, 1.0, '1', 2075], [['NNS', 'NNS', 'DT_both', 'VBG'], 1, 1, 1.0, '1', 2076], [['NNS', 'NNS', 'DT_both', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2077], [['NNS', 'NNS', 'DT_both', 'NN'], 1, 1, 1.0, '1', 2078], [['NNS', 'NNS', 'DT_both', 'NN', 'NNS'], 1, 1, 1.0, '1', 2079], [['NNS', 'NNS', 'DT_both', 'NN', 'VBG'], 1, 1, 1.0, '1', 2080], [['NNS', 'NNS', 'DT_both', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2081], [['NNS', 'NNS', 'VBG'], 1, 1, 1.0, '1', 2082], [['NNS', 'NNS', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2083], [['NNS', 'NNS', 'NN'], 1, 1, 1.0, '1', 2084], [['NNS', 'NNS', 'NN', 'NNS'], 1, 1, 1.0, '1', 2085], [['NNS', 'NNS', 'NN', 'VBG'], 1, 1, 1.0, '1', 2086], [['NNS', 'NNS', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2087], [['NNS', 'NNS', 'CC'], 1, 1, 1.0, '1', 2088], [['NNS', 'NNS', 'CC', 'DT_both'], 1, 1, 1.0, '1', 2089], [['NNS', 'NNS', 'CC', 'DT_both', 'NNS'], 1, 1, 1.0, '1', 2090], [['NNS', 'NNS', 'CC', 'DT_both', 'VBG'], 1, 1, 1.0, '1', 2091], [['NNS', 'NNS', 'CC', 'DT_both', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2092], [['NNS', 'NNS', 'CC', 'DT_both', 'NN'], 1, 1, 1.0, '1', 2093], [['NNS', 'NNS', 'CC', 'DT_both', 'NN', 'NNS'], 1, 1, 1.0, '1', 2094], [['NNS', 'NNS', 'CC', 'DT_both', 'NN', 'VBG'], 1, 1, 1.0, '1', 2095], [['NNS', 'NNS', 'CC', 'DT_both', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2096], [['NNS', 'NNS', 'CC', 'VBG'], 1, 1, 1.0, '1', 2097], [['NNS', 'NNS', 'CC', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2098], [['NNS', 'NNS', 'CC', 'NN'], 1, 1, 1.0, '1', 2099], [['NNS', 'NNS', 'CC', 'NN', 'NNS'], 1, 1, 1.0, '1', 2100], [['NNS', 'NNS', 'CC', 'NN', 'VBG'], 1, 1, 1.0, '1', 2101], [['NNS', 'NNS', 'CC', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2102], [['NNS', 'NNS', 'CC', 'NNS'], 1, 1, 1.0, '1', 2103], [['NNS', 'NNS', 'CD'], 1, 1, 1.0, '0', 2104], [['NNS', 'NNS', 'IN'], 1, 1, 1.0, '1', 2105], [['NNS', 'NNS', 'NNS'], 1, 1, 1.0, '1', 2106], [['DT_both'], 1, 1, 1.0, '1', 2107], [['DT_both', 'NNS'], 1, 1, 1.0, '1', 2108], [['DT_both', 'VBG'], 1, 1, 1.0, '1', 2109], [['DT_both', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2110], [['DT_both', 'NN'], 1, 1, 1.0, '1', 2111], [['DT_both', 'NN', 'NNS'], 1, 1, 1.0, '1', 2112], [['DT_both', 'NN', 'VBG'], 1, 1, 1.0, '1', 2113], [['DT_both', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2114], [['VB'], 5, 5, 1.0, '1', 2115], [['VB', 'JJ'], 2, 2, 1.0, '1', 2116], [['VB', 'JJ', 'DT'], 1, 1, 1.0, '1', 2117], [['VB', 'JJ', 'DT', 'NN'], 1, 1, 1.0, '1', 2118], [['VB', 'JJ', 'NN'], 1, 1, 1.0, '1', 2119], [['VB', 'JJ', 'NN_advantag'], 1, 1, 1.0, '1', 2120], [['VB', 'JJ', 'NN_advantag', 'DT'], 1, 1, 1.0, '1', 2121], [['VB', 'JJ', 'NN_advantag', 'DT', 'NN'], 1, 1, 1.0, '1', 2122], [['VB', 'JJ', 'NN_advantag', 'NN'], 1, 1, 1.0, '1', 2123], [['VB', 'JJ', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 2124], [['VB', 'JJ', 'NN_advantag', 'IN', 'DT'], 1, 1, 1.0, '1', 2125], [['VB', 'JJ', 'NN_advantag', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 2126], [['VB', 'JJ', 'NN_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 2127], [['VB', 'JJ', 'IN'], 1, 1, 1.0, '1', 2128], [['VB', 'JJ', 'IN', 'DT'], 1, 1, 1.0, '1', 2129], [['VB', 'JJ', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 2130], [['VB', 'JJ', 'IN', 'NN'], 1, 1, 1.0, '1', 2131], [['VB', 'JJ_advantag'], 1, 1, 1.0, '1', 2132], [['VB', 'NN'], 1, 1, 1.0, '1', 2133], [['VB', 'NN_advantag'], 1, 1, 1.0, '1', 2134], [['VB', 'NN_advantag', 'DT'], 1, 1, 1.0, '1', 2135], [['VB', 'NN_advantag', 'DT', 'NN'], 1, 1, 1.0, '1', 2136], [['VB', 'NN_advantag', 'NN'], 1, 1, 1.0, '1', 2137], [['VB', 'NN_advantag', 'IN'], 1, 1, 1.0, '1', 2138], [['VB', 'NN_advantag', 'IN', 'DT'], 1, 1, 1.0, '1', 2139], [['VB', 'NN_advantag', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 2140], [['VB', 'NN_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 2141], [['VB', 'IN'], 2, 2, 1.0, '1', 2142], [['VB', 'IN', 'DT'], 1, 1, 1.0, '1', 2143], [['VB', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 2144], [['VB', 'IN', 'NN'], 1, 1, 1.0, '1', 2145], [['VB', 'DT'], 1, 1, 1.0, '1', 2146], [['VB', 'DT', 'NN'], 1, 1, 1.0, '1', 2147], [['JJ_advantag'], 1, 1, 1.0, '1', 2148], [['CC'], 1, 1, 1.0, '1', 2149], [['CC', 'DT_both'], 1, 1, 1.0, '1', 2150], [['CC', 'DT_both', 'NNS'], 1, 1, 1.0, '1', 2151], [['CC', 'DT_both', 'VBG'], 1, 1, 1.0, '1', 2152], [['CC', 'DT_both', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2153], [['CC', 'DT_both', 'NN'], 1, 1, 1.0, '1', 2154], [['CC', 'DT_both', 'NN', 'NNS'], 1, 1, 1.0, '1', 2155], [['CC', 'DT_both', 'NN', 'VBG'], 1, 1, 1.0, '1', 2156], [['CC', 'DT_both', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2157], [['CC', 'VBG'], 1, 1, 1.0, '1', 2158], [['CC', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2159], [['CC', 'NN'], 1, 1, 1.0, '1', 2160], [['CC', 'NN', 'NNS'], 1, 1, 1.0, '1', 2161], [['CC', 'NN', 'VBG'], 1, 1, 1.0, '1', 2162], [['CC', 'NN', 'VBG', 'NNS'], 1, 1, 1.0, '1', 2163], [['CC', 'NNS'], 1, 1, 1.0, '1', 2164], [['CD'], 3, 2, 0.6666666666666666, '1', 2165], [['CD', 'VB'], 1, 1, 1.0, '1', 2166], [['CD', 'VB', 'IN'], 1, 1, 1.0, '1', 2167], [['CD', 'JJ_compar'], 1, 1, 1.0, '1', 2168], [['CD', 'JJ_compar', 'TO'], 1, 1, 1.0, '1', 2169], [['CD', 'JJ_compar', 'TO', 'VB'], 1, 1, 1.0, '1', 2170], [['CD', 'JJ_compar', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 2171], [['CD', 'JJ_compar', 'TO', 'IN'], 1, 1, 1.0, '1', 2172], [['CD', 'JJ_compar', 'VB'], 1, 1, 1.0, '1', 2173], [['CD', 'JJ_compar', 'VB', 'IN'], 1, 1, 1.0, '1', 2174], [['CD', 'JJ_compar', 'IN'], 1, 1, 1.0, '1', 2175], [['CD', 'VBD'], 1, 1, 1.0, '1', 2176], [['CD', 'VBD', 'TO'], 1, 1, 1.0, '1', 2177], [['CD', 'VBD', 'TO', 'VB'], 1, 1, 1.0, '1', 2178], [['CD', 'VBD', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 2179], [['CD', 'VBD', 'TO', 'IN'], 1, 1, 1.0, '1', 2180], [['CD', 'VBD', 'VB'], 1, 1, 1.0, '1', 2181], [['CD', 'VBD', 'VB', 'IN'], 1, 1, 1.0, '1', 2182], [['CD', 'VBD', 'JJ_compar'], 1, 1, 1.0, '1', 2183], [['CD', 'VBD', 'JJ_compar', 'TO'], 1, 1, 1.0, '1', 2184], [['CD', 'VBD', 'JJ_compar', 'TO', 'VB'], 1, 1, 1.0, '1', 2185], [['CD', 'VBD', 'JJ_compar', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 2186], [['CD', 'VBD', 'JJ_compar', 'TO', 'IN'], 1, 1, 1.0, '1', 2187], [['CD', 'VBD', 'JJ_compar', 'VB'], 1, 1, 1.0, '1', 2188], [['CD', 'VBD', 'JJ_compar', 'VB', 'IN'], 1, 1, 1.0, '1', 2189], [['CD', 'VBD', 'JJ_compar', 'IN'], 1, 1, 1.0, '1', 2190], [['CD', 'VBD', 'RB'], 1, 1, 1.0, '1', 2191], [['CD', 'VBD', 'RB', 'TO'], 1, 1, 1.0, '1', 2192], [['CD', 'VBD', 'RB', 'TO', 'VB'], 1, 1, 1.0, '1', 2193], [['CD', 'VBD', 'RB', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 2194], [['CD', 'VBD', 'RB', 'TO', 'IN'], 1, 1, 1.0, '1', 2195], [['CD', 'VBD', 'RB', 'VB'], 1, 1, 1.0, '1', 2196], [['CD', 'VBD', 'RB', 'VB', 'IN'], 1, 1, 1.0, '1', 2197], [['CD', 'VBD', 'RB', 'JJ_compar'], 1, 1, 1.0, '1', 2198], [['CD', 'VBD', 'RB', 'JJ_compar', 'TO'], 1, 1, 1.0, '1', 2199], [['CD', 'VBD', 'RB', 'JJ_compar', 'TO', 'VB'], 1, 1, 1.0, '1', 2200], [['CD', 'VBD', 'RB', 'JJ_compar', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 2201], [['CD', 'VBD', 'RB', 'JJ_compar', 'TO', 'IN'], 1, 1, 1.0, '1', 2202], [['CD', 'VBD', 'RB', 'JJ_compar', 'VB'], 1, 1, 1.0, '1', 2203], [['CD', 'VBD', 'RB', 'JJ_compar', 'VB', 'IN'], 1, 1, 1.0, '1', 2204], [['CD', 'VBD', 'RB', 'JJ_compar', 'IN'], 1, 1, 1.0, '1', 2205], [['CD', 'VBD', 'RB', 'IN'], 1, 1, 1.0, '1', 2206], [['CD', 'VBD', 'IN'], 1, 1, 1.0, '1', 2207], [['CD', 'TO'], 1, 1, 1.0, '1', 2208], [['CD', 'TO', 'VB'], 1, 1, 1.0, '1', 2209], [['CD', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 2210], [['CD', 'TO', 'IN'], 1, 1, 1.0, '1', 2211], [['CD', 'RB'], 1, 1, 1.0, '1', 2212], [['CD', 'RB', 'TO'], 1, 1, 1.0, '1', 2213], [['CD', 'RB', 'TO', 'VB'], 1, 1, 1.0, '1', 2214], [['CD', 'RB', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 2215], [['CD', 'RB', 'TO', 'IN'], 1, 1, 1.0, '1', 2216], [['CD', 'RB', 'VB'], 1, 1, 1.0, '1', 2217], [['CD', 'RB', 'VB', 'IN'], 1, 1, 1.0, '1', 2218], [['CD', 'RB', 'JJ_compar'], 1, 1, 1.0, '1', 2219], [['CD', 'RB', 'JJ_compar', 'TO'], 1, 1, 1.0, '1', 2220], [['CD', 'RB', 'JJ_compar', 'TO', 'VB'], 1, 1, 1.0, '1', 2221], [['CD', 'RB', 'JJ_compar', 'TO', 'VB', 'IN'], 1, 1, 1.0, '1', 2222], [['CD', 'RB', 'JJ_compar', 'TO', 'IN'], 1, 1, 1.0, '1', 2223], [['CD', 'RB', 'JJ_compar', 'VB'], 1, 1, 1.0, '1', 2224], [['CD', 'RB', 'JJ_compar', 'VB', 'IN'], 1, 1, 1.0, '1', 2225], [['CD', 'RB', 'JJ_compar', 'IN'], 1, 1, 1.0, '1', 2226], [['CD', 'RB', 'IN'], 1, 1, 1.0, '1', 2227], [['CD', 'IN'], 1, 1, 1.0, '1', 2228], [['CD', 'NNS'], 1, 1, 1.0, '1', 2229], [['CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 2230], [['JJS_best'], 3, 2, 0.6666666666666666, '0', 2231], [['JJS_best', 'JJ'], 1, 1, 1.0, '1', 2232], [['JJS_best', 'JJ', 'NN'], 1, 1, 1.0, '1', 2233], [['JJS_best', 'VBN'], 2, 2, 1.0, '0', 2234], [['JJS_best', 'VBN', 'IN'], 2, 2, 1.0, '0', 2235], [['JJS_best', 'NN'], 3, 2, 0.6666666666666666, '0', 2236], [['JJS_best', 'NN', 'VBN'], 2, 2, 1.0, '0', 2237], [['JJS_best', 'NN', 'VBN', 'IN'], 2, 2, 1.0, '0', 2238], [['JJS_best', 'NN', 'IN'], 2, 2, 1.0, '0', 2239], [['JJS_best', 'IN'], 2, 2, 1.0, '0', 2240], [['NN_advantag'], 2, 2, 1.0, '1', 2241], [['NN_advantag', 'MD'], 1, 1, 1.0, '1', 2242], [['NN_advantag', 'DT'], 1, 1, 1.0, '1', 2243], [['NN_advantag', 'DT', 'NN'], 1, 1, 1.0, '1', 2244], [['NN_advantag', 'NNS'], 1, 1, 1.0, '1', 2245], [['NN_advantag', 'NNS', 'MD'], 1, 1, 1.0, '1', 2246], [['NN_advantag', 'NN'], 1, 1, 1.0, '1', 2247], [['NN_advantag', 'IN'], 2, 2, 1.0, '1', 2248], [['NN_advantag', 'IN', 'MD'], 1, 1, 1.0, '1', 2249], [['NN_advantag', 'IN', 'DT'], 1, 1, 1.0, '1', 2250], [['NN_advantag', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 2251], [['NN_advantag', 'IN', 'NNS'], 1, 1, 1.0, '1', 2252], [['NN_advantag', 'IN', 'NNS', 'MD'], 1, 1, 1.0, '1', 2253], [['NN_advantag', 'IN', 'NN'], 1, 1, 1.0, '1', 2254], [['IN'], 28, 22, 0.7857142857142857, '1', 2255], [['IN', 'JJ_improv'], 1, 1, 1.0, '1', 2256], [['IN', 'JJ_improv', 'NN'], 1, 1, 1.0, '1', 2257], [['IN', 'JJ_improv', 'NN', 'NN'], 1, 1, 1.0, '1', 2258], [['IN', 'JJ_improv', 'NN', 'IN'], 1, 1, 1.0, '1', 2259], [['IN', 'JJ_improv', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 2260], [['IN', 'JJ_improv', 'IN'], 1, 1, 1.0, '1', 2261], [['IN', 'JJ_improv', 'IN', 'NN'], 1, 1, 1.0, '1', 2262], [['IN', 'JJR_larger'], 1, 1, 1.0, '0', 2263], [['IN', 'JJR_larger', 'NNS'], 1, 1, 1.0, '0', 2264], [['IN', 'JJR_larger', 'NNS', 'NNS'], 1, 1, 1.0, '0', 2265], [['IN', 'JJR_larger', 'NNS', 'NNS', 'CD'], 1, 1, 1.0, '0', 2266], [['IN', 'JJR_larger', 'NNS', 'CD'], 1, 1, 1.0, '0', 2267], [['IN', 'JJR_larger', 'CD'], 1, 1, 1.0, '0', 2268], [['IN', 'VBG_match'], 1, 1, 1.0, '1', 2269], [['IN', 'VBG_match', 'NNS'], 1, 1, 1.0, '1', 2270], [['IN', 'VBG_match', 'NNS', 'RB'], 1, 1, 1.0, '1', 2271], [['IN', 'VBG_match', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 2272], [['IN', 'VBG_match', 'RB'], 1, 1, 1.0, '1', 2273], [['IN', 'VBG_match', 'RB', 'RB'], 1, 1, 1.0, '1', 2274], [['IN', 'VBN'], 2, 2, 1.0, '0', 2275], [['IN', 'VBN', 'NN'], 1, 1, 1.0, '0', 2276], [['IN', 'VBP'], 1, 1, 1.0, '0', 2277], [['IN', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2278], [['IN', 'JJ'], 9, 6, 0.6666666666666666, '1', 2279], [['IN', 'JJ', 'VBG_match'], 1, 1, 1.0, '1', 2280], [['IN', 'JJ', 'VBG_match', 'NNS'], 1, 1, 1.0, '1', 2281], [['IN', 'JJ', 'VBG_match', 'NNS', 'RB'], 1, 1, 1.0, '1', 2282], [['IN', 'JJ', 'VBG_match', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 2283], [['IN', 'JJ', 'VBG_match', 'RB'], 1, 1, 1.0, '1', 2284], [['IN', 'JJ', 'VBG_match', 'RB', 'RB'], 1, 1, 1.0, '1', 2285], [['IN', 'JJ', 'JJ', 'VBN'], 1, 1, 1.0, '0', 2286], [['IN', 'JJ', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 2287], [['IN', 'JJ', 'NN'], 5, 4, 0.8, '1', 2288], [['IN', 'JJ', 'NN', 'VBG_match'], 1, 1, 1.0, '1', 2289], [['IN', 'JJ', 'NN', 'VBG_match', 'NNS'], 1, 1, 1.0, '1', 2290], [['IN', 'JJ', 'NN', 'VBG_match', 'NNS', 'RB'], 1, 1, 1.0, '1', 2291], [['IN', 'JJ', 'NN', 'VBG_match', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 2292], [['IN', 'JJ', 'NN', 'VBG_match', 'RB'], 1, 1, 1.0, '1', 2293], [['IN', 'JJ', 'NN', 'VBG_match', 'RB', 'RB'], 1, 1, 1.0, '1', 2294], [['IN', 'JJ', 'NN', 'RB'], 1, 1, 1.0, '1', 2295], [['IN', 'JJ', 'NN', 'RB', 'RB'], 1, 1, 1.0, '1', 2296], [['IN', 'JJ', 'NN', 'NN'], 1, 1, 1.0, '0', 2297], [['IN', 'JJ', 'NN', 'IN_over'], 1, 1, 1.0, '0', 2298], [['IN', 'JJ', 'NN', 'IN_over', 'NN'], 1, 1, 1.0, '0', 2299], [['IN', 'JJ', 'NN', 'IN_over', 'VBN'], 1, 1, 1.0, '0', 2300], [['IN', 'JJ', 'NN', 'IN_over', 'VBN', 'NN'], 1, 1, 1.0, '0', 2301], [['IN', 'JJ', 'NN', 'IN_over', 'JJ'], 1, 1, 1.0, '0', 2302], [['IN', 'JJ', 'NN', 'IN_over', 'JJ', 'VBN'], 1, 1, 1.0, '0', 2303], [['IN', 'JJ', 'NN', 'IN_over', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 2304], [['IN', 'JJ', 'NN', 'IN_over', 'JJ', 'NN'], 1, 1, 1.0, '0', 2305], [['IN', 'JJ', 'NN', 'VBN'], 1, 1, 1.0, '0', 2306], [['IN', 'JJ', 'NN', 'VBN', 'NN'], 1, 1, 1.0, '0', 2307], [['IN', 'JJ', 'NN', 'JJ'], 1, 1, 1.0, '0', 2308], [['IN', 'JJ', 'NN', 'JJ', 'VBN'], 1, 1, 1.0, '0', 2309], [['IN', 'JJ', 'NN', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 2310], [['IN', 'JJ', 'NN', 'JJ', 'NN'], 1, 1, 1.0, '0', 2311], [['IN', 'JJ', 'NN', 'NNS'], 1, 1, 1.0, '1', 2312], [['IN', 'JJ', 'NN', 'NNS', 'RB'], 1, 1, 1.0, '1', 2313], [['IN', 'JJ', 'NN', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 2314], [['IN', 'JJ', 'JJR_smaller'], 1, 1, 1.0, '0', 2315], [['IN', 'JJ', 'JJR_smaller', 'VBP'], 1, 1, 1.0, '0', 2316], [['IN', 'JJ', 'JJR_smaller', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2317], [['IN', 'JJ', 'JJR_smaller', 'NNS'], 1, 1, 1.0, '0', 2318], [['IN', 'JJ', 'JJR_smaller', 'NNS', 'VBP'], 1, 1, 1.0, '0', 2319], [['IN', 'JJ', 'JJR_smaller', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2320], [['IN', 'JJ', 'JJR_smaller', 'NNS', 'VBN'], 1, 1, 1.0, '0', 2321], [['IN', 'JJ', 'JJR_smaller', 'VBN'], 1, 1, 1.0, '0', 2322], [['IN', 'JJ', 'VBP_domin'], 1, 1, 1.0, '1', 2323], [['IN', 'JJ', 'VBP_domin', 'DT'], 1, 1, 1.0, '1', 2324], [['IN', 'JJ', 'VBP_domin', 'DT', 'NN'], 1, 1, 1.0, '1', 2325], [['IN', 'JJ', 'VBP_domin', 'DT', 'JJ'], 1, 1, 1.0, '1', 2326], [['IN', 'JJ', 'VBP_domin', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2327], [['IN', 'JJ', 'VBP_domin', 'NN'], 1, 1, 1.0, '1', 2328], [['IN', 'JJ', 'VBP_domin', 'JJ'], 1, 1, 1.0, '1', 2329], [['IN', 'JJ', 'VBP_domin', 'JJ', 'NN'], 1, 1, 1.0, '1', 2330], [['IN', 'JJ', 'VBN'], 2, 2, 1.0, '0', 2331], [['IN', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 2332], [['IN', 'JJ', 'VBP'], 1, 1, 1.0, '0', 2333], [['IN', 'JJ', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2334], [['IN', 'JJ', 'RB', 'JJR_smaller'], 1, 1, 1.0, '0', 2335], [['IN', 'JJ', 'RB', 'JJR_smaller', 'VBP'], 1, 1, 1.0, '0', 2336], [['IN', 'JJ', 'RB', 'JJR_smaller', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2337], [['IN', 'JJ', 'RB', 'JJR_smaller', 'NNS'], 1, 1, 1.0, '0', 2338], [['IN', 'JJ', 'RB', 'JJR_smaller', 'NNS', 'VBP'], 1, 1, 1.0, '0', 2339], [['IN', 'JJ', 'RB', 'JJR_smaller', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2340], [['IN', 'JJ', 'RB', 'JJR_smaller', 'NNS', 'VBN'], 1, 1, 1.0, '0', 2341], [['IN', 'JJ', 'RB', 'JJR_smaller', 'VBN'], 1, 1, 1.0, '0', 2342], [['IN', 'JJ', 'RB', 'VBP'], 1, 1, 1.0, '0', 2343], [['IN', 'JJ', 'RB', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2344], [['IN', 'JJ', 'RB', 'NNS'], 1, 1, 1.0, '0', 2345], [['IN', 'JJ', 'RB', 'NNS', 'VBP'], 1, 1, 1.0, '0', 2346], [['IN', 'JJ', 'RB', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2347], [['IN', 'JJ', 'RB', 'NNS', 'VBN'], 1, 1, 1.0, '0', 2348], [['IN', 'JJ', 'RB', 'VBN'], 1, 1, 1.0, '0', 2349], [['IN', 'JJ', 'RB', 'RB'], 1, 1, 1.0, '1', 2350], [['IN', 'JJ', 'IN_over'], 1, 1, 1.0, '0', 2351], [['IN', 'JJ', 'IN_over', 'NN'], 1, 1, 1.0, '0', 2352], [['IN', 'JJ', 'IN_over', 'VBN'], 1, 1, 1.0, '0', 2353], [['IN', 'JJ', 'IN_over', 'VBN', 'NN'], 1, 1, 1.0, '0', 2354], [['IN', 'JJ', 'IN_over', 'JJ'], 1, 1, 1.0, '0', 2355], [['IN', 'JJ', 'IN_over', 'JJ', 'VBN'], 1, 1, 1.0, '0', 2356], [['IN', 'JJ', 'IN_over', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 2357], [['IN', 'JJ', 'IN_over', 'JJ', 'NN'], 1, 1, 1.0, '0', 2358], [['IN', 'JJ', 'DT'], 1, 1, 1.0, '1', 2359], [['IN', 'JJ', 'DT', 'NN'], 1, 1, 1.0, '1', 2360], [['IN', 'JJ', 'DT', 'JJ'], 1, 1, 1.0, '1', 2361], [['IN', 'JJ', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2362], [['IN', 'JJ', 'NNS', 'RB'], 1, 1, 1.0, '1', 2363], [['IN', 'JJ', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 2364], [['IN', 'JJ', 'NNS', 'NN'], 1, 1, 1.0, '1', 2365], [['IN', 'JJ', 'NNS', 'VBP_domin'], 1, 1, 1.0, '1', 2366], [['IN', 'JJ', 'NNS', 'VBP_domin', 'DT'], 1, 1, 1.0, '1', 2367], [['IN', 'JJ', 'NNS', 'VBP_domin', 'DT', 'NN'], 1, 1, 1.0, '1', 2368], [['IN', 'JJ', 'NNS', 'VBP_domin', 'DT', 'JJ'], 1, 1, 1.0, '1', 2369], [['IN', 'JJ', 'NNS', 'VBP_domin', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2370], [['IN', 'JJ', 'NNS', 'VBP_domin', 'NN'], 1, 1, 1.0, '1', 2371], [['IN', 'JJ', 'NNS', 'VBP_domin', 'JJ'], 1, 1, 1.0, '1', 2372], [['IN', 'JJ', 'NNS', 'VBP_domin', 'JJ', 'NN'], 1, 1, 1.0, '1', 2373], [['IN', 'JJ', 'NNS', 'VBN'], 1, 1, 1.0, '0', 2374], [['IN', 'JJ', 'NNS', 'VBP'], 1, 1, 1.0, '0', 2375], [['IN', 'JJ', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2376], [['IN', 'JJ', 'NNS', 'JJ'], 1, 1, 1.0, '1', 2377], [['IN', 'JJ', 'NNS', 'JJ', 'NN'], 1, 1, 1.0, '1', 2378], [['IN', 'JJ', 'NNS', 'DT'], 1, 1, 1.0, '1', 2379], [['IN', 'JJ', 'NNS', 'DT', 'NN'], 1, 1, 1.0, '1', 2380], [['IN', 'JJ', 'NNS', 'DT', 'JJ'], 1, 1, 1.0, '1', 2381], [['IN', 'JJ', 'NNS', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2382], [['IN', 'DT'], 7, 7, 1.0, '1', 2383], [['IN', 'DT', 'JJ_improv'], 1, 1, 1.0, '1', 2384], [['IN', 'DT', 'JJ_improv', 'NN'], 1, 1, 1.0, '1', 2385], [['IN', 'DT', 'JJ_improv', 'NN', 'NN'], 1, 1, 1.0, '1', 2386], [['IN', 'DT', 'JJ_improv', 'NN', 'IN'], 1, 1, 1.0, '1', 2387], [['IN', 'DT', 'JJ_improv', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 2388], [['IN', 'DT', 'JJ_improv', 'IN'], 1, 1, 1.0, '1', 2389], [['IN', 'DT', 'JJ_improv', 'IN', 'NN'], 1, 1, 1.0, '1', 2390], [['IN', 'DT', 'RB'], 1, 1, 1.0, '1', 2391], [['IN', 'DT', 'NN'], 4, 4, 1.0, '1', 2392], [['IN', 'DT', 'NN', 'NN'], 1, 1, 1.0, '1', 2393], [['IN', 'DT', 'NN', 'IN'], 1, 1, 1.0, '1', 2394], [['IN', 'DT', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 2395], [['IN', 'DT', 'JJS'], 1, 1, 1.0, '1', 2396], [['IN', 'DT', 'JJS_best'], 1, 1, 1.0, '1', 2397], [['IN', 'DT', 'JJS_best', 'NN'], 1, 1, 1.0, '1', 2398], [['IN', 'DT', 'JJS_best', 'JJ'], 1, 1, 1.0, '1', 2399], [['IN', 'DT', 'JJS_best', 'JJ', 'NN'], 1, 1, 1.0, '1', 2400], [['IN', 'DT', 'JJ'], 3, 3, 1.0, '1', 2401], [['IN', 'DT', 'JJ', 'NN'], 2, 2, 1.0, '1', 2402], [['IN', 'DT', 'IN'], 1, 1, 1.0, '1', 2403], [['IN', 'DT', 'IN', 'NN'], 1, 1, 1.0, '1', 2404], [['IN', 'NN'], 13, 12, 0.9230769230769231, '1', 2405], [['IN', 'NN', 'VBG_match'], 1, 1, 1.0, '1', 2406], [['IN', 'NN', 'VBG_match', 'NNS'], 1, 1, 1.0, '1', 2407], [['IN', 'NN', 'VBG_match', 'NNS', 'RB'], 1, 1, 1.0, '1', 2408], [['IN', 'NN', 'VBG_match', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 2409], [['IN', 'NN', 'VBG_match', 'RB'], 1, 1, 1.0, '1', 2410], [['IN', 'NN', 'VBG_match', 'RB', 'RB'], 1, 1, 1.0, '1', 2411], [['IN', 'NN', 'JJ'], 1, 1, 1.0, '0', 2412], [['IN', 'NN', 'JJ', 'VBN'], 1, 1, 1.0, '0', 2413], [['IN', 'NN', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 2414], [['IN', 'NN', 'JJ', 'NN'], 1, 1, 1.0, '0', 2415], [['IN', 'NN', 'NN'], 3, 2, 0.6666666666666666, '1', 2416], [['IN', 'NN', 'IN_over', 'JJ'], 1, 1, 1.0, '0', 2417], [['IN', 'NN', 'IN_over', 'JJ', 'VBN'], 1, 1, 1.0, '0', 2418], [['IN', 'NN', 'IN_over', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 2419], [['IN', 'NN', 'IN_over', 'JJ', 'NN'], 1, 1, 1.0, '0', 2420], [['IN', 'NN', 'IN_over', 'VBN'], 1, 1, 1.0, '0', 2421], [['IN', 'NN', 'IN_over', 'VBN', 'NN'], 1, 1, 1.0, '0', 2422], [['IN', 'NN', 'VBN'], 1, 1, 1.0, '0', 2423], [['IN', 'NN', 'VBN', 'NN'], 1, 1, 1.0, '0', 2424], [['IN', 'NN', 'RB'], 1, 1, 1.0, '1', 2425], [['IN', 'NN', 'RB', 'RB'], 1, 1, 1.0, '1', 2426], [['IN', 'NN', 'IN'], 2, 2, 1.0, '1', 2427], [['IN', 'NN', 'IN', 'NN'], 1, 1, 1.0, '1', 2428], [['IN', 'NN', 'NNS'], 1, 1, 1.0, '1', 2429], [['IN', 'NN', 'NNS', 'RB'], 1, 1, 1.0, '1', 2430], [['IN', 'NN', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 2431], [['IN', 'JJR_smaller'], 1, 1, 1.0, '0', 2432], [['IN', 'JJR_smaller', 'VBP'], 1, 1, 1.0, '0', 2433], [['IN', 'JJR_smaller', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2434], [['IN', 'JJR_smaller', 'NNS'], 1, 1, 1.0, '0', 2435], [['IN', 'JJR_smaller', 'NNS', 'VBP'], 1, 1, 1.0, '0', 2436], [['IN', 'JJR_smaller', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2437], [['IN', 'JJR_smaller', 'NNS', 'VBN'], 1, 1, 1.0, '0', 2438], [['IN', 'JJR_smaller', 'VBN'], 1, 1, 1.0, '0', 2439], [['IN', 'DT_all'], 2, 2, 1.0, '1', 2440], [['IN', 'DT_all', 'DT'], 1, 1, 1.0, '1', 2441], [['IN', 'DT_all', 'DT', 'RB'], 1, 1, 1.0, '1', 2442], [['IN', 'DT_all', 'NNS'], 2, 2, 1.0, '1', 2443], [['IN', 'DT_all', 'NNS', 'DT'], 1, 1, 1.0, '1', 2444], [['IN', 'DT_all', 'NNS', 'DT', 'RB'], 1, 1, 1.0, '1', 2445], [['IN', 'DT_all', 'NNS', 'NNS'], 1, 1, 1.0, '1', 2446], [['IN', 'DT_all', 'NNS', 'RB'], 1, 1, 1.0, '1', 2447], [['IN', 'DT_all', 'RB'], 1, 1, 1.0, '1', 2448], [['IN', 'DT_all', 'CD'], 1, 1, 1.0, '1', 2449], [['IN', 'DT_all', 'CD', 'NNS'], 1, 1, 1.0, '1', 2450], [['IN', 'DT_all', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 2451], [['IN', 'TO'], 1, 1, 1.0, '1', 2452], [['IN', 'TO', 'VB'], 1, 1, 1.0, '1', 2453], [['IN', 'TO', 'VB', 'JJ'], 1, 1, 1.0, '1', 2454], [['IN', 'TO', 'JJ'], 1, 1, 1.0, '1', 2455], [['IN', 'RB'], 4, 3, 0.75, '1', 2456], [['IN', 'RB', 'JJR_better'], 1, 1, 1.0, '1', 2457], [['IN', 'RB', 'JJR_better', 'MD'], 1, 1, 1.0, '1', 2458], [['IN', 'RB', 'JJR_better', 'MD', 'VB'], 1, 1, 1.0, '1', 2459], [['IN', 'RB', 'JJR_better', 'VB'], 1, 1, 1.0, '1', 2460], [['IN', 'RB', 'JJR_better', 'NNS'], 1, 1, 1.0, '1', 2461], [['IN', 'RB', 'JJR_better', 'NNS', 'MD'], 1, 1, 1.0, '1', 2462], [['IN', 'RB', 'JJR_better', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 2463], [['IN', 'RB', 'JJR_better', 'NNS', 'VB'], 1, 1, 1.0, '1', 2464], [['IN', 'RB', 'VB'], 1, 1, 1.0, '1', 2465], [['IN', 'RB', 'MD'], 1, 1, 1.0, '1', 2466], [['IN', 'RB', 'MD', 'VB'], 1, 1, 1.0, '1', 2467], [['IN', 'RB', 'JJR_smaller'], 1, 1, 1.0, '0', 2468], [['IN', 'RB', 'JJR_smaller', 'VBP'], 1, 1, 1.0, '0', 2469], [['IN', 'RB', 'JJR_smaller', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2470], [['IN', 'RB', 'JJR_smaller', 'NNS'], 1, 1, 1.0, '0', 2471], [['IN', 'RB', 'JJR_smaller', 'NNS', 'VBP'], 1, 1, 1.0, '0', 2472], [['IN', 'RB', 'JJR_smaller', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2473], [['IN', 'RB', 'JJR_smaller', 'NNS', 'VBN'], 1, 1, 1.0, '0', 2474], [['IN', 'RB', 'JJR_smaller', 'VBN'], 1, 1, 1.0, '0', 2475], [['IN', 'RB', 'VBN'], 1, 1, 1.0, '0', 2476], [['IN', 'RB', 'VBP'], 1, 1, 1.0, '0', 2477], [['IN', 'RB', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2478], [['IN', 'RB', 'RB'], 1, 1, 1.0, '1', 2479], [['IN', 'RB', 'NNS', 'MD'], 1, 1, 1.0, '1', 2480], [['IN', 'RB', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 2481], [['IN', 'RB', 'NNS', 'VB'], 1, 1, 1.0, '1', 2482], [['IN', 'RB', 'NNS', 'VBP'], 1, 1, 1.0, '0', 2483], [['IN', 'RB', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2484], [['IN', 'RB', 'NNS', 'VBN'], 1, 1, 1.0, '0', 2485], [['IN', 'NNS'], 10, 7, 0.7, '1', 2486], [['IN', 'NNS', 'MD'], 2, 2, 1.0, '1', 2487], [['IN', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 2488], [['IN', 'NNS', 'VB'], 1, 1, 1.0, '1', 2489], [['IN', 'NNS', 'JJ'], 1, 1, 1.0, '1', 2490], [['IN', 'NNS', 'JJ', 'NN'], 1, 1, 1.0, '1', 2491], [['IN', 'NNS', 'NN'], 1, 1, 1.0, '1', 2492], [['IN', 'NNS', 'VBP_domin'], 1, 1, 1.0, '1', 2493], [['IN', 'NNS', 'VBP_domin', 'DT'], 1, 1, 1.0, '1', 2494], [['IN', 'NNS', 'VBP_domin', 'DT', 'NN'], 1, 1, 1.0, '1', 2495], [['IN', 'NNS', 'VBP_domin', 'DT', 'JJ'], 1, 1, 1.0, '1', 2496], [['IN', 'NNS', 'VBP_domin', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2497], [['IN', 'NNS', 'VBP_domin', 'NN'], 1, 1, 1.0, '1', 2498], [['IN', 'NNS', 'VBP_domin', 'JJ'], 1, 1, 1.0, '1', 2499], [['IN', 'NNS', 'VBP_domin', 'JJ', 'NN'], 1, 1, 1.0, '1', 2500], [['IN', 'NNS', 'VBN'], 1, 1, 1.0, '0', 2501], [['IN', 'NNS', 'CD'], 1, 1, 1.0, '0', 2502], [['IN', 'NNS', 'VBP'], 1, 1, 1.0, '0', 2503], [['IN', 'NNS', 'VBP', 'VBN'], 1, 1, 1.0, '0', 2504], [['IN', 'NNS', 'RB'], 2, 2, 1.0, '1', 2505], [['IN', 'NNS', 'RB', 'RB'], 1, 1, 1.0, '1', 2506], [['IN', 'NNS', 'IN'], 1, 1, 1.0, '1', 2507], [['IN', 'NNS', 'DT'], 2, 2, 1.0, '1', 2508], [['IN', 'NNS', 'DT', 'RB'], 1, 1, 1.0, '1', 2509], [['IN', 'NNS', 'DT', 'NN'], 1, 1, 1.0, '1', 2510], [['IN', 'NNS', 'DT', 'JJ'], 1, 1, 1.0, '1', 2511], [['IN', 'NNS', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2512], [['IN', 'NNS', 'NNS', 'CD'], 1, 1, 1.0, '0', 2513], [['IN', 'JJR_better'], 1, 1, 1.0, '1', 2514], [['IN', 'JJR_better', 'MD'], 1, 1, 1.0, '1', 2515], [['IN', 'JJR_better', 'MD', 'VB'], 1, 1, 1.0, '1', 2516], [['IN', 'JJR_better', 'VB'], 1, 1, 1.0, '1', 2517], [['IN', 'JJR_better', 'NNS'], 1, 1, 1.0, '1', 2518], [['IN', 'JJR_better', 'NNS', 'MD'], 1, 1, 1.0, '1', 2519], [['IN', 'JJR_better', 'NNS', 'MD', 'VB'], 1, 1, 1.0, '1', 2520], [['IN', 'JJR_better', 'NNS', 'VB'], 1, 1, 1.0, '1', 2521], [['IN', 'VB'], 2, 2, 1.0, '1', 2522], [['IN', 'VB', 'JJ'], 1, 1, 1.0, '1', 2523], [['IN', 'NN_contrast'], 1, 1, 1.0, '1', 2524], [['IN', 'NN_contrast', 'TO'], 1, 1, 1.0, '1', 2525], [['IN', 'NN_contrast', 'TO', 'VB'], 1, 1, 1.0, '1', 2526], [['IN', 'NN_contrast', 'TO', 'VB', 'JJ'], 1, 1, 1.0, '1', 2527], [['IN', 'NN_contrast', 'TO', 'JJ'], 1, 1, 1.0, '1', 2528], [['IN', 'NN_contrast', 'VB'], 1, 1, 1.0, '1', 2529], [['IN', 'NN_contrast', 'VB', 'JJ'], 1, 1, 1.0, '1', 2530], [['IN', 'NN_contrast', 'JJ'], 1, 1, 1.0, '1', 2531], [['IN', 'CD', 'NNS'], 1, 1, 1.0, '1', 2532], [['IN', 'CD', 'NNS', 'NNS'], 1, 1, 1.0, '1', 2533], [['IN', 'JJS_best'], 1, 1, 1.0, '1', 2534], [['IN', 'JJS_best', 'NN'], 1, 1, 1.0, '1', 2535], [['IN', 'JJS_best', 'JJ'], 1, 1, 1.0, '1', 2536], [['IN', 'JJS_best', 'JJ', 'NN'], 1, 1, 1.0, '1', 2537], [['IN', 'IN'], 6, 5, 0.8333333333333334, '1', 2538], [['IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 2539], [['IN', 'IN', 'NN'], 3, 3, 1.0, '1', 2540], [['IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 2541], [['IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2542], [['IN', 'MD'], 2, 2, 1.0, '1', 2543], [['IN', 'MD', 'VB'], 1, 1, 1.0, '1', 2544], [['IN', 'IN_over'], 3, 2, 0.6666666666666666, '1', 2545], [['IN', 'IN_over', 'JJ'], 1, 1, 1.0, '0', 2546], [['IN', 'IN_over', 'JJ', 'VBN'], 1, 1, 1.0, '0', 2547], [['IN', 'IN_over', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 2548], [['IN', 'IN_over', 'JJ', 'NN'], 1, 1, 1.0, '0', 2549], [['IN', 'IN_over', 'NN'], 3, 2, 0.6666666666666666, '1', 2550], [['IN', 'IN_over', 'VBN'], 1, 1, 1.0, '0', 2551], [['IN', 'IN_over', 'VBN', 'NN'], 1, 1, 1.0, '0', 2552], [['IN', 'JJS'], 1, 1, 1.0, '1', 2553], [['IN', 'VBP_domin'], 1, 1, 1.0, '1', 2554], [['IN', 'VBP_domin', 'DT'], 1, 1, 1.0, '1', 2555], [['IN', 'VBP_domin', 'DT', 'NN'], 1, 1, 1.0, '1', 2556], [['IN', 'VBP_domin', 'DT', 'JJ'], 1, 1, 1.0, '1', 2557], [['IN', 'VBP_domin', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2558], [['IN', 'VBP_domin', 'NN'], 1, 1, 1.0, '1', 2559], [['IN', 'VBP_domin', 'JJ'], 1, 1, 1.0, '1', 2560], [['IN', 'VBP_domin', 'JJ', 'NN'], 1, 1, 1.0, '1', 2561], [['VB_fail'], 1, 1, 1.0, '1', 2562], [['VB_fail', 'NN'], 1, 1, 1.0, '1', 2563], [['VB_fail', 'RB'], 1, 1, 1.0, '1', 2564], [['VB_fail', 'RB', 'NN'], 1, 1, 1.0, '1', 2565], [['VB_fail', 'RB', 'IN'], 1, 1, 1.0, '1', 2566], [['VB_fail', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 2567], [['VB_fail', 'IN'], 1, 1, 1.0, '1', 2568], [['VB_fail', 'IN', 'NN'], 1, 1, 1.0, '1', 2569], [['MD'], 3, 3, 1.0, '1', 2570], [['MD', 'VB_fail'], 1, 1, 1.0, '1', 2571], [['MD', 'VB_fail', 'NN'], 1, 1, 1.0, '1', 2572], [['MD', 'VB_fail', 'RB'], 1, 1, 1.0, '1', 2573], [['MD', 'VB_fail', 'RB', 'NN'], 1, 1, 1.0, '1', 2574], [['MD', 'VB_fail', 'RB', 'IN'], 1, 1, 1.0, '1', 2575], [['MD', 'VB_fail', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 2576], [['MD', 'VB_fail', 'IN'], 1, 1, 1.0, '1', 2577], [['MD', 'VB_fail', 'IN', 'NN'], 1, 1, 1.0, '1', 2578], [['MD', 'VB'], 1, 1, 1.0, '1', 2579], [['MD', 'NN'], 1, 1, 1.0, '1', 2580], [['MD', 'RB'], 1, 1, 1.0, '1', 2581], [['MD', 'RB', 'VB_fail'], 1, 1, 1.0, '1', 2582], [['MD', 'RB', 'VB_fail', 'NN'], 1, 1, 1.0, '1', 2583], [['MD', 'RB', 'VB_fail', 'RB'], 1, 1, 1.0, '1', 2584], [['MD', 'RB', 'VB_fail', 'RB', 'NN'], 1, 1, 1.0, '1', 2585], [['MD', 'RB', 'VB_fail', 'RB', 'IN'], 1, 1, 1.0, '1', 2586], [['MD', 'RB', 'VB_fail', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 2587], [['MD', 'RB', 'VB_fail', 'IN'], 1, 1, 1.0, '1', 2588], [['MD', 'RB', 'VB_fail', 'IN', 'NN'], 1, 1, 1.0, '1', 2589], [['MD', 'RB', 'NN'], 1, 1, 1.0, '1', 2590], [['MD', 'RB', 'RB'], 1, 1, 1.0, '1', 2591], [['MD', 'RB', 'RB', 'NN'], 1, 1, 1.0, '1', 2592], [['MD', 'RB', 'RB', 'IN'], 1, 1, 1.0, '1', 2593], [['MD', 'RB', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 2594], [['MD', 'RB', 'IN'], 1, 1, 1.0, '1', 2595], [['MD', 'RB', 'IN', 'NN'], 1, 1, 1.0, '1', 2596], [['MD', 'IN'], 1, 1, 1.0, '1', 2597], [['MD', 'IN', 'NN'], 1, 1, 1.0, '1', 2598], [['IN_over'], 4, 3, 0.75, '1', 2599], [['IN_over', 'VBG'], 1, 1, 1.0, '1', 2600], [['IN_over', 'NN'], 4, 3, 0.75, '1', 2601], [['IN_over', 'NN', 'VBG'], 1, 1, 1.0, '1', 2602], [['IN_over', 'JJ', 'VBG'], 1, 1, 1.0, '1', 2603], [['IN_over', 'JJ', 'VBN'], 1, 1, 1.0, '0', 2604], [['IN_over', 'JJ', 'VBN', 'NN'], 1, 1, 1.0, '0', 2605], [['IN_over', 'JJ', 'NN', 'VBG'], 1, 1, 1.0, '1', 2606], [['IN_over', 'VBN'], 1, 1, 1.0, '0', 2607], [['IN_over', 'VBN', 'NN'], 1, 1, 1.0, '0', 2608], [['JJS'], 1, 1, 1.0, '1', 2609], [['JJR'], 1, 1, 1.0, '1', 2610], [['JJR', 'DT'], 1, 1, 1.0, '1', 2611], [['JJR', 'DT', 'JJS_best'], 1, 1, 1.0, '1', 2612], [['JJR', 'DT', 'JJS_best', 'NN'], 1, 1, 1.0, '1', 2613], [['JJR', 'DT', 'JJS_best', 'JJ'], 1, 1, 1.0, '1', 2614], [['JJR', 'DT', 'JJS_best', 'JJ', 'NN'], 1, 1, 1.0, '1', 2615], [['JJR', 'DT', 'NN'], 1, 1, 1.0, '1', 2616], [['JJR', 'DT', 'JJ'], 1, 1, 1.0, '1', 2617], [['JJR', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2618], [['JJR', 'JJS_best'], 1, 1, 1.0, '1', 2619], [['JJR', 'JJS_best', 'NN'], 1, 1, 1.0, '1', 2620], [['JJR', 'JJS_best', 'JJ'], 1, 1, 1.0, '1', 2621], [['JJR', 'JJS_best', 'JJ', 'NN'], 1, 1, 1.0, '1', 2622], [['JJR', 'NN'], 1, 1, 1.0, '1', 2623], [['JJR', 'JJ'], 1, 1, 1.0, '1', 2624], [['JJR', 'JJ', 'NN'], 1, 1, 1.0, '1', 2625], [['JJR', 'IN'], 1, 1, 1.0, '1', 2626], [['JJR', 'IN', 'DT'], 1, 1, 1.0, '1', 2627], [['JJR', 'IN', 'DT', 'JJS_best'], 1, 1, 1.0, '1', 2628], [['JJR', 'IN', 'DT', 'JJS_best', 'NN'], 1, 1, 1.0, '1', 2629], [['JJR', 'IN', 'DT', 'JJS_best', 'JJ'], 1, 1, 1.0, '1', 2630], [['JJR', 'IN', 'DT', 'JJS_best', 'JJ', 'NN'], 1, 1, 1.0, '1', 2631], [['JJR', 'IN', 'DT', 'NN'], 1, 1, 1.0, '1', 2632], [['JJR', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 2633], [['JJR', 'IN', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2634], [['JJR', 'IN', 'JJS_best'], 1, 1, 1.0, '1', 2635], [['JJR', 'IN', 'JJS_best', 'NN'], 1, 1, 1.0, '1', 2636], [['JJR', 'IN', 'JJS_best', 'JJ'], 1, 1, 1.0, '1', 2637], [['JJR', 'IN', 'JJS_best', 'JJ', 'NN'], 1, 1, 1.0, '1', 2638], [['JJR', 'IN', 'NN'], 1, 1, 1.0, '1', 2639], [['JJR', 'IN', 'JJ'], 1, 1, 1.0, '1', 2640], [['JJR', 'IN', 'JJ', 'NN'], 1, 1, 1.0, '1', 2641], [['VBP_domin'], 1, 1, 1.0, '1', 2642], [['VBP_domin', 'DT'], 1, 1, 1.0, '1', 2643], [['VBP_domin', 'DT', 'NN'], 1, 1, 1.0, '1', 2644], [['VBP_domin', 'DT', 'JJ'], 1, 1, 1.0, '1', 2645], [['VBP_domin', 'DT', 'JJ', 'NN'], 1, 1, 1.0, '1', 2646], [['VBP_domin', 'NN'], 1, 1, 1.0, '1', 2647], [['VBP_domin', 'JJ'], 1, 1, 1.0, '1', 2648], [['VBP_domin', 'JJ', 'NN'], 1, 1, 1.0, '1', 2649], [['RB_well'], 3, 2, 0.6666666666666666, '1', 2650], [['RB_well', 'NNS'], 1, 1, 1.0, '0', 2651], [['RB_well', 'NN'], 2, 2, 1.0, '1', 2652], [['RB_well', 'JJ'], 1, 1, 1.0, '0', 2653], [['RB_well', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2654], [['RB_well', 'IN'], 3, 2, 0.6666666666666666, '1', 2655], [['RB_well', 'IN', 'NNS'], 1, 1, 1.0, '0', 2656], [['RB_well', 'IN', 'NN'], 2, 2, 1.0, '1', 2657], [['RB_well', 'IN', 'JJ'], 1, 1, 1.0, '0', 2658], [['RB_well', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2659], [['RB_well', 'IN', 'IN'], 3, 2, 0.6666666666666666, '1', 2660], [['RB_well', 'IN', 'IN', 'NNS'], 1, 1, 1.0, '0', 2661], [['RB_well', 'IN', 'IN', 'NN'], 2, 2, 1.0, '1', 2662], [['RB_well', 'IN', 'IN', 'JJ'], 1, 1, 1.0, '0', 2663], [['RB_well', 'IN', 'IN', 'JJ', 'NNS'], 1, 1, 1.0, '0', 2664], [['VBN_compar'], 1, 1, 1.0, '1', 2665], [['VBN_compar', 'DT'], 1, 1, 1.0, '1', 2666], [['VBN_compar', 'DT', 'JJ'], 1, 1, 1.0, '1', 2667], [['VBN_compar', 'JJ'], 1, 1, 1.0, '1', 2668], [['VBN_compar', 'IN'], 1, 1, 1.0, '1', 2669], [['VBN_compar', 'IN', 'DT'], 1, 1, 1.0, '1', 2670], [['VBN_compar', 'IN', 'DT', 'JJ'], 1, 1, 1.0, '1', 2671], [['VBN_compar', 'IN', 'JJ'], 1, 1, 1.0, '1', 2672]]
MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True)
Abstract
[sentence]=Abstract
after reload the classifier, the predicted result=
['0']
We present a method that learns word embedding for Twitter sentiment classification in this paper.
[sentence]=We present a method that learns word embedding for Twitter sentiment classification in this paper.
after reload the classifier, the predicted result=
['0']
Most existing algorithms for learning continuous word representations typically only model the syntactic context of words but ignore the sentiment of text.
[sentence]=Most existing algorithms for learning continuous word representations typically only model the syntactic context of words but ignore the sentiment of text.
after reload the classifier, the predicted result=
['1']
This is problematic for sentiment analysis as they usually map words with similar syntactic context but opposite sentiment polarity, such as good and bad, to neighboring word vectors.
[sentence]=This is problematic for sentiment analysis as they usually map words with similar syntactic context but opposite sentiment polarity, such as good and bad, to neighboring word vectors.
after reload the classifier, the predicted result=
['1']
We address this issue by learning sentimentspecific word embedding (SSWE), which encodes sentiment information in the continuous representation of words.
[sentence]=We address this issue by learning sentimentspecific word embedding (SSWE), which encodes sentiment information in the continuous representation of words.
after reload the classifier, the predicted result=
['0']
Specifically, we develop three neural networks to effectively incorporate the supervision from sentiment polarity of text (e.g.
[sentence]=Specifically, we develop three neural networks to effectively incorporate the supervision from sentiment polarity of text (e.g.
after reload the classifier, the predicted result=
['0']
sentences or tweets) in their loss functions.
[sentence]=sentences or tweets) in their loss functions.
after reload the classifier, the predicted result=
['0']
To obtain large scale training corpora, we learn the sentiment-specific word embedding from massive distant-supervised tweets collected by positive and negative emoticons.
[sentence]=To obtain large scale training corpora, we learn the sentiment-specific word embedding from massive distant-supervised tweets collected by positive and negative emoticons.
after reload the classifier, the predicted result=
['1']
Experiments on applying SSWE to a benchmark Twitter sentiment classification dataset in SemEval 2013 show that (1) the SSWE feature performs comparably with hand-crafted features in the top-performed system; (2) the performance is further improved by concatenating SSWE with existing feature set.
[sentence]=Experiments on applying SSWE to a benchmark Twitter sentiment classification dataset in SemEval 2013 show that (1) the SSWE feature performs comparably with hand-crafted features in the top-performed system; (2) the performance is further improved by concatenating SSWE with existing feature set.
after reload the classifier, the predicted result=
['0']
1 Introduction
[sentence]=1 Introduction
after reload the classifier, the predicted result=
['1']
Twitter sentiment classification has attracted increasing research interest in recent years (Jiang et al., 2011; Hu et al., 2013).
[sentence]=Twitter sentiment classification has attracted increasing research interest in recent years (Jiang et al., 2011; Hu et al., 2013).
after reload the classifier, the predicted result=
['0']
The objective is to classify the sentiment polarity of a tweet as positivenegative or neutral.
[sentence]=The objective is to classify the sentiment polarity of a tweet as positivenegative or neutral.
after reload the classifier, the predicted result=
['0']
The majority of existing approaches follow Pang et al.
[sentence]=The majority of existing approaches follow Pang et al.
after reload the classifier, the predicted result=
['1']
(2002) and employ machine learning algorithms to build classifiers from tweets with manually annotated sentiment polarity.
[sentence]=(2002) and employ machine learning algorithms to build classifiers from tweets with manually annotated sentiment polarity.
after reload the classifier, the predicted result=
['0']
Under this direction, most studies focus on designing effective features to obtain better classification performance.
[sentence]=Under this direction, most studies focus on designing effective features to obtain better classification performance.
after reload the classifier, the predicted result=
['1']
For example, Mohammad et al.
[sentence]=For example, Mohammad et al.
after reload the classifier, the predicted result=
['0']
(2013) build the top-performed system in the Twitter sentiment classification track of SemEval 2013 (Nakov et al., 2013), using diverse sentiment lexicons and a variety of hand-crafted features.
[sentence]=(2013) build the top-performed system in the Twitter sentiment classification track of SemEval 2013 (Nakov et al., 2013), using diverse sentiment lexicons and a variety of hand-crafted features.
after reload the classifier, the predicted result=
['0']
Feature engineering is important but laborintensive.
[sentence]=Feature engineering is important but laborintensive.
after reload the classifier, the predicted result=
['0']
It is therefore desirable to discover explanatory factors from the data and make the learning algorithms less dependent on extensive feature engineering (Bengio, 2013).
[sentence]=It is therefore desirable to discover explanatory factors from the data and make the learning algorithms less dependent on extensive feature engineering (Bengio, 2013).
after reload the classifier, the predicted result=
['0']
For the task of sentiment classification, an effective feature learning method is to compose the representation of a sentence (or document) from the representations of the words or phrases it contains (Socher et al., 2013b; Yessenalina and Cardie, 2011).
[sentence]=For the task of sentiment classification, an effective feature learning method is to compose the representation of a sentence (or document) from the representations of the words or phrases it contains (Socher et al., 2013b; Yessenalina and Cardie, 2011).
after reload the classifier, the predicted result=
['0']
Accordingly, it is a crucial step to learn the word representation (or word embedding), which is a dense, low-dimensional and real-valued vector for a word.
[sentence]=Accordingly, it is a crucial step to learn the word representation (or word embedding), which is a dense, low-dimensional and real-valued vector for a word.
after reload the classifier, the predicted result=
['0']
Although existing word embedding learning algorithms (Collobert et al., 2011; Mikolov et al., 2013) are intuitive choices, they are not effective enough if directly used for sentiment classi- fication.
[sentence]=Although existing word embedding learning algorithms (Collobert et al., 2011; Mikolov et al., 2013) are intuitive choices, they are not effective enough if directly used for sentiment classi- fication.
after reload the classifier, the predicted result=
['0']
The most serious problem is that traditional methods typically model the syntactic context of words but ignore the sentiment information of text.
[sentence]=The most serious problem is that traditional methods typically model the syntactic context of words but ignore the sentiment information of text.
after reload the classifier, the predicted result=
['0']
As a result, words with opposite polarity, such as good and bad, are mapped into close vectors.
[sentence]=As a result, words with opposite polarity, such as good and bad, are mapped into close vectors.
after reload the classifier, the predicted result=
['0']
It is meaningful for some tasks such as pos-tagging (Zheng et al., 2013) as the two words have similar usages and grammatical roles, but it becomes a disaster for sentiment analysis as they have the opposite sentiment polarity.
[sentence]=It is meaningful for some tasks such as pos-tagging (Zheng et al., 2013) as the two words have similar usages and grammatical roles, but it becomes a disaster for sentiment analysis as they have the opposite sentiment polarity.
after reload the classifier, the predicted result=
['0']
In this paper, we propose learning sentimentspecific word embedding (SSWE) for sentiment analysis.
[sentence]=In this paper, we propose learning sentimentspecific word embedding (SSWE) for sentiment analysis.
after reload the classifier, the predicted result=
['0']
We encode the sentiment information in-to the continuous representation of words, so that it is able to separate good and bad to opposite ends of the spectrum.
[sentence]=We encode the sentiment information in-to the continuous representation of words, so that it is able to separate good and bad to opposite ends of the spectrum.
after reload the classifier, the predicted result=
['0']
To this end, we extend the existing word embedding learning algorithm (Collobert et al., 2011) and develop three neural networks to effectively incorporate the supervision from sentiment polarity of text (e.g.
[sentence]=To this end, we extend the existing word embedding learning algorithm (Collobert et al., 2011) and develop three neural networks to effectively incorporate the supervision from sentiment polarity of text (e.g.
after reload the classifier, the predicted result=
['0']
sentences or tweets) in their loss functions.
[sentence]=sentences or tweets) in their loss functions.
after reload the classifier, the predicted result=
['0']
We learn the sentiment-specific word embedding from tweets, leveraging massive tweets with emoticons as distant-supervised corpora without any manual annotations.
[sentence]=We learn the sentiment-specific word embedding from tweets, leveraging massive tweets with emoticons as distant-supervised corpora without any manual annotations.
after reload the classifier, the predicted result=
['0']
These automatically collected tweets contain noises so they cannot be directly used as gold training data to build sentiment classifiers, but they are effective enough to provide weakly supervised signals for training the sentimentspecific word embedding.
[sentence]=These automatically collected tweets contain noises so they cannot be directly used as gold training data to build sentiment classifiers, but they are effective enough to provide weakly supervised signals for training the sentimentspecific word embedding.
after reload the classifier, the predicted result=
['0']
We apply SSWE as features in a supervised learning framework for Twitter sentiment classi- fication, and evaluate it on the benchmark dataset in SemEval 2013.
[sentence]=We apply SSWE as features in a supervised learning framework for Twitter sentiment classi- fication, and evaluate it on the benchmark dataset in SemEval 2013.
after reload the classifier, the predicted result=
['0']
In the task of predicting positive/negative polarity of tweets, our method yields 84.89% in macro-F1 by only using SSWE as feature, which is comparable to the top-performed system based on hand-crafted features (84.70%).
[sentence]=In the task of predicting positive/negative polarity of tweets, our method yields 84.89% in macro-F1 by only using SSWE as feature, which is comparable to the top-performed system based on hand-crafted features (84.70%).
after reload the classifier, the predicted result=
['0']
After concatenating the SSWE feature with existing feature set, we push the state-of-the-art to 86.58% in macro-F1.
[sentence]=After concatenating the SSWE feature with existing feature set, we push the state-of-the-art to 86.58% in macro-F1.
after reload the classifier, the predicted result=
['0']
The quality of SSWE is also directly evaluated by measuring the word similarity in the embedding space for sentiment lexicons.
[sentence]=The quality of SSWE is also directly evaluated by measuring the word similarity in the embedding space for sentiment lexicons.
after reload the classifier, the predicted result=
['0']
In the accuracy of polarity consistency between each sentiment word and its top N closest words, SSWE outperforms existing word embedding learning algorithms.
[sentence]=In the accuracy of polarity consistency between each sentiment word and its top N closest words, SSWE outperforms existing word embedding learning algorithms.
after reload the classifier, the predicted result=
['0']
The major contributions of the work presented in this paper are as follows.
[sentence]=The major contributions of the work presented in this paper are as follows.
after reload the classifier, the predicted result=
['0']
We develop three neural networks to learn sentiment-specific word embedding (SSWE) from massive distant-supervised tweets without any manual annotations;
[sentence]=We develop three neural networks to learn sentiment-specific word embedding (SSWE) from massive distant-supervised tweets without any manual annotations;
after reload the classifier, the predicted result=
['0']
To our knowledge, this is the first work that exploits word embedding for Twitter sentiment classification.
[sentence]=To our knowledge, this is the first work that exploits word embedding for Twitter sentiment classification.
after reload the classifier, the predicted result=
['0']
We report the results that the SSWE feature performs comparably with hand-crafted features in the top-performed system in SemEval 2013;
[sentence]=We report the results that the SSWE feature performs comparably with hand-crafted features in the top-performed system in SemEval 2013;
after reload the classifier, the predicted result=
['0']
We release the sentiment-specific word embedding learned from 10 million tweets, which can be adopted off-the-shell in other sentiment analysis tasks.
[sentence]=We release the sentiment-specific word embedding learned from 10 million tweets, which can be adopted off-the-shell in other sentiment analysis tasks.
after reload the classifier, the predicted result=
['0']
2 Related Work
[sentence]=2 Related Work
after reload the classifier, the predicted result=
['0']
In this section, we present a brief review of the related work from two perspectives, Twitter sentiment classification and learning continuous representations for sentiment classification.
[sentence]=In this section, we present a brief review of the related work from two perspectives, Twitter sentiment classification and learning continuous representations for sentiment classification.
after reload the classifier, the predicted result=
['0']
2.1 Twitter Sentiment Classification
[sentence]=2.1 Twitter Sentiment Classification
after reload the classifier, the predicted result=
['0']
Twitter sentiment classification, which identifies the sentiment polarity of short, informal tweets, has attracted increasing research interest (Jiang et al., 2011; Hu et al., 2013) in recent years.
[sentence]=Twitter sentiment classification, which identifies the sentiment polarity of short, informal tweets, has attracted increasing research interest (Jiang et al., 2011; Hu et al., 2013) in recent years.
after reload the classifier, the predicted result=
['0']
Generally, the methods employed in Twitter sentiment classification follow traditional sentiment classifi- cation approaches.
[sentence]=Generally, the methods employed in Twitter sentiment classification follow traditional sentiment classifi- cation approaches.
after reload the classifier, the predicted result=
['0']
The lexicon-based approaches (Turney, 2002; Ding et al., 2008; Taboada et al., 2011; Thelwall et al., 2012) mostly use a dictionary of sentiment words with their associated sentiment polarity, and incorporate negation and intensification to compute the sentiment polarity for each sentence (or document).
[sentence]=The lexicon-based approaches (Turney, 2002; Ding et al., 2008; Taboada et al., 2011; Thelwall et al., 2012) mostly use a dictionary of sentiment words with their associated sentiment polarity, and incorporate negation and intensification to compute the sentiment polarity for each sentence (or document).
after reload the classifier, the predicted result=
['0']
The learning based methods for Twitter sentiment classification follow Pang et al.
[sentence]=The learning based methods for Twitter sentiment classification follow Pang et al.
after reload the classifier, the predicted result=
['0']
(2002)s work, which treat sentiment classification of texts as a special case of text categorization issue.
[sentence]=(2002)s work, which treat sentiment classification of texts as a special case of text categorization issue.
after reload the classifier, the predicted result=
['0']
Many studies on Twitter sentiment classification (Pak and Paroubek, 2010; Davidov et al., 2010; Barbosa and Feng, 2010; Kouloumpis et al., 2011; Zhao et al., 2012) leverage massive noisy-labeled tweets selected by positive and negative emoticons as training set and build sentiment classifiers directly, which is called distant supervision (Go et al., 2009).
[sentence]=Many studies on Twitter sentiment classification (Pak and Paroubek, 2010; Davidov et al., 2010; Barbosa and Feng, 2010; Kouloumpis et al., 2011; Zhao et al., 2012) leverage massive noisy-labeled tweets selected by positive and negative emoticons as training set and build sentiment classifiers directly, which is called distant supervision (Go et al., 2009).
after reload the classifier, the predicted result=
['0']
Instead of directly using the distantsupervised data as training set, Liu et al.
[sentence]=Instead of directly using the distantsupervised data as training set, Liu et al.
after reload the classifier, the predicted result=
['0']
(2012) adopt the tweets with emoticons to smooth the language model and Hu et al.
[sentence]=(2012) adopt the tweets with emoticons to smooth the language model and Hu et al.
after reload the classifier, the predicted result=
['0']
(2013) incorporate the emotional signals into an unsupervised learning framework for Twitter sentiment classification.
[sentence]=(2013) incorporate the emotional signals into an unsupervised learning framework for Twitter sentiment classification.
after reload the classifier, the predicted result=
['0']
Many existing learning based methods on Twitter sentiment classification focus on feature engineering.
[sentence]=Many existing learning based methods on Twitter sentiment classification focus on feature engineering.
after reload the classifier, the predicted result=
['0']
The reason is that the performance of sentiment classifier being heavily dependent on the choice of feature representation of tweets.
[sentence]=The reason is that the performance of sentiment classifier being heavily dependent on the choice of feature representation of tweets.
after reload the classifier, the predicted result=
['0']
The most representative system is introduced by Mohammad et al.
[sentence]=The most representative system is introduced by Mohammad et al.
after reload the classifier, the predicted result=
['0']
(2013), which is the state-of-theart system (the top-performed system in SemEval 2013 Twitter Sentiment Classification Track) by implementing a number of hand-crafted features.
[sentence]=(2013), which is the state-of-theart system (the top-performed system in SemEval 2013 Twitter Sentiment Classification Track) by implementing a number of hand-crafted features.
after reload the classifier, the predicted result=
['0']
Unlike the previous studies, we focus on learning discriminative features automatically from massive distant-supervised tweets.
[sentence]=Unlike the previous studies, we focus on learning discriminative features automatically from massive distant-supervised tweets.
after reload the classifier, the predicted result=
['0']
2.2 Learning Continuous Representations for Sentiment Classification
[sentence]=2.2 Learning Continuous Representations for Sentiment Classification
after reload the classifier, the predicted result=
['0']
Pang et al.
[sentence]=Pang et al.
after reload the classifier, the predicted result=
['0']
(2002) pioneer this field by using bagof-word representation, representing each word as a one-hot vector.
[sentence]=(2002) pioneer this field by using bagof-word representation, representing each word as a one-hot vector.
after reload the classifier, the predicted result=
['0']
It has the same length as the size of the vocabulary, and only one dimension is 1, with all others being 0.
[sentence]=It has the same length as the size of the vocabulary, and only one dimension is 1, with all others being 0.
after reload the classifier, the predicted result=
['0']
Under this assumption, many feature learning algorithms are proposed to obtain better classification performance (Pang and Lee, 2008; Liu, 2012; Feldman, 2013).
[sentence]=Under this assumption, many feature learning algorithms are proposed to obtain better classification performance (Pang and Lee, 2008; Liu, 2012; Feldman, 2013).
after reload the classifier, the predicted result=
['1']
However, the one-hot word representation cannot sufficiently capture the complex linguistic characteristics of words.
[sentence]=However, the one-hot word representation cannot sufficiently capture the complex linguistic characteristics of words.
after reload the classifier, the predicted result=
['1']
With the revival of interest in deep learning (Bengio et al., 2013), incorporating the continuous representation of a word as features has been proving effective in a variety of NLP tasks, such as parsing (Socher et al., 2013a), language modeling (Bengio et al., 2003; Mnih and Hinton, 2009) and NER (Turian et al., 2010).
[sentence]=With the revival of interest in deep learning (Bengio et al., 2013), incorporating the continuous representation of a word as features has been proving effective in a variety of NLP tasks, such as parsing (Socher et al., 2013a), language modeling (Bengio et al., 2003; Mnih and Hinton, 2009) and NER (Turian et al., 2010).
after reload the classifier, the predicted result=
['0']
In the field of sentiment analysis, Bespalov et al.
[sentence]=In the field of sentiment analysis, Bespalov et al.
after reload the classifier, the predicted result=
['0']
(2011; 2012) initialize the word embedding by Latent Semantic Analysis and further represent each document as the linear weighted of ngram vectors for sentiment classification.
[sentence]=(2011; 2012) initialize the word embedding by Latent Semantic Analysis and further represent each document as the linear weighted of ngram vectors for sentiment classification.
after reload the classifier, the predicted result=
['0']
Yessenalina and Cardie (2011) model each word as a matrix and combine words using iterated matrix multiplication.
[sentence]=Yessenalina and Cardie (2011) model each word as a matrix and combine words using iterated matrix multiplication.
after reload the classifier, the predicted result=
['0']
Glorot et al.
[sentence]=Glorot et al.
after reload the classifier, the predicted result=
['0']
(2011) explore Stacked Denoising Autoencoders for domain adaptation in sentiment classification.
[sentence]=(2011) explore Stacked Denoising Autoencoders for domain adaptation in sentiment classification.
after reload the classifier, the predicted result=
['0']
Socher et al.
[sentence]=Socher et al.
after reload the classifier, the predicted result=
['0']
propose Recursive Neural Network (RNN) (2011b), matrixvector RNN (2012) and Recursive Neural Tensor Network (RNTN) (2013b) to learn the compositionality of phrases of any length based on the representation of each pair of children recursively.
[sentence]=propose Recursive Neural Network (RNN) (2011b), matrixvector RNN (2012) and Recursive Neural Tensor Network (RNTN) (2013b) to learn the compositionality of phrases of any length based on the representation of each pair of children recursively.
after reload the classifier, the predicted result=
['0']
Hermann et al.
[sentence]=Hermann et al.
after reload the classifier, the predicted result=
['0']
(2013) present Combinatory Categorial Autoencoders to learn the compositionality of sentence, which marries the Combinatory Categorial Grammar with Recursive Autoencoder.
[sentence]=(2013) present Combinatory Categorial Autoencoders to learn the compositionality of sentence, which marries the Combinatory Categorial Grammar with Recursive Autoencoder.
after reload the classifier, the predicted result=
['0']
The representation of words heavily relies on the applications or tasks in which it is used (Labutov and Lipson, 2013).
[sentence]=The representation of words heavily relies on the applications or tasks in which it is used (Labutov and Lipson, 2013).
after reload the classifier, the predicted result=
['0']
This paper focuses on learning sentiment-specific word embedding, which is tailored for sentiment analysis.
[sentence]=This paper focuses on learning sentiment-specific word embedding, which is tailored for sentiment analysis.
after reload the classifier, the predicted result=
['0']
Unlike Maas et al.
[sentence]=Unlike Maas et al.
after reload the classifier, the predicted result=
['0']
(2011) that follow the probabilistic document model (Blei et al., 2003) and give an sentiment predictor function to each word, we develop neural networks and map each ngram to the sentiment polarity of sentence.
[sentence]=(2011) that follow the probabilistic document model (Blei et al., 2003) and give an sentiment predictor function to each word, we develop neural networks and map each ngram to the sentiment polarity of sentence.
after reload the classifier, the predicted result=
['0']
Unlike Socher et al.
[sentence]=Unlike Socher et al.
after reload the classifier, the predicted result=
['0']
(2011c) that utilize manually labeled texts to learn the meaning of phrase (or sentence) through compositionality, we focus on learning the meaning of word, namely word embedding, from massive distant-supervised tweets.
[sentence]=(2011c) that utilize manually labeled texts to learn the meaning of phrase (or sentence) through compositionality, we focus on learning the meaning of word, namely word embedding, from massive distant-supervised tweets.
after reload the classifier, the predicted result=
['0']
Unlike Labutov and Lipson (2013) that produce task-specific embedding from an existing word embedding, we learn sentiment-specific word embedding from scratch.
[sentence]=Unlike Labutov and Lipson (2013) that produce task-specific embedding from an existing word embedding, we learn sentiment-specific word embedding from scratch.
after reload the classifier, the predicted result=
['0']
3 Sentiment-Specific Word Embedding
[sentence]=3 Sentiment-Specific Word Embedding
after reload the classifier, the predicted result=
['0']
for Twitter Sentiment Classification In this section, we present the details of learning sentiment-specific word embedding (SSWE) for Twitter sentiment classification.
[sentence]=for Twitter Sentiment Classification In this section, we present the details of learning sentiment-specific word embedding (SSWE) for Twitter sentiment classification.
after reload the classifier, the predicted result=
['0']
We propose incorporating the sentiment information of sentences to learn continuous representations for words and phrases.
[sentence]=We propose incorporating the sentiment information of sentences to learn continuous representations for words and phrases.
after reload the classifier, the predicted result=
['0']
We extend the existing word embedding learning algorithm (Collobert et al., 2011) and develop three neural networks to learn SSWE.
[sentence]=We extend the existing word embedding learning algorithm (Collobert et al., 2011) and develop three neural networks to learn SSWE.
after reload the classifier, the predicted result=
['0']
In the following sections, we introduce the traditional method before presenting the details of SSWE learning algorithms.
[sentence]=In the following sections, we introduce the traditional method before presenting the details of SSWE learning algorithms.
after reload the classifier, the predicted result=
['0']
We then describe the use of SSWE in a supervised learning framework for Twitter sentiment classification.
[sentence]=We then describe the use of SSWE in a supervised learning framework for Twitter sentiment classification.
after reload the classifier, the predicted result=
['0']
3.1 C&W Model
[sentence]=3.1 C&W Model
after reload the classifier, the predicted result=
['0']
Collobert et al.
[sentence]=Collobert et al.
after reload the classifier, the predicted result=
['0']
(2011) introduce C&W model to learn word embedding based on the syntactic contexts of words.
[sentence]=(2011) introduce C&W model to learn word embedding based on the syntactic contexts of words.
after reload the classifier, the predicted result=
['0']
Given an ngram cat chills on a mat, C&W replaces the center word with a random word w r and derives a corrupted ngram cat chills w r a mat.
[sentence]=Given an ngram cat chills on a mat, C&W replaces the center word with a random word w r and derives a corrupted ngram cat chills w r a mat.
after reload the classifier, the predicted result=
['0']
The training objective is that the original ngram is expected to obtain a higher language model score than the corrupted ngram by a margin of 1.
[sentence]=The training objective is that the original ngram is expected to obtain a higher language model score than the corrupted ngram by a margin of 1.
after reload the classifier, the predicted result=
['0']
The ranking objective function can be optimized by a hinge loss, losscw(t, tr ) = max(0, 1  f cw(t) + f cw(t r )) (1) where t is the original ngram, t r is the corrupted ngram, f cw() is a one-dimensional scalar representing the language model score of the input ngram.
[sentence]=The ranking objective function can be optimized by a hinge loss, losscw(t, tr ) = max(0, 1  f cw(t) + f cw(t r )) (1) where t is the original ngram, t r is the corrupted ngram, f cw() is a one-dimensional scalar representing the language model score of the input ngram.
after reload the classifier, the predicted result=
['0']
Figure 1(a) illustrates the neural architecture of C&W, which consists of four layers, namely lookup  linear  hT anh  linear (from bottom to top).
[sentence]=Figure 1(a) illustrates the neural architecture of C&W, which consists of four layers, namely lookup  linear  hT anh  linear (from bottom to top).
after reload the classifier, the predicted result=
['0']
The original and corrupted ngrams are treated as inputs of the feed-forward neural network, respectively.
[sentence]=The original and corrupted ngrams are treated as inputs of the feed-forward neural network, respectively.
after reload the classifier, the predicted result=
['0']
The output f cw is the language model score of the input, which is calculated as given in Equation 2, where L is the lookup table of word embedding, w1, w2, b1, b2 are the parameters of linear layers.
[sentence]=The output f cw is the language model score of the input, which is calculated as given in Equation 2, where L is the lookup table of word embedding, w1, w2, b1, b2 are the parameters of linear layers.
after reload the classifier, the predicted result=
['0']
f cw(t) = w2(a) + b2 a = hT anh(w1Lt + b1) (3) hT anh(x) =    1 if x < 1 x if  1  x  1 1 if x > 1 (4)
[sentence]=f cw(t) = w2(a) + b2 a = hT anh(w1Lt + b1) (3) hT anh(x) =    1 if x < 1 x if  1  x  1 1 if x > 1 (4)
after reload the classifier, the predicted result=
['0']
3.2 Sentiment-Specific Word Embedding
[sentence]=3.2 Sentiment-Specific Word Embedding
after reload the classifier, the predicted result=
['0']
Following the traditional C&W model (Collobert et al., 2011), we incorporate the sentiment information into the neural network to learn sentimentspecific word embedding.
[sentence]=Following the traditional C&W model (Collobert et al., 2011), we incorporate the sentiment information into the neural network to learn sentimentspecific word embedding.
after reload the classifier, the predicted result=
['0']
We develop three neural networks with different strategies to integrate the sentiment information of tweets.
[sentence]=We develop three neural networks with different strategies to integrate the sentiment information of tweets.
after reload the classifier, the predicted result=
['0']
Basic Model 1 (SSWEh).
[sentence]=Basic Model 1 (SSWEh).
after reload the classifier, the predicted result=
['0']
As an unsupervised approach, C&W model does not explicitly capture the sentiment information of texts.
[sentence]=As an unsupervised approach, C&W model does not explicitly capture the sentiment information of texts.
after reload the classifier, the predicted result=
['0']
An intuitive solution to integrate the sentiment information is predicting the sentiment distribution of text based on input ngram.
[sentence]=An intuitive solution to integrate the sentiment information is predicting the sentiment distribution of text based on input ngram.
after reload the classifier, the predicted result=
['0']
We do not utilize the entire sentence as input because the length of different sentences might be variant.
[sentence]=We do not utilize the entire sentence as input because the length of different sentences might be variant.
after reload the classifier, the predicted result=
['0']
We therefore slide the window of ngram across a sentence, and then predict the sentiment polarity based on each ngram with a shared neural network.
[sentence]=We therefore slide the window of ngram across a sentence, and then predict the sentiment polarity based on each ngram with a shared neural network.
after reload the classifier, the predicted result=
['0']
In the neural network, the distributed representation of higher layer are interpreted as features describing the input.
[sentence]=In the neural network, the distributed representation of higher layer are interpreted as features describing the input.
after reload the classifier, the predicted result=
['0']
Thus, we utilize the continuous vector of top layer to predict the sentiment distribution of text.
[sentence]=Thus, we utilize the continuous vector of top layer to predict the sentiment distribution of text.
after reload the classifier, the predicted result=
['0']
Assuming there are K labels, we modify the dimension of top layer in C&W model as K and add a sof tmax layer upon the top layer.
[sentence]=Assuming there are K labels, we modify the dimension of top layer in C&W model as K and add a sof tmax layer upon the top layer.
after reload the classifier, the predicted result=
['0']
The neural network (SSWEh) is given in Figure 1(b).
[sentence]=The neural network (SSWEh) is given in Figure 1(b).
after reload the classifier, the predicted result=
['0']
Sof tmax layer is suitable for this scenario because its outputs are interpreted as conditional probabilities.
[sentence]=Sof tmax layer is suitable for this scenario because its outputs are interpreted as conditional probabilities.
after reload the classifier, the predicted result=
['0']
Unlike C&W, SSWEh does not generate any corrupted ngram.
[sentence]=Unlike C&W, SSWEh does not generate any corrupted ngram.
after reload the classifier, the predicted result=
['0']
Let f g (t), where K denotes the number of sentiment polarity labels, be the gold K-dimensional multinomial distribution of input t and P k f g k (t) = 1.
[sentence]=Let f g (t), where K denotes the number of sentiment polarity labels, be the gold K-dimensional multinomial distribution of input t and P k f g k (t) = 1.
after reload the classifier, the predicted result=
['0']
For positive/negative classification, the distribution is of the form [1,0] for positive and [0,1] for negative.
[sentence]=For positive/negative classification, the distribution is of the form [1,0] for positive and [0,1] for negative.
after reload the classifier, the predicted result=
['0']
The cross-entropy error of the sof tmax layer is : lossh(t) =  X k={0,1} f g k (t)  log(f h k (t)) (5) where f g (t) is the gold sentiment distribution and f h (t) is the predicted sentiment distribution.
[sentence]=The cross-entropy error of the sof tmax layer is : lossh(t) =  X k={0,1} f g k (t)  log(f h k (t)) (5) where f g (t) is the gold sentiment distribution and f h (t) is the predicted sentiment distribution.
after reload the classifier, the predicted result=
['0']
Basic Model 2 (SSWEr).
[sentence]=Basic Model 2 (SSWEr).
after reload the classifier, the predicted result=
['0']
SSWEh is trained by predicting the positive ngram as [1,0] and the negative ngram as [0,1].
[sentence]=SSWEh is trained by predicting the positive ngram as [1,0] and the negative ngram as [0,1].
after reload the classifier, the predicted result=
['0']
However, the constraint of SSWEh is too strict.
[sentence]=However, the constraint of SSWEh is too strict.
after reload the classifier, the predicted result=
['0']
The distribution of [0.7,0.3] can also be interpreted as a positive label because the positive score is larger than the negative score.
[sentence]=The distribution of [0.7,0.3] can also be interpreted as a positive label because the positive score is larger than the negative score.
after reload the classifier, the predicted result=
['0']
Similarly, the distribution of [0.2,0.8] indicates negative polarity.
[sentence]=Similarly, the distribution of [0.2,0.8] indicates negative polarity.
after reload the classifier, the predicted result=
['0']
Based on the above observation, the hard constraints in SSWEh should be relaxed.
[sentence]=Based on the above observation, the hard constraints in SSWEh should be relaxed.
after reload the classifier, the predicted result=
['0']
If the sentiment polarity of a tweet is positive, the predicted positive score is expected to be larger than the predicted negative score, and the exact reverse if the tweet has negative polarity.
[sentence]=If the sentiment polarity of a tweet is positive, the predicted positive score is expected to be larger than the predicted negative score, and the exact reverse if the tweet has negative polarity.
after reload the classifier, the predicted result=
['0']
We model the relaxed constraint with a ranking objective function and borrow the bottom four layers from SSWEh, namely lookup  linear  hT anh  linear in Figure 1(b), to build the relaxed neural network (SSWEr).
[sentence]=We model the relaxed constraint with a ranking objective function and borrow the bottom four layers from SSWEh, namely lookup  linear  hT anh  linear in Figure 1(b), to build the relaxed neural network (SSWEr).
after reload the classifier, the predicted result=
['0']
Compared with SSWEh, the sof tmax layer is removed because SSWEr does not require probabilistic interpretation.
[sentence]=Compared with SSWEh, the sof tmax layer is removed because SSWEr does not require probabilistic interpretation.
after reload the classifier, the predicted result=
['0']
The hinge loss of SSWEr is modeled as de- scribed below.
[sentence]=The hinge loss of SSWEr is modeled as de- scribed below.
after reload the classifier, the predicted result=
['0']
lossr(t) = max(0, 1  s(t)f r 0 (t) + s(t)f r 1 (t) ) (6) where f r 0 is the predicted positive score, f r 1 is the predicted negative score, s(t) is an indicator function reflecting the sentiment polarity of a sentence, s(t) = ( 1 if f g (t) = [1, 0] 1 if f g (t) = [0, 1] (7) Similar with SSWEh, SSWEr also does not generate the corrupted ngram.
[sentence]=lossr(t) = max(0, 1  s(t)f r 0 (t) + s(t)f r 1 (t) ) (6) where f r 0 is the predicted positive score, f r 1 is the predicted negative score, s(t) is an indicator function reflecting the sentiment polarity of a sentence, s(t) = ( 1 if f g (t) = [1, 0] 1 if f g (t) = [0, 1] (7) Similar with SSWEh, SSWEr also does not generate the corrupted ngram.
after reload the classifier, the predicted result=
['0']
Unified Model (SSWEu).
[sentence]=Unified Model (SSWEu).
after reload the classifier, the predicted result=
['0']
The C&W model learns word embedding by modeling syntactic contexts of words but ignoring sentiment information.
[sentence]=The C&W model learns word embedding by modeling syntactic contexts of words but ignoring sentiment information.
after reload the classifier, the predicted result=
['0']
By contrast, SSWEh and SSWEr learn sentiment-specific word embedding by integrating the sentiment polarity of sentences but leaving out the syntactic contexts of words.
[sentence]=By contrast, SSWEh and SSWEr learn sentiment-specific word embedding by integrating the sentiment polarity of sentences but leaving out the syntactic contexts of words.
after reload the classifier, the predicted result=
['0']
We develop a uni- fied model (SSWEu) in this part, which captures the sentiment information of sentences as well as the syntactic contexts of words.
[sentence]=We develop a uni- fied model (SSWEu) in this part, which captures the sentiment information of sentences as well as the syntactic contexts of words.
after reload the classifier, the predicted result=
['1']
SSWEu is illustrated in Figure 1(c).
[sentence]=SSWEu is illustrated in Figure 1(c).
after reload the classifier, the predicted result=
['0']
Given an original (or corrupted) ngram and the sentiment polarity of a sentence as the input, SSWEu predicts a two-dimensional vector for each input ngram.
[sentence]=Given an original (or corrupted) ngram and the sentiment polarity of a sentence as the input, SSWEu predicts a two-dimensional vector for each input ngram.
after reload the classifier, the predicted result=
['0']
The two scalars (f u 0 , f u 1 ) stand for language model score and sentiment score of the input ngram, respectively.
[sentence]=The two scalars (f u 0 , f u 1 ) stand for language model score and sentiment score of the input ngram, respectively.
after reload the classifier, the predicted result=
['0']
The training objectives of SSWEu are that (1) the original ngram should obtain a higher language model score f u 0 (t)than the corrupted ngram f u 0 (t r ), and (2) the sentiment score of original ngram f u 1 (t) should be more consistent with the gold polarity annotation of sentence than corrupted ngram f u 1 (t r ).
[sentence]=The training objectives of SSWEu are that (1) the original ngram should obtain a higher language model score f u 0 (t)than the corrupted ngram f u 0 (t r ), and (2) the sentiment score of original ngram f u 1 (t) should be more consistent with the gold polarity annotation of sentence than corrupted ngram f u 1 (t r ).
after reload the classifier, the predicted result=
['0']
The loss function of SSWEu is the linear combination of two hinge losses, lossu(t, tr ) =   losscw(t, tr )+ (1  )  lossus(t, tr ) (8) where losscw(t, tr ) is the syntactic loss as given in Equation 1, lossus(t, tr ) is the sentiment loss as described in Equation 9.
[sentence]=The loss function of SSWEu is the linear combination of two hinge losses, lossu(t, tr ) =   losscw(t, tr )+ (1  )  lossus(t, tr ) (8) where losscw(t, tr ) is the syntactic loss as given in Equation 1, lossus(t, tr ) is the sentiment loss as described in Equation 9.
after reload the classifier, the predicted result=
['0']
The hyper-parameter  weighs the two parts.
[sentence]=The hyper-parameter  weighs the two parts.
after reload the classifier, the predicted result=
['0']
lossus(t, tr ) = max(0, 1  s(t)f u 1 (t) + s(t)f u 1 (t r ) ) (9)
[sentence]=lossus(t, tr ) = max(0, 1  s(t)f u 1 (t) + s(t)f u 1 (t r ) ) (9)
after reload the classifier, the predicted result=
['0']
Model Training.
[sentence]=Model Training.
after reload the classifier, the predicted result=
['0']
We train sentiment-specific word embedding from massive distant-supervised tweets collected with positive and negative emoticons1 .
[sentence]=We train sentiment-specific word embedding from massive distant-supervised tweets collected with positive and negative emoticons1 .
after reload the classifier, the predicted result=
['1']
We crawl tweets from April 1st, 2013 to April 30th, 2013 with TwitterAPI.
[sentence]=We crawl tweets from April 1st, 2013 to April 30th, 2013 with TwitterAPI.
after reload the classifier, the predicted result=
['0']
We tokenize each tweet with TwitterNLP (Gimpel et al., 2011), remove the @user and URLs of each tweet, and filter the tweets that are too short (< 7 words).
[sentence]=We tokenize each tweet with TwitterNLP (Gimpel et al., 2011), remove the @user and URLs of each tweet, and filter the tweets that are too short (< 7 words).
after reload the classifier, the predicted result=
['0']
Finally, we collect 10M tweets, selected by 5M tweets with positive emoticons and 5M tweets with negative emoticons.
[sentence]=Finally, we collect 10M tweets, selected by 5M tweets with positive emoticons and 5M tweets with negative emoticons.
after reload the classifier, the predicted result=
['0']
We train SSWEh, SSWEr and SSWEu by taking the derivative of the loss through backpropagation with respect to the whole set of parameters (Collobert et al., 2011), and use AdaGrad (Duchi et al., 2011) to update the parameters.
[sentence]=We train SSWEh, SSWEr and SSWEu by taking the derivative of the loss through backpropagation with respect to the whole set of parameters (Collobert et al., 2011), and use AdaGrad (Duchi et al., 2011) to update the parameters.
after reload the classifier, the predicted result=
['0']
We empirically set the window size as 3, the embedding length as 50, the length of hidden layer as 20 and the learning rate of AdaGrad as 0.1 for all baseline and our models.
[sentence]=We empirically set the window size as 3, the embedding length as 50, the length of hidden layer as 20 and the learning rate of AdaGrad as 0.1 for all baseline and our models.
after reload the classifier, the predicted result=
['0']
We learn embedding for unigrams, bigrams and trigrams separately with same neural network and same parameter setting.
[sentence]=We learn embedding for unigrams, bigrams and trigrams separately with same neural network and same parameter setting.
after reload the classifier, the predicted result=
['0']
The contexts of unigram (bigram/trigram) are the surrounding unigrams (bigrams/trigrams), respectively.
[sentence]=The contexts of unigram (bigram/trigram) are the surrounding unigrams (bigrams/trigrams), respectively.
after reload the classifier, the predicted result=
['0']
3.3 Twitter Sentiment Classification
[sentence]=3.3 Twitter Sentiment Classification
after reload the classifier, the predicted result=
['0']
We apply sentiment-specific word embedding for Twitter sentiment classification under a supervised learning framework as in previous work (Pang et al., 2002).
[sentence]=We apply sentiment-specific word embedding for Twitter sentiment classification under a supervised learning framework as in previous work (Pang et al., 2002).
after reload the classifier, the predicted result=
['0']
Instead of hand-crafting features, we incorporate the continuous representation of words and phrases as the feature of a tweet.
[sentence]=Instead of hand-crafting features, we incorporate the continuous representation of words and phrases as the feature of a tweet.
after reload the classifier, the predicted result=
['0']
The sentiment classifier is built from tweets with manually annotated sentiment polarity.
[sentence]=The sentiment classifier is built from tweets with manually annotated sentiment polarity.
after reload the classifier, the predicted result=
['0']
We explore min, average and max convolutional layers (Collobert et al., 2011; Socher et al., 2011a), which have been used as simple and effective methods for compositionality learning in vector-based semantics (Mitchell and Lapata, 2010), to obtain the tweet representation.
[sentence]=We explore min, average and max convolutional layers (Collobert et al., 2011; Socher et al., 2011a), which have been used as simple and effective methods for compositionality learning in vector-based semantics (Mitchell and Lapata, 2010), to obtain the tweet representation.
after reload the classifier, the predicted result=
['0']
The result is the concatenation of vectors derived from different convolutional layers.
[sentence]=The result is the concatenation of vectors derived from different convolutional layers.
after reload the classifier, the predicted result=
['0']
z(tw) = [zmax(tw), zmin(tw), zaverage(tw)] where z(tw) is the representation of tweet tw and zx(tw) is the results of the convolutional layer x  {min, max, average}.
[sentence]=z(tw) = [zmax(tw), zmin(tw), zaverage(tw)] where z(tw) is the representation of tweet tw and zx(tw) is the results of the convolutional layer x  {min, max, average}.
after reload the classifier, the predicted result=
['0']
Each convolutional layer zx employs the embedding of unigrams, bigrams and trigrams separately and conducts the matrixvector operation of x on the sequence represented by columns in each lookup table.
[sentence]=Each convolutional layer zx employs the embedding of unigrams, bigrams and trigrams separately and conducts the matrixvector operation of x on the sequence represented by columns in each lookup table.
after reload the classifier, the predicted result=
['0']
The output of zx is the concatenation of results obtained from different lookup tables.
[sentence]=The output of zx is the concatenation of results obtained from different lookup tables.
after reload the classifier, the predicted result=
['1']
zx(tw) = [wxhLunii tw, wxhLbii tw, wxhLtrii tw] where wx is the convolutional function of zx, hLi tw is the concatenated column vectors of the words in the tweet.
[sentence]=zx(tw) = [wxhLunii tw, wxhLbii tw, wxhLtrii tw] where wx is the convolutional function of zx, hLi tw is the concatenated column vectors of the words in the tweet.
after reload the classifier, the predicted result=
['1']
Luni, Lbi and Ltri are the lookup tables of the unigram, bigram and trigram embedding, respectively.
[sentence]=Luni, Lbi and Ltri are the lookup tables of the unigram, bigram and trigram embedding, respectively.
after reload the classifier, the predicted result=
['0']
4 Experiment
[sentence]=4 Experiment
after reload the classifier, the predicted result=
['1']
We conduct experiments to evaluate SSWE by incorporating it into a supervised learning framework for Twitter sentiment classification.
[sentence]=We conduct experiments to evaluate SSWE by incorporating it into a supervised learning framework for Twitter sentiment classification.
after reload the classifier, the predicted result=
['0']
We also directly evaluate the effectiveness of the SSWE by measuring the word similarity in the embedding space for sentiment lexicons.
[sentence]=We also directly evaluate the effectiveness of the SSWE by measuring the word similarity in the embedding space for sentiment lexicons.
after reload the classifier, the predicted result=
['0']
4.1 Twitter Sentiment Classification
[sentence]=4.1 Twitter Sentiment Classification
after reload the classifier, the predicted result=
['0']
Experiment Setup and Datasets.
[sentence]=Experiment Setup and Datasets.
after reload the classifier, the predicted result=
['0']
We conduct experiments on the latest Twitter sentiment classification benchmark dataset in SemEval 2013 (Nakov et al., 2013).
[sentence]=We conduct experiments on the latest Twitter sentiment classification benchmark dataset in SemEval 2013 (Nakov et al., 2013).
after reload the classifier, the predicted result=
['0']
The training and development sets were completely in full to task participants.
[sentence]=The training and development sets were completely in full to task participants.
after reload the classifier, the predicted result=
['1']
However, we were unable to download all the training and development sets because some tweets were deleted or not available due to modified authorization status.
[sentence]=However, we were unable to download all the training and development sets because some tweets were deleted or not available due to modified authorization status.
after reload the classifier, the predicted result=
['0']
The test set is directly provided to the participants.
[sentence]=The test set is directly provided to the participants.
after reload the classifier, the predicted result=
['0']
The distribution of our dataset is given in Table 1.
[sentence]=The distribution of our dataset is given in Table 1.
after reload the classifier, the predicted result=
['0']
We train sentiment classifier with LibLinear (Fan et al., 2008) on the training set, tune parameter c on the dev set and evaluate on the test set.
[sentence]=We train sentiment classifier with LibLinear (Fan et al., 2008) on the training set, tune parameter c on the dev set and evaluate on the test set.
after reload the classifier, the predicted result=
['0']
Evaluation metric is the Macro-F1 of positive and negative categories 2 .
[sentence]=Evaluation metric is the Macro-F1 of positive and negative categories 2 .
after reload the classifier, the predicted result=
['0']
Positive Negative Neutral Total Train 2,642 994 3,436 7,072 Dev 408 219 493 1,120 Test 1,570 601 1,639 3,810 Table 1: Statistics of the SemEval 2013 Twitter sentiment classification dataset.
[sentence]=Positive Negative Neutral Total Train 2,642 994 3,436 7,072 Dev 408 219 493 1,120 Test 1,570 601 1,639 3,810 Table 1: Statistics of the SemEval 2013 Twitter sentiment classification dataset.
after reload the classifier, the predicted result=
['0']
2We investigate 2-class Twitter sentiment classification (positive/negative) instead of 3-class Twitter sentiment classification (positive/negative/neutral) in SemEval2013.
[sentence]=2We investigate 2-class Twitter sentiment classification (positive/negative) instead of 3-class Twitter sentiment classification (positive/negative/neutral) in SemEval2013.
after reload the classifier, the predicted result=
['0']
Baseline Methods.
[sentence]=Baseline Methods.
after reload the classifier, the predicted result=
['0']
We compare our method with the following sentiment classification algorithms:
[sentence]=We compare our method with the following sentiment classification algorithms:
after reload the classifier, the predicted result=
['0']
(1) DistSuper: We use the 10 million tweets selected by positive and negative emoticons as training data, and build sentiment classifier with LibLinear and ngram features (Go et al., 2009).
[sentence]=(1) DistSuper: We use the 10 million tweets selected by positive and negative emoticons as training data, and build sentiment classifier with LibLinear and ngram features (Go et al., 2009).
after reload the classifier, the predicted result=
['0']
(2) SVM: The ngram features and Support Vector Machine are widely used baseline methods to build sentiment classifiers (Pang et al., 2002).
[sentence]=(2) SVM: The ngram features and Support Vector Machine are widely used baseline methods to build sentiment classifiers (Pang et al., 2002).
after reload the classifier, the predicted result=
['0']
LibLinear is used to train the SVM classifier.
[sentence]=LibLinear is used to train the SVM classifier.
after reload the classifier, the predicted result=
['0']
(3) NBSVM: NBSVM (Wang and Manning, 2012) is a state-of-the-art performer on many sentiment classification datasets, which trades-off between Naive Bayes and NB-enhanced SVM.
[sentence]=(3) NBSVM: NBSVM (Wang and Manning, 2012) is a state-of-the-art performer on many sentiment classification datasets, which trades-off between Naive Bayes and NB-enhanced SVM.
after reload the classifier, the predicted result=
['0']
(4) RAE: Recursive Autoencoder (Socher et al., 2011c) has been proven effective in many sentiment analysis tasks by learning compositionality automatically.
[sentence]=(4) RAE: Recursive Autoencoder (Socher et al., 2011c) has been proven effective in many sentiment analysis tasks by learning compositionality automatically.
after reload the classifier, the predicted result=
['0']
We run RAE with randomly initialized word embedding.
[sentence]=We run RAE with randomly initialized word embedding.
after reload the classifier, the predicted result=
['0']
(5) NRC: NRC builds the top-performed system in SemEval 2013 Twitter sentiment classification track which incorporates diverse sentiment lexicons and many manually designed features.
[sentence]=(5) NRC: NRC builds the top-performed system in SemEval 2013 Twitter sentiment classification track which incorporates diverse sentiment lexicons and many manually designed features.
after reload the classifier, the predicted result=
['0']
We re-implement this system because the codes are not publicly available 3 .
[sentence]=We re-implement this system because the codes are not publicly available 3 .
after reload the classifier, the predicted result=
['0']
NRC-ngram refers to the feature set of NRC leaving out ngram features.
[sentence]=NRC-ngram refers to the feature set of NRC leaving out ngram features.
after reload the classifier, the predicted result=
['0']
Except for DistSuper, other baseline methods are conducted in a supervised manner.
[sentence]=Except for DistSuper, other baseline methods are conducted in a supervised manner.
after reload the classifier, the predicted result=
['0']
We do not compare with RNTN (Socher et al., 2013b) because we cannot efficiently train the RNTN model.
[sentence]=We do not compare with RNTN (Socher et al., 2013b) because we cannot efficiently train the RNTN model.
after reload the classifier, the predicted result=
['0']
The reason lies in that the tweets in our dataset do not have accurately parsed results or fine grained sentiment labels for phrases.
[sentence]=The reason lies in that the tweets in our dataset do not have accurately parsed results or fine grained sentiment labels for phrases.
after reload the classifier, the predicted result=
['0']
Another reason is that the RNTN model trained on movie reviews cannot be directly applied on tweets due to the differences between domains (Blitzer et al., 2007).
[sentence]=Another reason is that the RNTN model trained on movie reviews cannot be directly applied on tweets due to the differences between domains (Blitzer et al., 2007).
after reload the classifier, the predicted result=
['0']
Results and Analysis.
[sentence]=Results and Analysis.
after reload the classifier, the predicted result=
['0']
Table 2 shows the macroF1 of the baseline systems as well as the SSWEbased methods on positive/negative sentiment classification of tweets.
[sentence]=Table 2 shows the macroF1 of the baseline systems as well as the SSWEbased methods on positive/negative sentiment classification of tweets.
after reload the classifier, the predicted result=
['1']
Distant supervision is relatively weak because the noisy-labeled tweets are treated as the gold standard, which affects the performance of classifier.
[sentence]=Distant supervision is relatively weak because the noisy-labeled tweets are treated as the gold standard, which affects the performance of classifier.
after reload the classifier, the predicted result=
['0']
The results of bagof-ngram (uni/bi/tri-gram) features are not satis- fied because the one-hot word representation cannot capture the latent connections between words.
[sentence]=The results of bagof-ngram (uni/bi/tri-gram) features are not satis- fied because the one-hot word representation cannot capture the latent connections between words.
after reload the classifier, the predicted result=
['0']
NBSVM and RAE perform comparably and have 3 For 3-class sentiment classification in SemEval 2013, our re-implementation of NRC achieved 68.3%, 0.7% lower than NRC (69%) due to less training data.
[sentence]=NBSVM and RAE perform comparably and have 3 For 3-class sentiment classification in SemEval 2013, our re-implementation of NRC achieved 68.3%, 0.7% lower than NRC (69%) due to less training data.
after reload the classifier, the predicted result=
['0']
1560 Method Macro-F1 DistSuper + unigram 61.74 DistSuper + uni/bi/tri-gram 63.84 SVM + unigram 74.50 SVM + uni/bi/tri-gram 75.06 NBSVM 75.28 RAE 75.12 NRC (Top System in SemEval) 84.73 NRC - ngram 84.17 SSWEu 84.98 SSWEu+NRC 86.58 SSWEu+NRC-ngram 86.48 Table 2: Macro-F1 on positive/negative classification of tweets.
[sentence]=1560 Method Macro-F1 DistSuper + unigram 61.74 DistSuper + uni/bi/tri-gram 63.84 SVM + unigram 74.50 SVM + uni/bi/tri-gram 75.06 NBSVM 75.28 RAE 75.12 NRC (Top System in SemEval) 84.73 NRC - ngram 84.17 SSWEu 84.98 SSWEu+NRC 86.58 SSWEu+NRC-ngram 86.48 Table 2: Macro-F1 on positive/negative classification of tweets.
after reload the classifier, the predicted result=
['0']
a big gap in comparison with the NRC and SSWEbased methods.
[sentence]=a big gap in comparison with the NRC and SSWEbased methods.
after reload the classifier, the predicted result=
['0']
The reason is that RAE and NBSVM learn the representation of tweets from the small-scale manually annotated training set, which cannot well capture the comprehensive linguistic phenomenons of words.
[sentence]=The reason is that RAE and NBSVM learn the representation of tweets from the small-scale manually annotated training set, which cannot well capture the comprehensive linguistic phenomenons of words.
after reload the classifier, the predicted result=
['0']
NRC implements a variety of features and reaches 84.73% in macro-F1, verifying the importance of a better feature representation for Twitter sentiment classification.
[sentence]=NRC implements a variety of features and reaches 84.73% in macro-F1, verifying the importance of a better feature representation for Twitter sentiment classification.
after reload the classifier, the predicted result=
['0']
We achieve 84.98% by using only SSWEu as features without borrowing any sentiment lexicons or hand-crafted rules.
[sentence]=We achieve 84.98% by using only SSWEu as features without borrowing any sentiment lexicons or hand-crafted rules.
after reload the classifier, the predicted result=
['0']
The results indicate that SSWEu automatically learns discriminative features from massive tweets and performs comparable with the state-of-the-art manually designed features.
[sentence]=The results indicate that SSWEu automatically learns discriminative features from massive tweets and performs comparable with the state-of-the-art manually designed features.
after reload the classifier, the predicted result=
['0']
After concatenating SSWEu with the feature set of NRC, the performance is further improved to 86.58%.
[sentence]=After concatenating SSWEu with the feature set of NRC, the performance is further improved to 86.58%.
after reload the classifier, the predicted result=
['0']
We also compare SSWEu with the ngram feature by integrating SSWE into NRC-ngram.
[sentence]=We also compare SSWEu with the ngram feature by integrating SSWE into NRC-ngram.
after reload the classifier, the predicted result=
['0']
The concatenated features SSWEu+NRC-ngram (86.48%) outperform the original feature set of NRC (84.73%).
[sentence]=The concatenated features SSWEu+NRC-ngram (86.48%) outperform the original feature set of NRC (84.73%).
after reload the classifier, the predicted result=
['0']
As a reference, we apply SSWEu on subjective classification of tweets, and obtain 72.17% in macro-F1 by using only SSWEu as feature.
[sentence]=As a reference, we apply SSWEu on subjective classification of tweets, and obtain 72.17% in macro-F1 by using only SSWEu as feature.
after reload the classifier, the predicted result=
['0']
After combining SSWEu with the feature set of NRC, we improve NRC from 74.86% to 75.39% for subjective classification.
[sentence]=After combining SSWEu with the feature set of NRC, we improve NRC from 74.86% to 75.39% for subjective classification.
after reload the classifier, the predicted result=
['0']
Comparision between Different Word Embedding.
[sentence]=Comparision between Different Word Embedding.
after reload the classifier, the predicted result=
['0']
We compare sentiment-specific word embedding (SSWEh, SSWEr, SSWEu) with baseline embedding learning algorithms by only using word embedding as features for Twitter sentiment classification.
[sentence]=We compare sentiment-specific word embedding (SSWEh, SSWEr, SSWEu) with baseline embedding learning algorithms by only using word embedding as features for Twitter sentiment classification.
after reload the classifier, the predicted result=
['1']
We use the embedding of unigrams, bigrams and trigrams in the experiment.
[sentence]=We use the embedding of unigrams, bigrams and trigrams in the experiment.
after reload the classifier, the predicted result=
['0']
The embeddings of C&W (Collobert et al., 2011), word2vec4 , WVSA (Maas et al., 2011) and our models are trained with the same dataset and same parameter setting.
[sentence]=The embeddings of C&W (Collobert et al., 2011), word2vec4 , WVSA (Maas et al., 2011) and our models are trained with the same dataset and same parameter setting.
after reload the classifier, the predicted result=
['0']
We compare with C&W and word2vec as they have been proved effective in many NLP tasks.
[sentence]=We compare with C&W and word2vec as they have been proved effective in many NLP tasks.
after reload the classifier, the predicted result=
['0']
The trade-off parameter of ReEmb (Labutov and Lipson, 2013) is tuned on the development set of SemEval 2013.
[sentence]=The trade-off parameter of ReEmb (Labutov and Lipson, 2013) is tuned on the development set of SemEval 2013.
after reload the classifier, the predicted result=
['0']
Table 3 shows the performance on the positive/negative classification of tweets5 .
[sentence]=Table 3 shows the performance on the positive/negative classification of tweets5 .
after reload the classifier, the predicted result=
['0']
ReEmb(C&W) and ReEmb(w2v) stand for the use of embeddings learned from 10 million distantsupervised tweets with C&W and word2vec, respectively.
[sentence]=ReEmb(C&W) and ReEmb(w2v) stand for the use of embeddings learned from 10 million distantsupervised tweets with C&W and word2vec, respectively.
after reload the classifier, the predicted result=
['0']
Each row of Table 3 represents a word embedding learning algorithm.
[sentence]=Each row of Table 3 represents a word embedding learning algorithm.
after reload the classifier, the predicted result=
['0']
Each column stands for a type of embedding used to compose features of tweets.
[sentence]=Each column stands for a type of embedding used to compose features of tweets.
after reload the classifier, the predicted result=
['0']
The column uni+bi denotes the use of unigram and bigram embedding, and the column uni+bi+tri indicates the use of unigram, bigram and trigram embedding.
[sentence]=The column uni+bi denotes the use of unigram and bigram embedding, and the column uni+bi+tri indicates the use of unigram, bigram and trigram embedding.
after reload the classifier, the predicted result=
['0']
Embedding unigram uni+bi uni+bi+tri C&W 74.89 75.24 75.89 Word2vec 73.21 75.07 76.31 ReEmb(C&W) 75.87   ReEmb(w2v) 75.21   WVSA 77.04   SSWEh 81.33 83.16 83.37 SSWEr 80.45 81.52 82.60 SSWEu 83.70 84.70 84.98 Table 3: Macro-F1 on positive/negative classification of tweets with different word embeddings.
[sentence]=Embedding unigram uni+bi uni+bi+tri C&W 74.89 75.24 75.89 Word2vec 73.21 75.07 76.31 ReEmb(C&W) 75.87   ReEmb(w2v) 75.21   WVSA 77.04   SSWEh 81.33 83.16 83.37 SSWEr 80.45 81.52 82.60 SSWEu 83.70 84.70 84.98 Table 3: Macro-F1 on positive/negative classification of tweets with different word embeddings.
after reload the classifier, the predicted result=
['0']
From the first column of Table 3, we can see that the performance of C&W and word2vec are obviously lower than sentiment-specific word embeddings by only using unigram embedding as features.
[sentence]=From the first column of Table 3, we can see that the performance of C&W and word2vec are obviously lower than sentiment-specific word embeddings by only using unigram embedding as features.
after reload the classifier, the predicted result=
['0']
The reason is that C&W and word2vec do not explicitly exploit the sentiment information of the text, resulting in that the words with opposite polarity such as good and bad are mapped to close word vectors.
[sentence]=The reason is that C&W and word2vec do not explicitly exploit the sentiment information of the text, resulting in that the words with opposite polarity such as good and bad are mapped to close word vectors.
after reload the classifier, the predicted result=
['0']
When such word embeddings are fed as features to a Twitter sentiment classifier, the discriminative ability of sentiment words are weakened thus the classification performance is affected.
[sentence]=When such word embeddings are fed as features to a Twitter sentiment classifier, the discriminative ability of sentiment words are weakened thus the classification performance is affected.
after reload the classifier, the predicted result=
['0']
Sentiment-specific word em- 4Available at https://code.google.com/p/word2vec/.
[sentence]=Sentiment-specific word em- 4Available at https://code.google.com/p/word2vec/.
after reload the classifier, the predicted result=
['0']
We utilize the Skip-gram model because it performs better than CBOW in our experiments.
[sentence]=We utilize the Skip-gram model because it performs better than CBOW in our experiments.
after reload the classifier, the predicted result=
['0']
5MVSA and ReEmb are not suitable for learning bigram and trigram embedding because their sentiment predictor functions only utilize the unigram embedding.
[sentence]=5MVSA and ReEmb are not suitable for learning bigram and trigram embedding because their sentiment predictor functions only utilize the unigram embedding.
after reload the classifier, the predicted result=
['0']
1561 beddings (SSWEh, SSWEr, SSWEu) effectively distinguish words with opposite sentiment polarity and perform best in three settings.
[sentence]=1561 beddings (SSWEh, SSWEr, SSWEu) effectively distinguish words with opposite sentiment polarity and perform best in three settings.
after reload the classifier, the predicted result=
['0']
SSWE outperforms MVSA by exploiting more contextual information in the sentiment predictor function.
[sentence]=SSWE outperforms MVSA by exploiting more contextual information in the sentiment predictor function.
after reload the classifier, the predicted result=
['0']
SSWE outperforms ReEmb by leveraging more sentiment information from massive distant-supervised tweets.
[sentence]=SSWE outperforms ReEmb by leveraging more sentiment information from massive distant-supervised tweets.
after reload the classifier, the predicted result=
['1']
Among three sentiment-specific word embeddings, SSWEu captures more context information and yields best performance.
[sentence]=Among three sentiment-specific word embeddings, SSWEu captures more context information and yields best performance.
after reload the classifier, the predicted result=
['1']
SSWEh and SSWEr obtain comparative results.
[sentence]=SSWEh and SSWEr obtain comparative results.
after reload the classifier, the predicted result=
['1']
From each row of Table 3, we can see that the bigram and trigram embeddings consistently improve the performance of Twitter sentiment classi- fication.
[sentence]=From each row of Table 3, we can see that the bigram and trigram embeddings consistently improve the performance of Twitter sentiment classi- fication.
after reload the classifier, the predicted result=
['0']
The underlying reason is that a phrase, which cannot be accurately represented by unigram embedding, is directly encoded into the ngram embedding as an idiomatic unit.
[sentence]=The underlying reason is that a phrase, which cannot be accurately represented by unigram embedding, is directly encoded into the ngram embedding as an idiomatic unit.
after reload the classifier, the predicted result=
['0']
A typical case in sentiment analysis is that the composed phrase and multiword expression may have a different sentiment polarity than the individual words it contains, such as not [bad] and [great] deal of (the word in the bracket has different sentiment polarity with the ngram).
[sentence]=A typical case in sentiment analysis is that the composed phrase and multiword expression may have a different sentiment polarity than the individual words it contains, such as not [bad] and [great] deal of (the word in the bracket has different sentiment polarity with the ngram).
after reload the classifier, the predicted result=
['0']
A very recent study by Mikolov et al.
[sentence]=A very recent study by Mikolov et al.
after reload the classifier, the predicted result=
['0']
(2013) also verified the effectiveness of phrase embedding for analogically reasoning phrases.
[sentence]=(2013) also verified the effectiveness of phrase embedding for analogically reasoning phrases.
after reload the classifier, the predicted result=
['1']
Effect of  in SSWEu We tune the hyperparameter  of SSWEu on the development set by using unigram embedding as features.
[sentence]=Effect of  in SSWEu We tune the hyperparameter  of SSWEu on the development set by using unigram embedding as features.
after reload the classifier, the predicted result=
['0']
As given in Equation 8,  is the weighting score of syntactic loss of SSWEu and trades-off the syntactic and sentiment losses.
[sentence]=As given in Equation 8,  is the weighting score of syntactic loss of SSWEu and trades-off the syntactic and sentiment losses.
after reload the classifier, the predicted result=
['0']
SSWEu is trained from 10 million distant-supervised tweets.
[sentence]=SSWEu is trained from 10 million distant-supervised tweets.
after reload the classifier, the predicted result=
['0']
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84  MacroF1 SSWEu Figure 2: Macro-F1 of SSWEu on the development set of SemEval 2013 with different .
[sentence]=0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84  MacroF1 SSWEu Figure 2: Macro-F1 of SSWEu on the development set of SemEval 2013 with different .
after reload the classifier, the predicted result=
['0']
Figure 2 shows the macro-F1 of SSWEu on positive/negative classification of tweets with different  on our development set.
[sentence]=Figure 2 shows the macro-F1 of SSWEu on positive/negative classification of tweets with different  on our development set.
after reload the classifier, the predicted result=
['0']
We can see that SSWEu performs better when  is in the range of [0.5, 0.6], which balances the syntactic context and sentiment information.
[sentence]=We can see that SSWEu performs better when  is in the range of [0.5, 0.6], which balances the syntactic context and sentiment information.
after reload the classifier, the predicted result=
['0']
The model with =1 stands for C&W model, which only encodes the syntactic contexts of words.
[sentence]=The model with =1 stands for C&W model, which only encodes the syntactic contexts of words.
after reload the classifier, the predicted result=
['0']
The sharp decline at =1 reflects the importance of sentiment information in learning word embedding for Twitter sentiment classification.
[sentence]=The sharp decline at =1 reflects the importance of sentiment information in learning word embedding for Twitter sentiment classification.
after reload the classifier, the predicted result=
['1']
Effect of Distant-supervised Data in SSWEu We investigate how the size of the distantsupervised data affects the performance of SSWEu feature for Twitter sentiment classification.
[sentence]=Effect of Distant-supervised Data in SSWEu We investigate how the size of the distantsupervised data affects the performance of SSWEu feature for Twitter sentiment classification.
after reload the classifier, the predicted result=
['0']
We vary the number of distant-supervised tweets from 1 million to 12 million, increased by 1 million.
[sentence]=We vary the number of distant-supervised tweets from 1 million to 12 million, increased by 1 million.
after reload the classifier, the predicted result=
['0']
We set the  of SSWEu as 0.5, according to the experiments shown in Figure 2.
[sentence]=We set the  of SSWEu as 0.5, according to the experiments shown in Figure 2.
after reload the classifier, the predicted result=
['0']
Results of positive/negative classification of tweets on our development set are given in Figure 3.
[sentence]=Results of positive/negative classification of tweets on our development set are given in Figure 3.
after reload the classifier, the predicted result=
['0']
1 2 3 4 5 6 7 8 9 10 11 12 x 106 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 # of distantsupervised tweets MacroF1 SSWEu Figure 3: Macro-F1 of SSWEu with different size of distant-supervised data on our development set.
[sentence]=1 2 3 4 5 6 7 8 9 10 11 12 x 106 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 # of distantsupervised tweets MacroF1 SSWEu Figure 3: Macro-F1 of SSWEu with different size of distant-supervised data on our development set.
after reload the classifier, the predicted result=
['1']
We can see that when more distant-supervised tweets are added, the accuracy of SSWEu consistently improves.
[sentence]=We can see that when more distant-supervised tweets are added, the accuracy of SSWEu consistently improves.
after reload the classifier, the predicted result=
['0']
The underlying reason is that when more tweets are incorporated, the word embedding is better estimated as the vocabulary size is larger and the context and sentiment information are richer.
[sentence]=The underlying reason is that when more tweets are incorporated, the word embedding is better estimated as the vocabulary size is larger and the context and sentiment information are richer.
after reload the classifier, the predicted result=
['0']
When we have 10 million distantsupervised tweets, the SSWEu feature increases the macro-F1 of positive/negative classification of tweets to 82.94% on our development set.
[sentence]=When we have 10 million distantsupervised tweets, the SSWEu feature increases the macro-F1 of positive/negative classification of tweets to 82.94% on our development set.
after reload the classifier, the predicted result=
['0']
When we have more than 10 million tweets, the performance remains stable as the contexts of words have been mostly covered.
[sentence]=When we have more than 10 million tweets, the performance remains stable as the contexts of words have been mostly covered.
after reload the classifier, the predicted result=
['0']
4.2 Word Similarity of Sentiment Lexicons
[sentence]=4.2 Word Similarity of Sentiment Lexicons
after reload the classifier, the predicted result=
['0']
The quality of SSWE has been implicitly evaluated when applied in Twitter sentiment classification in the previous subsection.
[sentence]=The quality of SSWE has been implicitly evaluated when applied in Twitter sentiment classification in the previous subsection.
after reload the classifier, the predicted result=
['0']
We explicitly evaluate it in this section through word similarity in the em- 1562 bedding space for sentiment lexicons.
[sentence]=We explicitly evaluate it in this section through word similarity in the em- 1562 bedding space for sentiment lexicons.
after reload the classifier, the predicted result=
['0']
The evaluation metric is the accuracy of polarity consistency between each sentiment word and its top N closest words in the sentiment lexicon, Accuracy = P#Lex i=1 PN j=1 (wi , cij ) #Lex  N (10) where #Lex is the number of words in the sentiment lexicon, wi is the i-th word in the lexicon, cij is the j-th closest word to wi in the lexicon with cosine similarity, (wi , cij ) is an indicator function that is equal to 1 if wi and cij have the same sentiment polarity and 0 for the opposite case.
[sentence]=The evaluation metric is the accuracy of polarity consistency between each sentiment word and its top N closest words in the sentiment lexicon, Accuracy = P#Lex i=1 PN j=1 (wi , cij ) #Lex  N (10) where #Lex is the number of words in the sentiment lexicon, wi is the i-th word in the lexicon, cij is the j-th closest word to wi in the lexicon with cosine similarity, (wi , cij ) is an indicator function that is equal to 1 if wi and cij have the same sentiment polarity and 0 for the opposite case.
after reload the classifier, the predicted result=
['0']
The higher accuracy refers to a better polarity consistency of words in the sentiment lexicon.
[sentence]=The higher accuracy refers to a better polarity consistency of words in the sentiment lexicon.
after reload the classifier, the predicted result=
['0']
We set N as 100 in our experiment.
[sentence]=We set N as 100 in our experiment.
after reload the classifier, the predicted result=
['0']
Experiment Setup and Datasets We utilize the widely-used sentiment lexicons, namely MPQA (Wilson et al., 2005) and HL (Hu and Liu, 2004), to evaluate the quality of word embedding.
[sentence]=Experiment Setup and Datasets We utilize the widely-used sentiment lexicons, namely MPQA (Wilson et al., 2005) and HL (Hu and Liu, 2004), to evaluate the quality of word embedding.
after reload the classifier, the predicted result=
['0']
For each lexicon, we remove the words that do not appear in the lookup table of word embedding.
[sentence]=For each lexicon, we remove the words that do not appear in the lookup table of word embedding.
after reload the classifier, the predicted result=
['0']
We only use unigram embedding in this section because these sentiment lexicons do not contain phrases.
[sentence]=We only use unigram embedding in this section because these sentiment lexicons do not contain phrases.
after reload the classifier, the predicted result=
['0']
The distribution of the lexicons used in this paper is listed in Table 4.
[sentence]=The distribution of the lexicons used in this paper is listed in Table 4.
after reload the classifier, the predicted result=
['0']
Lexicon Positive Negative Total HL 1,331 2,647 3,978 MPQA 1,932 2,817 4,749 Joint 1,051 2,024 3,075 Table 4: Statistics of the sentiment lexicons.
[sentence]=Lexicon Positive Negative Total HL 1,331 2,647 3,978 MPQA 1,932 2,817 4,749 Joint 1,051 2,024 3,075 Table 4: Statistics of the sentiment lexicons.
after reload the classifier, the predicted result=
['0']
Joint stands for the words that occur in both HL and MPQA with the same sentiment polarity.
[sentence]=Joint stands for the words that occur in both HL and MPQA with the same sentiment polarity.
after reload the classifier, the predicted result=
['0']
Results.
[sentence]=Results.
after reload the classifier, the predicted result=
['0']
Table 5 shows our results compared to other word embedding learning algorithms.
[sentence]=Table 5 shows our results compared to other word embedding learning algorithms.
after reload the classifier, the predicted result=
['1']
The accuracy of random result is 50% as positive and negative words are randomly occurred in the nearest neighbors of each word.
[sentence]=The accuracy of random result is 50% as positive and negative words are randomly occurred in the nearest neighbors of each word.
after reload the classifier, the predicted result=
['0']
Sentiment-specific word embeddings (SSWEh, SSWEr, SSWEu) outperform existing neural models (C&W, word2vec) by large margins.
[sentence]=Sentiment-specific word embeddings (SSWEh, SSWEr, SSWEu) outperform existing neural models (C&W, word2vec) by large margins.
after reload the classifier, the predicted result=
['1']
SSWEu performs best in three lexicons.
[sentence]=SSWEu performs best in three lexicons.
after reload the classifier, the predicted result=
['0']
SSWEh and SSWEr have comparable performances.
[sentence]=SSWEh and SSWEr have comparable performances.
after reload the classifier, the predicted result=
['0']
Experimental results further demonstrate that sentiment-specific word embeddings are able to capture the sentiment information of texts and distinguish words with opposite sentiment polarity, which are not well solved in traditional neural Embedding HL MPQA Joint Random 50.00 50.00 50.00 C&W 63.10 58.13 62.58 Word2vec 66.22 60.72 65.59 ReEmb(C&W) 64.81 59.76 64.09 ReEmb(w2v) 67.16 61.81 66.39 WVSA 68.14 64.07 67.12 SSWEh 74.17 68.36 74.03 SSWEr 73.65 68.02 73.14 SSWEu 77.30 71.74 77.33 Table 5: Accuracy of the polarity consistency of words in different sentiment lexicons.
[sentence]=Experimental results further demonstrate that sentiment-specific word embeddings are able to capture the sentiment information of texts and distinguish words with opposite sentiment polarity, which are not well solved in traditional neural Embedding HL MPQA Joint Random 50.00 50.00 50.00 C&W 63.10 58.13 62.58 Word2vec 66.22 60.72 65.59 ReEmb(C&W) 64.81 59.76 64.09 ReEmb(w2v) 67.16 61.81 66.39 WVSA 68.14 64.07 67.12 SSWEh 74.17 68.36 74.03 SSWEr 73.65 68.02 73.14 SSWEu 77.30 71.74 77.33 Table 5: Accuracy of the polarity consistency of words in different sentiment lexicons.
after reload the classifier, the predicted result=
['0']
models like C&W and word2vec.
[sentence]=models like C&W and word2vec.
after reload the classifier, the predicted result=
['0']
SSWE outperforms MVSA and ReEmb by exploiting more context information of words and sentiment information of sentences, respectively.
[sentence]=SSWE outperforms MVSA and ReEmb by exploiting more context information of words and sentiment information of sentences, respectively.
after reload the classifier, the predicted result=
['0']
5 Conclusion
[sentence]=5 Conclusion
after reload the classifier, the predicted result=
['1']
In this paper, we propose learning continuous word representations as features for Twitter sentiment classification under a supervised learning framework.
[sentence]=In this paper, we propose learning continuous word representations as features for Twitter sentiment classification under a supervised learning framework.
after reload the classifier, the predicted result=
['0']
We show that the word embedding learned by traditional neural networks are not effective enough for Twitter sentiment classification.
[sentence]=We show that the word embedding learned by traditional neural networks are not effective enough for Twitter sentiment classification.
after reload the classifier, the predicted result=
['0']
These methods typically only model the context information of words so that they cannot distinguish words with similar context but opposite sentiment polarity (e.g.
[sentence]=These methods typically only model the context information of words so that they cannot distinguish words with similar context but opposite sentiment polarity (e.g.
after reload the classifier, the predicted result=
['1']
good and bad).
[sentence]=good and bad).
after reload the classifier, the predicted result=
['1']
We learn sentiment-specific word embedding (SSWE) by integrating the sentiment information into the loss functions of three neural networks.
[sentence]=We learn sentiment-specific word embedding (SSWE) by integrating the sentiment information into the loss functions of three neural networks.
after reload the classifier, the predicted result=
['0']
We train SSWE with massive distant-supervised tweets selected by positive and negative emoticons.
[sentence]=We train SSWE with massive distant-supervised tweets selected by positive and negative emoticons.
after reload the classifier, the predicted result=
['0']
The effectiveness of SSWE has been implicitly evaluated by using it as features in sentiment classification on the benchmark dataset in SemEval 2013, and explicitly verified by measuring word similarity in the embedding space for sentiment lexicons.
[sentence]=The effectiveness of SSWE has been implicitly evaluated by using it as features in sentiment classification on the benchmark dataset in SemEval 2013, and explicitly verified by measuring word similarity in the embedding space for sentiment lexicons.
after reload the classifier, the predicted result=
['0']
Our unified model combining syntactic context of words and sentiment information of sentences yields the best performance in both experiments.
[sentence]=Our unified model combining syntactic context of words and sentiment information of sentences yields the best performance in both experiments.
after reload the classifier, the predicted result=
['0']
